/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var Event = (function () {
            /**
             * The `Event` class is used as the base class for the creation of `Event` objects, which are passed as parameters to event listeners when an event occurs.
             *
             *      // Create instance
             *      var myEvent = new nwf.events.Event( 'someEventName' );
             *
             * @see {@link nwf.events.EventDispatcher}
             * @class nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function Event(type) {
                /**
                 * Creates a new `Event` object.
                 * @method constructor
                 * @param {String} type The name of the event (case-insensitive).
                 * @since 1.0
                 */
                this._type = type;
                this._target = null;
                this._timestamp = 0;
            }
            Object.defineProperty(Event.prototype, "target", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * Indicates the `EventTarget` to which the event was originally dispatched.
                 * @property {Object} [target=null]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return this._target;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Event.prototype, "type", {
                /**
                 * The name of the event (case-insensitive). The name must be an XML name.
                 * @property {string} [type='']
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return this._type;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Event.prototype, "timestamp", {
                /**
                 * The number of milliseconds (with microsecond precision) at the time of the event since the runtime was initialized.
                 * @property {float} [timestamp=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Duplicates an instance of an `Event` subclass.
             * Returns a new `Event` object that is a copy of the original instance of the `Event` object.
             * You do not normally call `clone`; the `EventDispatcher` class calls it automatically when you re-dispatch an event; that is, when you call `dispatchEvent(event)` from a handler that's handling an event.<br /><br />
             * The new `Event` object includes all the properties of the original.<br />
             * @returns {nwf.events.Event}
             * @since 1.0
             */
            Event.prototype.clone = function () {
                return new Event('');
            };
            /**
             * Returns a string containing all the properties of the `Event` object. The string is in the following format:
             * <p>[Event type=value bubbles=value cancelable=value]</p>
             *
             * @method toString
             * @returns {String}
             * @since 1.0
             */
            Event.prototype.toString = function () {
                return "[Event type=" + this.type + "]";
            };
            return Event;
        })();
        events.Event = Event;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var EventDispatcher = (function () {
            /**
             * The `EventDispatcher` class is the base class for all classes that dispatch events into the event flow.
             *
             * _Events are FIFO (first in, first out)._
             *
             *     // Create custom event
             *     var myEvent = new nwf.events.Event( 'someEventName' );
             *
             *     // Get dispatcher instance
             *     var dispatcher =  new nwf.events.EventDispatcher();
             *
             *     // Listen for custom event
             *     dispatcher.addEventListener( 'someEventName', function onCustomEvent( evt ){
             *         // Print dispatched event
             *         console.log( evt );
             *         // Remove this event listener if we're done with it
             *         dispatcher.removeEventListener( 'someEventName', onCustomEvent, this );
             *     }, this );
             *
             *     // ...
             *
             *     // Dispatch custom event some time in the future
             *     dispatcher.dispatchEvent( myEvent );
             *
             * _To prevent possible memory leaks, when you no longer need an event listener, remove it by calling `#removeEventListener` or `#removeAllEventListeners`. This is especially true when switching contexts by changing pages._
             *
             * @see {@link nwf.events.Event}
             * @class nwf.events.EventDispatcher
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new `EventDispatcher` object.
             * @method constructor
             * @since 1.0
             */
            function EventDispatcher() {
                this._eventList = {};
            }
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Registers an event listener handler so that the listener can be notified when events are dispatched. Subsequent calls to `addEventListener` with a different listener and/or scope will result in the separate registration of the listener.
             *
             * To prevent possible memory leaks, when you no longer need an event listener, remove it by calling `#removeEventListener` or `#removeAllEventListeners`. This is especially true when switching contexts by changing pages.
             *
             * _If multiple identical `EventListeners` are registered on the same `EventTarget` with the same parameters, the duplicate instances are discarded._
             *
             * @param {String} type The event type for which the user is registering.
             * @param {Function} listener  The listener function that processes the event. This function must accept an `Event` object as its only parameter.
             * @param {Object} [scope=null]  The scope on which to apply the listener call. This will effect the value of `this` within the listener function block. By default the scope will be set to the window or "root" scope of the dispatcher object.
             * @since 1.0
             */
            EventDispatcher.prototype.addEventListener = function (type, listener, scope) {
                if (typeof listener !== 'function') {
                    throw new Error('[EventDispatcher.addEventListener] Listener parameter must be a function.');
                }
                if (this._eventList[type] == null) {
                    this._eventList[type] = [];
                }
                this._eventList[type].push(listener);
            };
            /**
             * Allows the removal of event listeners from the event target.
             *
             * _The `listener` function and `scope` must match that which was used to register the event._
             *
             * @see {@link #removeAllEventListeners}
             * @param {String} type Specifies the event type of the `EventListener` being removed.
             * @param {Function} listener  The listener function to be removed.
             * @param {Object} [scope=null]  The scope object of the `EventListener` being removed. If a listener was registered twice with different scopes, each must be removed separately.
             * @since 1.0
             */
            EventDispatcher.prototype.removeEventListener = function (type, listener, scope) {
                if (typeof listener !== 'function') {
                    throw new Error('[EventDispatcher.addEventListener] Listener parameter must be a function.');
                }
                if (this._eventList[type] == null) {
                    return;
                }
                var index = this._getItemIndex(type, listener);
                if (index < 0) {
                    return;
                }
                this._eventList[type].splice(index, 1);
            };
            /**
             * Removes **ALL** event listeners from the event target. Always double-check to make sure you really want to remove every event listener.
             * @since 1.0
             */
            EventDispatcher.prototype.removeAllEventListeners = function () {
                for (var prop in this._eventList) {
                    delete this._eventList[prop];
                }
            };
            /**
             * Dispatches an event into the event flow. The event target is the `EventDispatcher` object upon which the `dispatchEvent()` method is called.
             * @param {nwf.events.Event} event The `Event` object to dispatch into the event flow.
             * @returns {Boolean} Returns `true` if the event was successfully dispatched. Returns `false` if the event failed to dispatch; this can happen if the event is malformed.
             * @since 1.0
             */
            EventDispatcher.prototype.dispatchEvent = function (event) {
                var type = event.type;
                if (this._eventList[type] == null) {
                    return false;
                }
                var length = this._eventList[type].length;
                for (var i = 0; i < length; i++) {
                    if (typeof this._eventList[type][i] != 'function') {
                        continue;
                    }
                    // event.timestamp = Date.now() - GLOBAL.runtimeStart; TODO: hook up timestamp
                    this._eventList[type][i](event);
                    return true;
                }
            };
            /**
             * Checks whether the `EventDispatcher` object has any listeners registered for a specific type of event.
             * @param {String} type The type of event to check.
             * @returns {Boolean} Returns `true` if a listener of the specified type is registered, or `false` otherwise.
             * @since 1.0
             */
            EventDispatcher.prototype.hasEventListener = function (type) {
                return this._eventList[type] != null;
            };
            /**
             * Returns the string representation of the specified object.
             * @returns {String}
             * @since 1.0
             */
            EventDispatcher.prototype.toString = function () {
                return "[object EventDispatcher]";
            };
            // private methods --------------------------------------------------------------
            EventDispatcher.prototype._getItemIndex = function (type, listener) {
                var length = this._eventList[type].length;
                for (var i = 0; i < length; i++) {
                    if (this._eventList[type][i] == listener) {
                        return i;
                    }
                }
                return -1;
            };
            return EventDispatcher;
        })();
        events.EventDispatcher = EventDispatcher;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/// <reference path="./Event.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var NintendoAccountManagerEvent = (function (_super) {
            __extends(NintendoAccountManagerEvent, _super);
            /**
             * Defines events dispatched by the {@link nwf.act.NintendoAccountManager}.
             *
             * @see {@link nwf.act.NintendoAccountManager}
             * @class nwf.events.NintendoAccountManagerEvent
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function NintendoAccountManagerEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(NintendoAccountManagerEvent.prototype, "serviceToken", {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Encrypted service token.
                 * Only set when `nwf.events.NintendoAccountManagerEvent.SERVICE_TOKEN_SUCCESS` or `nwf.events.NintendoAccountManagerEvent.EC_SERVICE_TOKEN_SUCCESS` are dispatched.
                 * @property {String} [serviceToken=null]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccountManagerEvent.prototype, "errorText", {
                /**
                 * Error reason.
                 * Only set when `nwf.events.NintendoAccountManagerEvent.SERVICE_TOKEN_FAIL` or `nwf.events.NintendoAccountManagerEvent.EC_SERVICE_TOKEN_FAIL` are dispatched.
                 * @property {String} [errorText=null]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccountManagerEvent.prototype, "SERVICE_TOKEN_SUCCESS", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when the independent service token is requested and successfully received.
                 * Use [getCurrentIndependentServiceToken](#!/api/nwf.act.NintendoAccountManager-method-getCurrentIndependentServiceToken) to read the last service token issued by the account server.
                 * @property {String} [SERVICE_TOKEN_SUCCESS='accountServiceToken']
                 * @static @constant
                 * @since 1.0
                 */
                // public static SERVICE_TOKEN_SUCCESS: string = 'accountServiceToken';
                get: function () {
                    return 'accountServiceToken';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccountManagerEvent.prototype, "SERVICE_TOKEN_FAIL", {
                /**
                 * Dispatched when the independent service token is requested and fails.
                 * Print the error (using `evt.errorText` in the callback) to discover the reason.
                 * @property {String} [SERVICE_TOKEN_FAIL='accountServiceTokenError']
                 * @static @constant
                 * @since 1.0
                 */
                // public static SERVICE_TOKEN_FAIL: string = 'accountServiceTokenError';
                get: function () {
                    return 'accountServiceTokenError';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccountManagerEvent.prototype, "EC_SERVICE_TOKEN_SUCCESS", {
                /**
                 * Dispatched when the E-Commerce service token is requested and successfully received.
                 * Use [getCurrentEcServiceToken](#!/api/nwf.act.NintendoAccountManager-method-getCurrentEcServiceToken) to read the last service token issued by the account server.
                 * @property {String} [EC_SERVICE_TOKEN_SUCCESS='accountEcServiceToken']
                 * @static @constant
                 * @since 1.3
                 */
                // public static EC_SERVICE_TOKEN_SUCCESS: string = 'accountEcServiceToken';
                get: function () {
                    return 'accountEcServiceToken';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccountManagerEvent.prototype, "EC_SERVICE_TOKEN_FAIL", {
                /**
                 * Dispatched when the E-Commerce service token is requested and fails.
                 * Print the error (using `evt.errorText` in the callback) to discover the reason.
                 * @property {String} [EC_SERVICE_TOKEN_FAIL='accountEcServiceTokenError']
                 * @static @constant
                 * @since 1.3
                 */
                // public static EC_SERVICE_TOKEN_FAIL: string = 'accountEcServiceTokenError';
                get: function () {
                    return 'accountEcServiceTokenError';
                },
                enumerable: true,
                configurable: true
            });
            return NintendoAccountManagerEvent;
        })(nwf.events.Event);
        events.NintendoAccountManagerEvent = NintendoAccountManagerEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var act;
    (function (act) {
        var NintendoAccount = (function () {
            function NintendoAccount() {
            }
            Object.defineProperty(NintendoAccount.prototype, "accountID", {
                /**
                 * Class containing data for working with Nintendo Accounts on the Wii U console.
                 * <p>
                 * This class is not instantiable using the <code>new</code> keyword. Instead use <code>NintendoAccountManager.getInstance().getActiveAccount()</code> or <code>NintendoAccountManager.getInstance().getAccountAtSlot(slotIndex)</code> to get an instance.
                 * </p>
                 * @class nwf.act.NintendoAccount
                 * @author Ryan Lynd
                 */
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * The account ID of the current account.
                 *
                 * * Users can specify their own IDs.
                 * * An ID has 6 to 16 alphanumeric characters.
                 * * An ID is guaranteed to be unique for each network account.
                 * @property {String} [accountID='']
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "principalID", {
                /**
                 * The principal ID of the current account.
                 * This ID is used to grab references to account information in event callbacks from the `nwf.fp.FriendPresence` class, with [getPresenceData](#!/api/nwf.fp.FriendPresence-method-getPresenceData). It is also used to speficy users when interacting with the `nwf.mv.Miiverse` and `nwf.nex.DataStore` classes.
                 * @property {uint32} [principalID=0x000000]
                 * @readonly
                 * @since 1.0
                 * @see nwf.fp.FriendPresence
                 * @see nwf.mv.Miiverse
                 * @see nwf.nex.DataStore
                 */
                get: function () {
                    return 0x000000;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "uuid", {
                /**
                * A base64-encoded string of a 128-bit ID that conforms to the version 1 Universally Unique Identifier (UUID) specification, and is likely to be globally unique. However, because the ID space differs among applications, this ID cannnot distinguish accounts across titles.
                * @property {String} [uuid='']
                * @readonly
                * @since 1.5
                */
                get: function () {
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "slotIndex", {
                /**
                 * The slot index number this account occupies.
                 * @property {uint8} [slotIndex=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "accountType", {
                /**
                 * The type of account: `NintendoAccountType.LOCAL` or `NintendoAccountType.NETWORK`. `NintendoAccountType.NETWORK` can access additional information.
                 * @property {String} [accountType=NintendoAccountType.LOCAL]
                 * @readonly
                 * @since 1.0
                 * @see nwf.act.NintendoAccountType.LOCAL
                 * @see nwf.act.NintendoAccountType.NETWORK
                 */
                get: function () {
                    return nwf.act.NintendoAccountType.LOCAL;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "eShopPurchaseAllowed", {
                // Parental Account Controls
                /**
                 * Returns `true` when "Wii U Shopping Services" is permitted. Returns `false` when it is restricted.
                 * @property {Boolean} [eShopPurchaseAllowed=true]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "friendRegAllowed", {
                /**
                 * Returns `true` when "Friend Registration" is permitted. Returns `false` when it is restricted.
                 * @property {Boolean} [friendRegAllowed=true]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "internetBrowserAllowed", {
                /**
                 * Returns `true` when "Internet Browser" is permitted. Returns `false` when it is restricted.
                 * @property {Boolean} [internetBrowserAllowed=true]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "internetMovieAllowed", {
                /**
                 * Returns `true` when "Entertainment Excluding Games" is permitted. Returns `false` when it is restricted.
                 * @property {Boolean} [internetMovieAllowed=true]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "networkCommunicationAllowed", {
                /**
                 * Returns `true` when "Online Interaction in Games" is permitted. Returns `false` when it is restricted.
                 * @property {Boolean} [networkCommunicationAllowed=true]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "miiverseRestrictionLevel", {
                /**
                 * Gets restriction level of "Miiverse".
                 * @property {uint8} [miiverseRestrictionLevel = NintendoAccount.RESTRICTION_NONE]
                 * @readonly
                 * @since 1.0
                 * @see nwf.act.NintendoAccount.RESTRICTION_NONE
                 * @see nwf.act.NintendoAccount.RESTRICTION_PART
                 * @see nwf.act.NintendoAccount.RESTRICTION_FULL
                 */
                get: function () {
                    return new nwf.act.NintendoAccount().RESTRICTION_NONE;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "country", {
                // NEW sdk 2.07.03+
                /**
                 * The country code (3166-1 alpha-2 ISO) setting of the target account.
                 * @property {String}  [country='']
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "timeZone", {
                /**
                 * The user-specified time zone of the target account.
                 * @property {String} [timeZone='']
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "miiName", {
                /**
                 * The user's Mii Name.
                 * @property {String} [miiName='']
                 * @since 1.8.2
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "persistentID", {
                // Old properties
                /**
                 * @property {Number} [persistentID=0x000000]
                 * @removed 1.5 Removed from API. Use `nwf.act.NintendoAccount.uuid` instead.
                 */
                get: function () {
                    return 0x000000;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Determines whether the account specified is over the given age. This is done using the account's date of birth, which is registered in the current network time and account held by the system and specified by the user. It can also be used in an environment that is not connected to the Internet.
             * @method isOverAge
             * @param {uint8} age The age that you want to compare with.
             * @returns {Boolean} Returns `true` if this account is over the given age.
             * Returns `false` otherwise.
             *
             * **Note:** Always returns false when sideloading.
             * Use a Running Client or mastered ROM to test accurately.
             *
             * @since 1.0
             */
            NintendoAccount.prototype.isOverAge = function (age) {
                return false;
            };
            // Old APIs
            /**
             * @removed 1.5 Removed from API. Use `nwf.act.NintendoAccount.uuid` instead.
             */
            NintendoAccount.prototype.getTransferableID = function (uniqueId) {
                return null;
            };
            Object.defineProperty(NintendoAccount.prototype, "RESTRICTION_NONE", {
                //-------------------------------------------------------------------------
                // STATIC CONSTANTS & PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * No Restriction
                 * @property {uint8} [RESTRICTION_NONE=0]
                 * @static @constant
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "RESTRICTION_PART", {
                //public static RESTRICTION_NONE: number = 0;
                /**
                 * Partial Restriction
                 * @property {uint8} [RESTRICTION_PART=1]
                 * @static @constant
                 * @since 1.0
                 */
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccount.prototype, "RESTRICTION_FULL", {
                //public static RESTRICTION_PART: number= 1;
                /**
                 * Full Restriction
                 * @property {uint8} [RESTRICTION_FULL=2]
                 * @static @constant
                 * @since 1.0
                 */
                get: function () {
                    return 2;
                },
                enumerable: true,
                configurable: true
            });
            return NintendoAccount;
        })();
        act.NintendoAccount = NintendoAccount;
    })(act = nwf.act || (nwf.act = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var act;
    (function (act) {
        var _stored = null;
        /**
         * The Parental Controls Manager is provided as an optional library to aid implementation and guideline compliance of parental control override functionality.

         * The Parental Controls Manager implements the message flow prescribed in the Wii U Guidelines sections 2.16.1, 2.16.2, and 10.1.2, including temporary and permanent parental control overrides handled via session storage and local storage, respectively.
         *
         * Usage
         * ---
         *
         * This library can be used by video-on-demand applications without modification by including the library in the main HTML file and calling one function:
         *
         *      <script src="path/to/SupportLibraries.min.js" charset="utf-8"></script>
         *      <script>
         *          nwf.act.ParentalControlsManager.initialize(
         *               "This application allows you to view videos from the internet",
         *               function(success) {
         *                  if(success) {
         *                      // handle success
         *                  } else {
         *                      // handle failure
         *                  }
         *               }
         *          );
         *      </script>
         *
         * @class nwf.act.ParentalControlsManager
         * @lib SupportLibraries.js
         * @author Nate Long
         * @author Shawn Gates
         */
        var ParentalControlsManager = (function () {
            function ParentalControlsManager() {
            }
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Starts the parental control override process.
             *
             * @method initialize
             * @param {String} message A custom message to display during the first step of the override process.
             * @param {Function} callback The callback to be fired when the override process is complete in any case: success, failure, or cancellation.
             * @param {boolean} callback.success This is set to `true` if the Parental Controls were successfully overridden, or `false` if it was not.
             * @param {boolean} [allowPermanentOverride=false] Set this to `true` if the manager should allow permanent storage of the PIN code, or `false` if it should not.
             * @static
             * @since 1.8.3
             * @async
             */
            ParentalControlsManager.initialize = function (message, callback, allowPermanentOverride) {
                if (allowPermanentOverride === void 0) { allowPermanentOverride = false; }
                setTimeout(callback.bind(null, true), 250);
                _stored = allowPermanentOverride;
                return;
            };
            /**
             * Checks for a permanent override stored on the file system.
             * Use this in conjunction with `clearOverrides` for management of permanent overrides.
             *
             * @method isPINStored
             * @return {boolean} This is set to `true` if a valid PIN is stored on the file system, or `false` if not.
             * @static
             * @since 1.8.3
             * @async
             */
            ParentalControlsManager.isPINStored = function () {
                if (_stored === null)
                    throw new Error("isPINStored() may only be called after initialize()");
                return _stored;
            };
            /**
             * Remove any existing overrides, which will cause the next override request to prompt the user for a PIN.
             *
             * @method clearOverrides
             * @since 1.8.3
             * @static
             */
            ParentalControlsManager.clearOverrides = function () {
                _stored = false;
            };
            /**
             * Pause the Parental Controls override process, hiding any current dialogs and saving the state.
             *
             * @method pauseFlow
             * @see nwf.act.ParentalControlsManager.continueFlow
             * @since 1.8.3
             * @static
             */
            ParentalControlsManager.pauseFlow = function () {
            };
            /**
             * Continue the Parental Controls override process, starting from where it left off when `#pauseFlow` was called.
             *
             * @method continueFlow
             * @since 1.8.3
             * @static
             */
            ParentalControlsManager.continueFlow = function () {
            };
            return ParentalControlsManager;
        })();
        act.ParentalControlsManager = ParentalControlsManager;
    })(act = nwf.act || (nwf.act = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var act;
    (function (act) {
        /**
         * The Nintendo Account Type.
         *
         * @enum nwf.act.NintendoAccountType
         * @author Ryan Lynd
         * @author Shawn Gates
        */
        act.NintendoAccountType = {
            /**
             * @property {String}
             * @since 1.0
             * @static @constant
            */
            LOCAL: 'local',
            /**
             * @property {String}
             * @since 1.0
             * @static @constant
            */
            NETWORK: 'network'
        };
    })(act = nwf.act || (nwf.act = {}));
})(nwf || (nwf = {}));
/// <reference path="../events/NintendoAccountManagerEvent.ts" />
/// <reference path="./NintendoAccount.ts" />
/// <reference path="./ParentalControlsManager.ts" />
/// <reference path="./NintendoAccountType.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var act;
    (function (act) {
        var NintendoAccountManager = (function (_super) {
            __extends(NintendoAccountManager, _super);
            /**
             * Class for accessing Nintendo Accounts on the Wii U console.
             *
             * The `NintendoAccountManager` class dispatches the following events:
             *
             * - nwf.events.NintendoAccountManagerEvent.SERVICE_TOKEN_FAIL
             * - nwf.events.NintendoAccountManagerEvent.SERVICE_TOKEN_SUCCESS
             * - nwf.events.NintendoAccountManagerEvent.EC_SERVICE_TOKEN_FAIL
             * - nwf.events.NintendoAccountManagerEvent.EC_SERVICE_TOKEN_SUCCESS
             *
             * @class nwf.act.NintendoAccountManager
             * @extends nwf.events.EventDispatcher
             * @author Ryan Lynd
             * @singleton
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * @private
             * The `new` method is not used to get an instance of `NintendoAccountManager`; use `#getInstance` instead.
             * @method constructor
             * @since 1.0
             */
            function NintendoAccountManager() {
                _super.call(this);
            }
            Object.defineProperty(NintendoAccountManager.prototype, "totalAccounts", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * The number of accounts that exist. A Nintendo Account exists if the result is greater than 0.
                 *
                 * __Note:__ _This is NOT the number of account slots._
                 * @property {uint8} [totalAccounts=0]
                 * @since 1.0
                 * @readonly
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoAccountManager.prototype, "availableSlots", {
                /**
                 * The total number of slots available for accounts.
                 *
                 * @property {uint8} [availableSlots=2]
                 * @since 1.0
                 * @readonly
                 */
                get: function () {
                    return 2;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Gets the `NintendoAccount` instance of the active account.
             *
             * @returns {nwf.act.NintendoAccount}
             * @since 1.0
             */
            NintendoAccountManager.prototype.getActiveAccount = function () {
                return new nwf.act.NintendoAccount();
            };
            /**
             * Gets the `NintendoAccount` instance of the specified slot.
             * @param {int} slotNumber The slot number of the account to retrieve.
             * @returns {nwf.act.NintendoAccount}
             * @since 1.0
             */
            NintendoAccountManager.prototype.getAccountAtSlot = function (slotNumber) {
                return new nwf.act.NintendoAccount();
            };
            /**
             * Examines the slot with the given number, and determines whether an account exists.
             * @param {int} slotNumber The slot number to test against.
             * @returns {Boolean} Returns `false` if the slot is unoccupied.
             * Returns `true` if the slot is occupied with an account.
             * @since 1.0
             */
            NintendoAccountManager.prototype.isSlotOccupied = function (slotNumber) {
                return false;
            };
            /**
             * Acquires a new independent service token from the server and must be called at least one time per application lifecycle.
             * Should be called again if a timeout for the token is implemented; otherwise use `#getCurrentIndependentServiceToken`.
             * @returns {Boolean} Returns `true` if the asynchronous process of acquiring the independent service token has started successfully.
             * Returns `false` if the asynchronous process of acquiring the independent service token has failed to start.
             * @see nwf.events.NintendoAccountManagerEvent#SERVICE_TOKEN_SUCCESS
             * @see nwf.events.NintendoAccountManagerEvent#SERVICE_TOKEN_FAIL
             * @since 1.0
             * @async
             */
            NintendoAccountManager.prototype.acquireNewIndependentServiceToken = function () {
                return false;
            };
            /**
            * Returns the last token that was received from the server.
            * @returns {String}      The last independent service token the application has acquired from the authentication server.
            * If "Do Not Require Service Token" is set, then `"test token"` is returned instead.
            * Otherwise it will be `""` (an empty `String`), which is a "falsy" value.
            * So it's safe to simply check `if (acctmngr.getCurrentIndependentServiceToken()) { ...it was a valid token... }`.
            * @since 1.0
            */
            NintendoAccountManager.prototype.getCurrentIndependentServiceToken = function () {
                return '09x123msdx923kf2394x1ld';
            };
            /**
            * Acquires a new e-commerce token from the server and must be called at least one time per application lifecycle.
            * Should be called again if a timeout for the token is implemented; otherwise use `#getCurrentEcServiceToken`.
            * @returns {Boolean} Returns `true` if the asynchronous process of acquiring the e-commerce service token has started successfully.
            * Returns `false` if the asynchronous process of acquiring the e-commerce service token has failed to start.
            * @see nwf.events.NintendoAccountManagerEvent#EC_SERVICE_TOKEN_SUCCESS
            * @see nwf.events.NintendoAccountManagerEvent#EC_SERVICE_TOKEN_FAIL
            * @since 1.3
            * @async
            */
            NintendoAccountManager.prototype.acquireNewEcServiceToken = function () {
                return false;
            };
            /**
            * Returns the last e-commerce service token that was received from the server.
            * @returns {String}      The last e-commerce service token the application has acquired from the authentication server.
            * By default, this will return `""` (an empty `String`), which is a "falsy" value.
            * So it's safe to simply check `if (acctmngr.getCurrentEcServiceToken()) { ...it was a valid token... }`.
            * @since 1.3
            */
            NintendoAccountManager.prototype.getCurrentEcServiceToken = function () {
                return '09x123msdx923kf2394x1ld';
            };
            /**
             * Disables the internal parental control checks to allow the system to access Nintendo Network servers (e.g., Miiverse and NEX).
             * If the Application Type in the Mastering Info page of Project Settings is set to Service Application, this is called automatically at startup.
             * If the {@link nwf.act.NintendoAccount#networkCommunicationAllowed networkCommunicationAllowed} parental control is `false`, this API must be called before interacting with Nintendo's network services.
             * See the Wii U Guidelines for specific scenarios when this API should be used.
             * @since 1.2
             */
            NintendoAccountManager.prototype.disableNetworkCommunicationParentalControlCheck = function () {
                return null;
            };
            Object.defineProperty(NintendoAccountManager.prototype, "TOTAL_SLOTS", {
                //-------------------------------------------------------------------------
                // STATIC CONSTANTS & PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Console Type Retail.
                 * @property {uint32} [TOTAL_SLOTS=12]
                 * @since 1.0
                 * @static @constant
                 */
                get: function () {
                    return 12;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Accesses an instance of the `NintendoAccountManager` singleton.
             * @method getInstance
             * @returns {nwf.act.NintendoAccountManager} The `NintendoAccountManager` singleton instance.
             * @since 1.0
             * @static
             */
            NintendoAccountManager.getInstance = function () {
                if (!this.s_instance) {
                    this.s_instance = new NintendoAccountManager();
                    this.s_instance.constructor = null;
                }
                return this.s_instance;
            };
            /**
             * Tests for class availability.
             * @method isSupported
             * @returns {Boolean} Returns `false` if the class is not supported, or `true` if the class is available.
             * @since 1.0
             * @static
             */
            NintendoAccountManager.isSupported = function () {
                return false;
            };
            return NintendoAccountManager;
        })(nwf.events.EventDispatcher);
        act.NintendoAccountManager = NintendoAccountManager;
    })(act = nwf.act || (nwf.act = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var aoc;
    (function (aoc) {
        var AOCTitle = (function (_super) {
            __extends(AOCTitle, _super);
            /**
             * The `AOCTitle` class provides functions for interacting with add-on content.
             *
             *      // Get a reference to the first AOCTitle object
             *      var titleList = nwf.aoc.AOC.listTitles();
             *      var title1 = titleList[ 0 ];
             *
             *      // Add an event listener for when `AOCTitle` is opened so we can safely access it
             *      title1.addEventListener( nwf.events.AOCTitleEvent.OPEN_COMPLETE, onOpen, this );
             *
             *      // We should also add a listener in case `AOCTitle` fails to open
             *      title1.addEventListener( nwf.events.AOCTitleEvent.OPEN_ERROR, onError,this );
             *
             *      // Open event handler
             *      function onOpen( evt ){
             *          // We can now safely access the `systemPath` property and all of the other methods of the `AOCTitle` object
             *          sysPath = evt.target.systemPath;
             *          titleDir = evt.target.getDirectory();
             *
             *          // When you are done with the `AOCTitle` object you can close it
             *          evt.target.close();
             *      }
             *
             *      // Error event handler
             *      function onError( evt ){
             *          // Handle the error
             *      }
             *
             *      // Now we can call the `open` method
             *      title1.open();
             *
             * The `AOCTitle` class dispatches the following events:
             *
             * - nwf.events.AOCTitleEvent.OPEN_COMPLETE
             * - nwf.events.AOCTitleEvent.OPEN_ERROR
             *
             * @class nwf.aoc.AOCTitle
             * @extends nwf.events.EventDispatcher
             * @author Cory O'Regan
             * @author Shawn Gates
            */
            //---------------------------------------------------------------------
            // constructor
            //---------------------------------------------------------------------
            /**
            * @private
            * The `new` method is not used to get an instance of `AOCTitle`; use `nwf.aoc.AOC.listTitles` instead.
            * @method constructor
            * @since 1.0
            */
            function AOCTitle() {
                _super.call(this);
            }
            Object.defineProperty(AOCTitle.prototype, "titleID", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * Title ID.
                 * @property {uint64} [titleID=0]
                 * @readonly
                 * @since 1.1
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AOCTitle.prototype, "groupID", {
                /**
                 * Group ID.
                 * @property {uint32} [groupID=0]
                 * @readonly
                 * @since 1.1
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AOCTitle.prototype, "version", {
                /**
                 * Title version.
                 * @property {uint16} [version=0]
                 * @readonly
                 * @since 1.1
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AOCTitle.prototype, "systemPath", {
                /**
                 * Fully qualified system path of this add-on content's directory.
                 *
                 * __Note:__ Will be `null` until `nwf.events.AOCTitleEvent.OPEN_COMPLETE` has been fired.
                 *
                 * @property {String} [systemPath='']
                 * @readonly
                 * @since 1.1
                 */
                get: function () {
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
            * Opens this object's add-on content title.
            * @returns {Boolean} Returns `true` if the asynchronous open process has started successfully, or `false` otherwise.
            * @since 1.1
            */
            AOCTitle.prototype.open = function () {
                return null;
            };
            /**
            * Closes this object's add-on content title.
            * @returns {int} An error code defined by the `nwf.aoc.AOCError` enum.
            * @since 1.1
            */
            AOCTitle.prototype.close = function () {
                return null;
            };
            /**
            * Gets a `Directory` object set to this title's root directory.
            * @returns {nwf.io.Directory} `nwf.io.Directory` object that is set to this title's root directory.
            * @since 1.1
            */
            AOCTitle.prototype.getDirectory = function () {
                return null;
            };
            /**
            * Deletes add-on content.
            *
            *       // Assume we have an `AOCTitle` object called 'title'
            *
            *       function onOpen( evt ){
            *
            *           // We can now safely access and delete the contents of the `AOCTitle` object
            *
            *           // First we get a reference to the `AOCItems` we would like to delete
            *           var itemList = title.getPurchasedItems();
            *           var item1 = itemList[ 0 ];
            *           var item2 = itemList[ 1 ];
            *
            *           // Then we pass their indices to the `deleteContent` method as an array
            *           title.deleteContent( [ item1.index, item2.index ] );
            *
            *       }
            *
            *       title.open();
            *
            * **Note:** When sideloading, `deleteContent` will delete the actual content directory on the host PC.
            * Make sure a backup copy is available when testing this function.
            *
            * @param {int[]} itemIndices Array of content indices to delete.
            * @returns {int} An error code defined by the `nwf.aoc.AOCError` enum.
            * @since 1.1
            */
            AOCTitle.prototype.deleteContent = function (itemIndices) {
                return null;
            };
            /**
            * Gets an array of system paths to each item of the purchased add-on content.
            * @returns {String[]} Array of strings that are the system paths of each purchased add-on content item.
            * @since 1.1
            */
            AOCTitle.prototype.getPurchasedContentPaths = function () {
                return null;
            };
            /**
            * Returns an array of `{@link nwf.aoc.AOCItem AOCItem}` objects for each of the purchased `{@link nwf.aoc.AOCItem AOCItems}`.
            *
            * Returns {@link null} if no items exist.
            *
            * @returns {nwf.aoc.AOCItem[]|null} Array of `AOCItem` objects.
            * @since 1.2
            */
            AOCTitle.prototype.getPurchasedItems = function () {
                return null;
            };
            return AOCTitle;
        })(nwf.events.EventDispatcher);
        aoc.AOCTitle = AOCTitle;
    })(aoc = nwf.aoc || (nwf.aoc = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var aoc;
    (function (aoc) {
        var AOCItem = (function () {
            function AOCItem() {
            }
            Object.defineProperty(AOCItem.prototype, "id", {
                /**
                 * The `AOCItem` class provides functions for interacting with purchased content items.
                 *
                 *
                 * @class nwf.aoc.AOCItem
                 * @author Ryan Lynd
                 * @author Shawn Gates
                */
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * Data content ID.
                 * @property {String} [id=null]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return null; // "0010" ...
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AOCItem.prototype, "index", {
                /**
                 * Data content index.
                 * @property {uint32} [index=null]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AOCItem.prototype, "systemPath", {
                /**
                 * Fully qualified system path of the content's data.
                 * @property {String} [systemPath=null]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Gets a Directory object set to this item's root directory.
             * @returns {nwf.io.Directory} `nwf.io.Directory` object that is set to this item's root directory.
             * @since 1.2
             */
            AOCItem.prototype.getDirectory = function () {
                return null;
            };
            return AOCItem;
        })();
        aoc.AOCItem = AOCItem;
    })(aoc = nwf.aoc || (nwf.aoc = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var AOCTitleEvent = (function (_super) {
            __extends(AOCTitleEvent, _super);
            /**
             * An `AOCTitleEvent` object is triggered when an asynchronous method is called from the Nintendo Web Framework AOC API.
             *
             * @class nwf.events.AOCTitleEvent
             * @see {@link nwf.aoc.AOCTitle}
             * @extends nwf.events.Event
             * @author Cory O'Regan
             * @author Shawn Gates
             */
            function AOCTitleEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(AOCTitleEvent.prototype, "errorID", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * Integer value of the error that triggered the event.
                 * @property {int} [errorID=AOCError.ERROR_NONE]
                 * @readonly
                 * @since 1.1
                 * @see nwf.aoc.AOCError.ERROR_NONE
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AOCTitleEvent.prototype, "OPEN_COMPLETE", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when a title open is successful. Triggered by [nwf.aoc.AOCTitle#open](#!/api/nwf.aoc.AOCTitle-method-open).
                 * @property {string} [OPEN_COMPLETE='openComplete']
                 * @since 1.1
                 * @static @constant
                 */
                // public static OPEN_COMPLETE: string = 'openComplete';
                get: function () {
                    return 'openComplete';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AOCTitleEvent.prototype, "OPEN_ERROR", {
                /**
                 * Dispatched when a title open is unsuccessful. Triggered by [nwf.aoc.AOCTitle#open](#!/api/nwf.aoc.AOCTitle-method-open).
                 * @property {string} [OPEN_ERROR='openError']
                 * @since 1.1
                 * @static @constant
                 */
                // public static OPEN_ERROR: string = 'openError';
                get: function () {
                    return 'openError';
                },
                enumerable: true,
                configurable: true
            });
            return AOCTitleEvent;
        })(events.Event);
        events.AOCTitleEvent = AOCTitleEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var aoc;
    (function (aoc) {
        /**
         * `AOCError` constants for `AOCTitle` method return values of the `errorID` property of an `AOCTitleEvent`.
         *
         * @enum nwf.aoc.AOCError
         * @author Cory O'Regan
         */
        aoc.AOCError = {
            /**
             * Indicates that the process ended normally.
             * @type int
             * @since 1.1
             * @static @constant */
            ERROR_NONE: 0,
            /**
             * One of the parameters passed to the method was invalid.
             * @type int
             * @since 1.1
             * @static @constant */
            ERROR_INVALID_PARAM: 1,
            /**
             * The AOC extension has not been loaded.
             * @type int
             * @since 1.1
             * @static @constant */
            ERROR_NOT_INITIALIZED: 2,
            /**
             * The title is not opened.
             * @type int
             * @since 1.1
             * @static @constant */
            ERROR_NOT_OPENED: 8,
            /**
             * The title is already opened.
             * @type int
             * @since 1.1
             * @static @constant */
            ERROR_ALREADY_OPENED: 9,
            /**
             * Closing the title failed. This is most likely due to a directory or file within the title being open.
             * @type int
             * @since 1.1
             * @static @constant */
            ERROR_CLOSE_FAILURE: 10,
            /**
             * Reached the upper limit on the number of titles that can be opened. The max number of concurrently opened titles is 16.
             * @type int
             * @since 1.1
             * @static @constant */
            ERROR_EXCEED_LIMIT: 11,
            /**
             * Indicates that the add-on content title does not exist.
             * @type int
             * @since 1.1
             * @static @constant */
            ERROR_NOT_FOUND_TITLE: 16,
            /**
             * The add-on content with the content index specified in `contentIndexes` does not exist.
             * @type int
             * @since 1.1
             * @static @constant */
            ERROR_NOT_FOUND_CONTENT: 17,
            /**
             * Indicates that access to the add-on content title is not permitted.
             * @type int
             * @since 1.1
             * @static @constant */
            ERROR_ACCESS_DENIED: 18,
            /**
             * Indicates that an internal error occurred.
             * @type int
             * @since 1.1
             * @static @constant */
            ERROR_INTERNAL_ERROR: 1024
        };
    })(aoc = nwf.aoc || (nwf.aoc = {}));
})(nwf || (nwf = {}));
/// <reference path="./AOCTitle.ts" />
/// <reference path="./AOCItem.ts" />
/// <reference path="../events/AOCTitleEvent.ts" />
/// <reference path="./AOCError.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var aoc;
    (function (aoc) {
        /**
         * The `AOC` class provides static functions for managing add-on content.
         *
         * __Note:__ The Add-on Content feature must be enabled in the Features page of Project Settings for the feature to work and for `nwf.aoc` to be defined.
         *
         *     // Get a reference to the first `AOCTitle` object
         *     var titleList = nwf.aoc.AOC.listTitles();
         *     var title1 = titleList[ 0 ];
         *
         * @class nwf.aoc.AOC
         * @author Cory O'Regan
         * @author Shawn Gates
        */
        var AOC = (function () {
            function AOC() {
            }
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
              * Gets a list of available add-on content titles.
              * @returns {nwf.aoc.AOCTitle[]} A list of `AOCTitle` objects.
              * @since 1.1
              * @static
              * @method listTitles
             */
            AOC.listTitles = function () {
                return null;
            };
            /**
             * Asynchronously retrieves a list of available add-on content titles.
             *
             * The list of titles (`nwf.aoc.AOCTitle[]`) is passed with the first callback parameter.
             *
             *     nwf.aoc.AOC.listTitlesAsync(function(titleList) {
             *          // Check to be sure that there are titles in the list
             *          if (titleList.length > 0) {
             *              // Work with list of AOCTitle objects...
             *          } else {
             *              // No titles available...
             *          }
             *      });
             *
             * @param {Function} callback The callback function to receive the list of titles.
             * @param {Array|null} callback.titleList An array of AOC titles.
             * @returns {int} Error status code. See: {@link nwf.aoc.AOCError}
             * @since 1.2
             * @static
             * @async
             * @method listTitlesAsync
            */
            AOC.listTitlesAsync = function (callback) {
                return null;
            };
            return AOC;
        })();
        aoc.AOC = AOC;
    })(aoc = nwf.aoc || (nwf.aoc = {}));
})(nwf || (nwf = {}));
/// <reference path="../events/EventDispatcher.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var display;
    (function (display) {
        /**
         * Interface class for all `nwf` Display classes.
         *
         * _This class is for documentation purposes only._
         *
         * @class nwf.display.IDisplay
         * @author Ryan Lynd
         * @author Shawn Gates
         * @extends nwf.events.EventDispatcher
         */
        var IDisplay = (function (_super) {
            __extends(IDisplay, _super);
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * @private
             * The `new` method is not used to get an instance of `IDisplay`.
             * @method constructor
             * @since 1.0
             */
            function IDisplay() {
                _super.call(this);
                this._initialized = false;
                this._hasInputEvents = false;
                this._width = 854;
                this._height = 480;
                this._viewportFilter = 'point';
                this._attached = false;
                this._hidden = true;
                this._window = null;
                // overwritten by subclasses
                this._type = nwf.display.DisplayType.GENERIC;
                this._aspectRatio = nwf.display.AspectRatio.WIDE_16X9;
                this._bounds = { x: 0, y: 0, width: 1280, height: 720 };
                this._viewport = { x: 0, y: 0, width: 1280, height: 720 };
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * When set to `true`, Screen Burn-In Reduction is enabled.
                 * When set to `false`, the feature is disabled.
                 *
                 * The default value of `dimmingEnabled` is `true`.
                 * Unless disabled in System Settings, the Wii U automatically lowers the TV screen brightness to 25% and the GamePad screen brightness to 30% if the system does not receive user input for approximately five minutes.
                 *
                 * If `dimmingEnabled` is set to `false`, Screen Burn-In Reduction will be disabled even if it is enabled in System Settings.
                 * Setting `dimmingEnabled` back to `true` after setting it to `false` will reset `timeBeforeDimming` back to five minutes.
                 * Therefore, in the absence of user input, the screen will dim again five minutes after setting `dimmingEnabled` back to `true`.
                 *
                 * __Note:__ If the user has disabled Screen Burn-In Reduction in System Settings, this property will always return `false`.
                 *
                 * @property {Boolean} [dimmingEnabled=true]
                 * @since 1.0
                 */
                this.dimmingEnabled = true;
                /**
                 * Adjusts the volume of all media coming out of the speakers associated with the display. This value has a range of 0.0 to 1.0 and will be clamped when given a value that is out of range.
                 *
                 * @property {Number} [volume=1.0]
                 * @since 1.8.3
                 */
                this.volume = 1.0;
                this._attached = true;
            }
            Object.defineProperty(IDisplay.prototype, "id", {
                //-------------------------------------------------------------------------
                // Accessors
                //-------------------------------------------------------------------------
                /**
                 * Unique ID of the display. Assigned by the system.
                 * @property {int} [id=1]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return this._id;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IDisplay.prototype, "type", {
                /**
                 * Display Type of the display.
                 * @property {String} [type=nwf.display.DisplayType.GENERIC]
                 * @readonly
                 * @since 1.0
                 * @see nwf.display.DisplayType.GAMEPAD
                 * @see nwf.display.DisplayType.TV
                 * @see nwf.display.DisplayType.GENERIC
                 * @see nwf.display.DisplayType.SHARED
                 */
                get: function () {
                    return this._type;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IDisplay.prototype, "aspectRatio", {
                /**
                 * Current display aspect ratio.
                 * This is set by the user in the Wii U preference menu and may not reflect their actual display if it has been improperly configured.
                 * @property {String} [aspectRatio=nwf.display.AspectRatio.WIDE_16X9]
                 * @readonly
                 * @since 1.0
                 * @see nwf.display.AspectRatio.STANDARD_4X3
                 * @see nwf.display.AspectRatio.WIDE_16X9
                 */
                get: function () {
                    return this._aspectRatio;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IDisplay.prototype, "attached", {
                /**
                 * Returns `true` if this display has been loaded, either by being set as a Start Page or if the `#load` method is executed. Returns `false` otherwise.
                 * @property {Boolean} [attached=false]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return this._attached;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IDisplay.prototype, "hidden", {
                /**
                 * Returns `true` if this display is hidden, and `false` if it is not.
                 * A hidden display is not displayed on the screen, but all display properties and methods are valid.
                 * By default, `hidden` is set to `true`.
                 * To show a display, call #show().
                 * @property {Boolean} [hidden=true]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return this._hidden;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IDisplay.prototype, "bounds", {
                /**
                 * The size and location of the area on this display that is drawn to.
                 * In Shared WebView mode, this can be changed with the `#setViewport` method.
                 * @property {Object} [bounds={x:0, y:0, width:854, height:480}]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return this._bounds;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IDisplay.prototype, "viewport", {
                /**
                 * The size and location of the area in the WebView that is displayed on this display.
                 * In Shared WebView mode, this can be changed with the `#setViewport` method, and the default is `{x:0, y:0, width:1280, height:720}`, or the same value as `nwf.display.TVDisplay#viewport`.
                 * This will make the displays mirror each other.
                 * @property {Object} [viewport={x:0, y:0, width:854, height:480}]
                 * @readonly
                 * @since 1.3
                 */
                get: function () {
                    return this.viewport;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IDisplay.prototype, "width", {
                /**
                 * The width of this display in pixels.
                 * @property {int} [width=854]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return this._width;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IDisplay.prototype, "height", {
                /**
                 * The height of this display in pixels.
                 * @property {int} [height=480]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return this._height;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IDisplay.prototype, "window", {
                /**
                 * Reference to the top `HTML Window` object associated with this display.
                 * Each display has one top window object.
                 * Scripts executing in the context of a display are scoped to this window object and/or its child frames.
                 *
                 * __Note:__ Will return `null` until the display has been loaded.
                 * The display will load if it is either set as a Start Page or if the display's `#load` method is executed.
                 * @property {HTMLWindow} [window=null]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return this._window;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IDisplay.prototype, "timeBeforeDimming", {
                /**
                 * Gets the remaining time in seconds before auto-dimming occurs.
                 * Counter decrements every second when no user input is detected.
                 * Upon user input, the counter is reset to the the value of 300 seconds.
                 *
                 * @property {uint32} [timeBeforeDimming=300]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 300;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IDisplay.prototype, "viewportFilter", {
                /**
                 * The current filter mode of the viewport.
                 * @property {String} [viewportFilter=nwf.display.ViewportFilter.POINT]
                 * @see nwf.display.ViewportFilter
                 * @readonly
                 * @since 1.3
                 */
                get: function () {
                    return nwf.display.ViewportFilter.POINT;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Loads a page on the display.
             * Subsequent calls to load will replace the content of the same context.
             * Similar to `window.location.replace('URL');`  Calling this method will set the `#hidden` property to `false` and the `#attached` property to `true`.
             * The `#window` property will also change from `null` to a valid `window` object.
             *
             * @param {String} [URL] Specifies the URL of the page to open on the display.
             * @since 1.0
             */
            IDisplay.prototype.load = function (URL) {
                this.dispatchEvent({
                    type: nwf.events.DisplayEvent.UNINITIALIZED,
                    target: this
                });
                this._initialized = true;
                var winName = this._type + this._id + Date.now() + '';
                var winSettings = 'width=' + this._width + ',height=' + this._height + ',left=854,resizable=yes,dependent=yes,minimizable=yes';
                this._window = window.open(URL, winName, winSettings);
                var context = this._window;
                // webkit has an issue with location so events/context aren't accurate, so hacks are needed
                // tight loop to check status of load and add listener when new doc is available
                var oldDoc = context.document;
                var self = this;
                var loadLoop = setInterval(function () {
                    if (oldDoc === context.document || context.document.readyState === 'uninitialized')
                        return;
                    var docstate = context.document.readyState;
                    if (docstate === 'loading' || docstate === 'interactive' || docstate === 'complete') {
                        context.document.addEventListener('DOMContentLoaded', function (evt) { return self._fireReady(); }, false);
                        context.addEventListener('load', function (evt) { return self._fireLoad(); }, false);
                    }
                    else {
                        // ?
                        self._fireBoth();
                    }
                    clearInterval(loadLoop);
                }, 16);
                this.dispatchEvent({
                    type: nwf.events.DisplayEvent.INITIALIZED,
                    target: this
                });
                this._hidden = false;
                return null;
            };
            /**
             * Saves the contents of the current display as a PNG file.
             *
             *     var screenDumpFilePath = '/vol/save/common/some_file_name.png';
             *     var gamepadDisplay = nwf.display.DisplayManager.getInstance().getGamePadDisplay();
             *     gamepadDisplay.screenDump( screenDumpFilePath );
             *
             * @param {String} filePath The path to the output file (PNG).
             * @since 1.0
             */
            IDisplay.prototype.screenDump = function (filePath) {
                return null;
            };
            /**
             * Captures the display as and returns an {@link HTMLImageElement} object with the `callback`.
             *
             * You can configure the size of the resulting `Image` with the `options` parameter.
             * _The image will "stretch" to fill the size of the defined width and height._
             *
             *     var display = nwf.display.DisplayManager.getInstance().getGamePadDisplay();
             *     display.captureScreen( function( img ){
             *          // Attach img to the screen or draw to a canvas element...
             *     }, { width:854, height:480 });
             *
             * @param {Function} callback Function to handle the generated `Image`.
             * @param {HTMLImageElement} callback.image `HTMLImageElement` passed to the callback function.
             * @param {Object} [options] Optional object to configure the screen capture.
             * @param {uint16} [options.width] Optional parameter to set the width of the returned `Image`. Default: Current `Display` width. Maximum value: 8196
             * @param {uint16} [options.height] Optional parameter to set the height of the returned `Image`. Default: Current `Display` height. Maximum value: 8196
             * @since 1.0
             * @async
             */
            IDisplay.prototype.captureScreen = function (callback, options) {
                return null;
            };
            /**
             * Sets the `#viewport` and `#bounds` of this display.
             * The viewport parameters define the area of the WebView that is shown on this display.
             * The bounds parameters define the area of this display that is drawn to.
             * Areas outside of the bounds are the color defined by `nwf.display.DisplayManager.backgroundColor`.
             * If the size of the viewport is different then the bounds, the output will be scaled to fit.
             * This method is only available when the display configuration is set to Shared WebView.
             *
             * @param {Number} [viewportX = 0] The X coordinate of the top left point in this display's viewport.
             * @param {Number} [viewportY = 0] The Y coordinate of the top left point in this display's viewport.
             * @param {Number} [viewportWidth = 854] The width of this display's viewport.
             * @param {Number} [viewportHeight = 480] The height of this display's viewport.
             * @param {Number} [boundsX = 0] The X coordinate of the top left point in this display's bounds.
             * @param {Number} [boundsY = 0] The Y coordinate of the top left point in this display's bounds.
             * @param {Number} [boundsWidth = 854] The width of this display's bounds.
             * @param {Number} [boundsHeight = 480] The height of this display's bounds.
             * @since 1.3
             */
            IDisplay.prototype.setViewport = function (viewportX, viewportY, viewportWidth, viewportHeight, boundsX, boundsY, boundsWidth, boundsHeight) {
                return null;
            };
            /**
             * Sets the filtering method to use with #setViewport.
             * @param {nwf.display.ViewportFilter} filterType The filtering type to use.
             * @since 1.3
             */
            IDisplay.prototype.setViewportFilter = function (filterType) {
                return null;
            };
            /**
             * Returns the `CanvasRenderingContext2D` associated with this display's WebView.
             * This allows for direct rendering into the WebView's backing store and removes an unnecessary copy for most canvas based games.
             *
             * When drawing to the returned context all `clear` calls will clear to the color defined with the DisplayManager's `{@link nwf.display.DisplayManager#backgroundColor backgroundColor}`.
             *
             * __Note:__ _The Web Inspector also renders directly to the WebView and can overwrite other calls.
             * Disabling the Web Inspector will stop this behavior and it will not occur on mastered images._
             * @returns {CanvasRenderingContext2D}
             * @since 1.5
             * @see nwf.display.GamePadDisplay.paintContext2D
             * @see nwf.display.TVDisplay.paintContext2D
             * @see nwf.display.DisplayManager.backgroundColor
             */
            IDisplay.prototype.getContext2D = function () {
                return null;
            };
            /**
             * Commits all draw calls to be drawn to the `CanvasRenderingContext2D` associated with this display's WebView.
             * @since 1.5
             * @see nwf.display.GamePadDisplay.getContext2D
             * @see nwf.display.TVDisplay.getContext2D
             */
            IDisplay.prototype.paintContext2D = function () {
                return null;
            };
            /**
             * Hides the contents of this display.
             * Calling `hide` will stop rendering objects to the attached screen and set the `#hidden` property to `true`.
             * All scripts, animations, and property access remain intact.
             * @since 1.0
             */
            IDisplay.prototype.hide = function () {
                return null;
            };
            /**
             * Shows the contents of this display.
             * Calling `show` will render objects to the attached screen and set the `#hidden` property to `false`.
             * @since 1.0
             */
            IDisplay.prototype.show = function () {
                return null;
            };
            //-------------------------------------------------------------------------
            // ANIMATION METHODS
            //-------------------------------------------------------------------------
            /**
             * Adds an animation to the display. These animations exist outside of the normal web context and will persist even when a page change occurs. The `x` and `y` parameters will specify where the animation appears on the display. It will remain in that position regardless of any page changes or `DOM` reflows that occur. To change the position of the animation on screen, call `#translateAnimation`.
             *
             * The same `nwf.ui.Animation` object can be added to a display multiple times. Each one will be assigned a unique id that can be used to access that animation.
             *
             * @param {nwf.ui.Animation} animation The animation to add to the display.
             * @param {Number} x The `x` position of the animation on screen.
             * @param {Number} y The `y` position of the animation on screen.
             * @param {Number} [fadeIn=0] The number of frames to fade in the animation.
             * @returns {Number} A unique id for this animation.
             * @since 1.8.1
             */
            IDisplay.prototype.addAnimation = function (animation, x, y, fadeIn) {
                return 0;
            };
            /**
             * Translates the position of the animation on screen.
             *
             * @param {Number} id The id of the animation to be moved.
             * @param {Number} x The new `x` position of the animation on screen.
             * @param {Number} y The new `y` position of the animation on screen.
             * @since 1.8.1
             */
            IDisplay.prototype.translateAnimation = function (id, x, y) {
                return null;
            };
            /**
             * Remove the given animation from the display.
             *
             * @param {Number} id The `id` of the animation to be removed.
             * @param {Number} [fadeOut=0] The number of frames to fade out the animation.
             * @returns {Boolean} Returns `true` if the animation was successfully removed, or `false` otherwise.
             * @since 1.8.1
             */
            IDisplay.prototype.removeAnimation = function (id, fadeOut) {
                return false;
            };
            /**
             * Remove all animations currently on this display.
             *
             * @returns {Boolean} Returns `true` if the animations were successfully removed, or `false` otherwise.
             * @param {Number} [fadeOut=0] The number of frames to fade out the animations.
             * @since 1.8.1
             */
            IDisplay.prototype.removeAllAnimations = function (fadeOut) {
                return false;
            };
            //-------------------------------------------------------------------------
            // PRIVATE METHODS
            //-------------------------------------------------------------------------
            IDisplay.prototype._fireReady = function (evt) {
                this.dispatchEvent({
                    type: nwf.events.DisplayEvent.READY,
                    target: this
                });
            };
            IDisplay.prototype._fireLoad = function (evt) {
                this.dispatchEvent({
                    type: nwf.events.DisplayEvent.LOAD,
                    target: this
                });
            };
            IDisplay.prototype._fireBoth = function (evt) {
                this.dispatchEvent({
                    type: nwf.events.DisplayEvent.READY,
                    target: this
                });
                this.dispatchEvent({
                    type: nwf.events.DisplayEvent.LOAD,
                    target: this
                });
            };
            IDisplay.prototype._onPageLoaded = function (evt) {
                this._window.removeEventListener('load', this._onPageLoaded, false);
                console.info('DOM window load event');
                var self = this;
                // give the window a short amount of time to settle
                setTimeout(function () {
                    self._fireBoth();
                }, 100);
            };
            return IDisplay;
        })(nwf.events.EventDispatcher);
        display.IDisplay = IDisplay;
    })(display = nwf.display || (nwf.display = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var display;
    (function (display) {
        var TVDisplay = (function (_super) {
            __extends(TVDisplay, _super);
            /**
             * Represents the display sent to the TV.
             *
             *     // Get instance
             *     var tvDisplay = nwf.display.DisplayManager.getInstance().getTVDisplay();
             *
             * The `TVDisplay` class dispatches the following events:
             *
             * - nwf.events.DisplayEvent.INITIALIZED
             * - nwf.events.DisplayEvent.LOAD
             * - nwf.events.DisplayEvent.READY
             * - nwf.events.DisplayEvent.UNINITIALIZED
             *
             * @class nwf.display.TVDisplay
             * @extends nwf.display.IDisplay
             * @author Ryan Lynd
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * @private
             * The `new` method is not used to get an instance of a `TVDisplay`; use `nwf.display.DisplayManager.getTVDisplay` instead.
             * @method constructor
             * @since 1.0
             */
            function TVDisplay() {
                _super.call(this);
            }
            Object.defineProperty(TVDisplay.prototype, "id", {
                //-------------------------------------------------------------------------
                // Accessors
                //-------------------------------------------------------------------------
                /**
                 * Unique ID of the display. Assigned by the system.
                 * @property {int} [id=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TVDisplay.prototype, "type", {
                /**
                 * Display Type of the display.
                 * @property {String} [type=nwf.display.DisplayType.TV]
                 * @readonly
                 * @since 1.0
                 * @see nwf.display.DisplayType.GAMEPAD
                 * @see nwf.display.DisplayType.TV
                 * @see nwf.display.DisplayType.GENERIC
                 * @see nwf.display.DisplayType.SHARED
                 */
                get: function () {
                    // return '';
                    return nwf.display.DisplayType.TV;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TVDisplay.prototype, "bounds", {
                /**
                 * The size and location of the area on this display that is drawn to. In Shared WebView mode, this can be changed with the `#setViewport` method.
                 * @property {Object} [bounds={x:0, y:0, width:1280, height:720}]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return { x: 0, y: 0, width: 1280, height: 720 };
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TVDisplay.prototype, "viewport", {
                /**
                 * The size and location of the area in the WebView that is displayed on this display. In Shared WebView mode, this can be changed with the `#setViewport` method, and the default is `{x:0, y:0, width:1280, height:720}`, or the same value as `nwf.display.TVDisplay#viewport`. This will make the displays mirror each other.
                 * @property {Object} [viewport={x:0, y:0, width:1280, height:720}]
                 * @readonly
                 * @since 1.3
                 */
                get: function () {
                    return { x: 0, y: 0, width: 1280, height: 720 };
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TVDisplay.prototype, "width", {
                /**
                 * The width of this display in pixels.
                 * @property {int} [width=1280]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 1280;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TVDisplay.prototype, "height", {
                /**
                 * The height of this display in pixels.
                 * @property {int} [height=720]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 720;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TVDisplay.prototype, "window", {
                /**
                 * Reference to the top `HTML Window` object associated with this display.
                 * Each display has one top window object. Scripts executing in the context of a display are scoped to this window object and/or its child frames.
                 *
                 * __Note:__ Will return `null` until the display has been loaded. The display will load if it is either set as a Start Page or if [nwf.display.TVDisplay.load](#!/api/nwf.display.TVDisplay-method-load) is executed.
                 * @property {HTMLWindow} [window=null]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return this._window;
                },
                enumerable: true,
                configurable: true
            });
            return TVDisplay;
        })(display.IDisplay);
        display.TVDisplay = TVDisplay;
    })(display = nwf.display || (nwf.display = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var display;
    (function (display) {
        var GamePadDisplay = (function (_super) {
            __extends(GamePadDisplay, _super);
            /**
             * Represents the display on the Wii U GamePad.
             *
             *     // Get instance
             *     var gamepadDisplay = nwf.display.DisplayManager.getInstance().getGamePadDisplay();
             *
             * The `GamePadDisplay` class dispatches the following events:
             *
             * - nwf.events.DisplayEvent.INITIALIZED
             * - nwf.events.DisplayEvent.LOAD
             * - nwf.events.DisplayEvent.READY
             * - nwf.events.DisplayEvent.UNINITIALIZED
             *
             * @class nwf.display.GamePadDisplay
             * @extends nwf.display.IDisplay
             * @author Ryan Lynd
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * @private
             * The `new` method is not used to get an instance of `GamePadDisplay`; use `nwf.display.DisplayManager.getGamePadDisplay` instead.
             * @method constructor
             * @since 1.0
             */
            function GamePadDisplay() {
                _super.call(this);
                this._window = window;
                this._initialized = true;
            }
            Object.defineProperty(GamePadDisplay.prototype, "id", {
                //-------------------------------------------------------------------------
                // Accessors
                //-------------------------------------------------------------------------
                /**
                 * Unique ID of the display. Assigned by the system.
                 * @property {int} [id=1]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GamePadDisplay.prototype, "type", {
                /**
                 * Display Type of the display.
                 * @property {String} [type=nwf.display.DisplayType.GAMEPAD]
                 * @readonly
                 * @since 1.0
                 * @see nwf.display.DisplayType.GAMEPAD
                 * @see nwf.display.DisplayType.TV
                 * @see nwf.display.DisplayType.GENERIC
                 * @see nwf.display.DisplayType.SHARED
                 */
                get: function () {
                    // return '';
                    return nwf.display.DisplayType.GAMEPAD;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GamePadDisplay.prototype, "window", {
                /**
                 * Reference to the top `HTML Window` object associated with this display.
                 * Each display has one top window object. Scripts executing in the context of a display are scoped to this window object and/or its child frames.
                 *
                 * __Note:__ Will return `null` until the display has been loaded. The display will load if it is either set as a Start Page or if [nwf.display.GamePadDisplay.load](#!/api/nwf.display.GamePadDisplay-method-load) is executed.
                 * @property {HTMLWindow} [window=null]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return this._window;
                },
                enumerable: true,
                configurable: true
            });
            return GamePadDisplay;
        })(display.IDisplay);
        display.GamePadDisplay = GamePadDisplay;
    })(display = nwf.display || (nwf.display = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var DisplayEvent = (function (_super) {
            __extends(DisplayEvent, _super);
            /**
             * Defines events dispatched by the `TVDisplay` and `GamePadDisplay` classes.
             *
             * @see {@link nwf.display.TVDisplay}
             * @see {@link nwf.display.GamePadDisplay}
             * @class nwf.events.DisplayEvent
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function DisplayEvent() {
                /**
                 * The 'new' constructor is not used to get instance of the DisplayEvent object.
                 * @method constructor
                 * @param {String} type The name of the event (case-insensitive).
                 * @since 1.0
                 * @private
                 */
                _super.call(this, '');
            }
            Object.defineProperty(DisplayEvent.prototype, "UNINITIALIZED", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when the display is uninitialized by a request to load a new page on the top context of the display.
                 * @property {string} [UNINITIALIZED='uninitialized']
                 * @static @constant
                 * @since 1.0
                 */
                get: function () {
                    return 'uninitialized';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DisplayEvent.prototype, "INITIALIZED", {
                /**
                 * Dispatched when the display is initialized and loading.
                 *
                 * @property {string} [INITIALIZED='initialized']
                 * @static @constant
                 * @since 1.0
                 */
                get: function () {
                    return 'initialized';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DisplayEvent.prototype, "READY", {
                /**
                 * Dispatched when the user can interact with the display even though it is not fully loaded.
                 *
                 * This is similar in function to the [`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/DOM/DOM_event_reference/DOMContentLoaded) Event.
                 *
                 * @property {string} [READY='ready']
                 * @static @constant
                 * @since 1.0
                 */
                get: function () {
                    return 'ready';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DisplayEvent.prototype, "LOAD", {
                /**
                 * Dispatched when the display is completely loaded and all assets are downloaded.
                 *
                 * This is similar in function to the [`load`](https://developer.mozilla.org/en-US/docs/Mozilla_event_reference/load) Event.
                 *
                 * @property {string} [LOAD='load']
                 * @static @constant
                 * @since 1.0
                 */
                get: function () {
                    return 'load';
                },
                enumerable: true,
                configurable: true
            });
            DisplayEvent.UNINITIALIZED = 'uninitialized';
            DisplayEvent.INITIALIZED = 'initialized';
            DisplayEvent.READY = 'ready';
            DisplayEvent.LOAD = 'load';
            return DisplayEvent;
        })(events.Event);
        events.DisplayEvent = DisplayEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var display;
    (function (display) {
        /**
         * AspectRatio constants.
         * @enum nwf.display.AspectRatio
         * @author Ryan Lynd
         */
        display.AspectRatio = {
            /**
             * 4:3 standard display aspect ratio. This is set by the user in the Wii U preference menu.
             * @property {String}
             * @static @constant
             */
            STANDARD_4X3: '4:3',
            /**
             * 16:9 widescreen display aspect ratio. This is set by the user in the Wii U preference menu.
             * @property {String}
             * @static @constant
             */
            WIDE_16X9: '16:9'
        };
    })(display = nwf.display || (nwf.display = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var display;
    (function (display) {
        /**
         * DisplayType constants.
         * @enum nwf.display.DisplayType
         * @author Ryan Lynd
         */
        display.DisplayType = {
            /**
             * Display Type representing the Wii U TV display.
             * @property {String}
             * @static @constant
             * @since 1.0
             */
            TV: 'tv',
            /**
             * Display Type representing the Wii U GamePad display.
             * @property {String}
             * @static @constant
             * @since 1.0
             */
            GAMEPAD: 'gamepad',
            /**
             * Generic Display. Currently unused.
             * @property {String}
             * @static @constant
             * @since 1.0
             */
            GENERIC: 'generic',
            /**
             * Shared Display.
             * @property {String}
             * @static @constant
             * @since 1.3
             */
            SHARED: 'shared'
        };
    })(display = nwf.display || (nwf.display = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var display;
    (function (display) {
        /**
         * ViewportFilter constants.
         * @enum nwf.display.ViewportFilter
         * @author Ryan Lynd
         */
        display.ViewportFilter = {
            /**
             * Point type viewport filtering.
             * @property {String}
             * @static @constant
             * @since 1.3
             */
            POINT: 'point',
            /**
             * Bilinear type viewport filtering.
             * @property {String}
             * @static @constant
             * @since 1.3
             */
            BILINEAR: 'bilinear',
        };
    })(display = nwf.display || (nwf.display = {}));
})(nwf || (nwf = {}));
/// <reference path="./IDisplay.ts" />
/// <reference path="./TVDisplay.ts" />
/// <reference path="./GamePadDisplay.ts" />
/// <reference path="../events/DisplayEvent.ts" />
/// <reference path="./AspectRatio.ts" />
/// <reference path="./DisplayType.ts" />
/// <reference path="./ViewportFilter.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var display;
    (function (display) {
        var DisplayManager = (function () {
            /**
             * Class for providing access to available displays.
             * With the `DisplayManager` singleton you can access and draw content on any attached display using the APIs available on the accessed `Display` class.
             *
             *      // Get instance
             *      var displayManager = nwf.display.DisplayManager.getInstance();
             *
             * @class nwf.display.DisplayManager
             * @author Ryan Lynd
             * @author Shawn Gates
             * @singleton
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * @private
             * The `new` method is not used to get an instance of `DisplayManager`; use `#getInstance` instead.
             * @method constructor
             * @since 1.0
             */
            function DisplayManager() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The background color of the display.
                 * This color appears behind the WebView(s) on the display.
                 * The default value for this property is set in Project Settings on the Display page.
                 *
                 * Acceptable values are:
                 *
                 * - A CSS color string - "blue"
                 * - 3-character hash notation - "#00F"
                 * - 6-character hash notation - "#0000FF"
                 * - Function notation - "rgb(0,0,255)"
                 *
                 * __Note:__ _This will not change the CSS defined background color of the page._
                 *
                 * @see nwf.display.TVDisplay.getContext2D
                 * @see nwf.display.GamePadDisplay.getContext2D
                 * @property {String} [backgroundColor='#000000']
                 * @since 1.6
                 */
                this.backgroundColor = "#000000";
            }
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Returns a reference to the `TVDisplay` or `GamePadDisplay` object based on the Display ID parameter. If nothing is passed in, the `TVDisplay` will be returned.
             *
             *      var manager = nwf.display.DisplayManager.getInstance();
             *
             *      // The Display object associated with this WebView
             *      var displayID = manager.getThisDisplayID();
             *
             *      var display = manager.getDisplayByID(displayID);
             *
             * @see {@link nwf.display.TVDisplay}
             * @see {@link nwf.display.GamePadDisplay}
             * @param {int} [displayID=0] Index of the attached Display.
             * @returns {nwf.display.IDisplay|null} Reference to the <code>TVDisplay</code> or <code>GamePadDisplay</code> object. `null` if display object is not found, usually if index is out of range.
             * @since 1.0
             */
            DisplayManager.prototype.getDisplayByID = function (displayID) {
                return new nwf.display.IDisplay();
            };
            /**
             * Returns a reference to the `TVDisplay` object. Use this method to access and change properties and methods available on the TV display.
             * Use this method to access and change properties and methods available on the TV screen, including the `HTML Window` object associated with this display.
             *
             * __Developer Tip:__ _The recommended practice is to load the TV page in JavaScript and control that context from within the GamePad context. This has resulted in simplified architecture._
             *
             *      var tvDisplay = nwf.display.DisplayManager.getInstance().getTVDisplay();
             *      // Be sure to actually have an HTML file in the same directory; for now, assume this exists
             *      tvDisplay.load( 'tv.html' );
             *      // Alternativly, calling `tvDisplay.load` with an empty string will load a blank HTML page that can then have elements added to it
             *
             *      // Wait for the TV DOM to load
             *      var tvWin = tvDisplay.window;
             *
             *      // It could be that this page is reloading, so for that case (and all others), go through the `loadLoop` below
             *      var oldDoc = tvWin.document;
             *
             *      // Set a tight loop for the load listener as a workaround for a WebKit bug
             *      var loadLoop = setInterval( function() {
             *          // If the new document hasn't launched, then return and keep trying/looping
             *          if (oldDoc === tvWin.document || tvWin.document.readyState === 'uninitialized') return;
             *          if (tvWin.document.readyState === 'loading') {
             *              // Add the listener here, specifically
             *              tvWin.addEventListener( 'DOMContentLoaded', tvOnLoad, false );
             *          } else if (tvWin.document.readyState === 'interactive' || tvWin.document.readyState === 'complete') {
             *              // If this already ran through the listener (these conditions were met) then launch it
             *              tvOnLoad();
             *          }
             *          clearInterval( loadLoop );
             *      }, 16);
             *
             *      var tvOnLoad = function() {
             *          tvWin.removeEventListener( 'DOMContentLoaded', tvOnLoad );
             *
             *          // Now we can be sure the document is ready and safe to use
             *          var tvDoc = tvWin.document;
             *          var newGamePadDiv = tvDoc.createElement( "div" );
             *          newGamePadDiv.innerHTML = "<h1>Hello Wii U!</h1>";
             *          tvDoc.body.appendChild( newTVDiv );
             *      }
             *
             * It is not necessary to use this function to display anything on the the display the code is being executed from. For example, <code>tvDisplay.window.document</code> is the exact same <code>document</code> object as the one developers call in JavaScript by simply typing <code>document</code> on the page loaded to the TV.
             * @see {@link nwf.display.TVDisplay}
             * @returns {nwf.display.TVDisplay} Reference to the <code>TVDisplay</code> object.
             * @since 1.0
             */
            DisplayManager.prototype.getTVDisplay = function () {
                return new nwf.display.TVDisplay();
            };
            /**
             * Returns a reference to the `GamePadDisplay` object.
             * Use this method to access and change properties and methods available on the GamePad screen, including the `HTML Window` object associated with this display.
             *
             * __Developer Tip:__ _The recommended practice is to load the TV page in JavaScript and control that context from within the GamePad context. This has resulted in simplified architecture._
             *
             *      var gpDisplay = nwf.display.DisplayManager.getInstance().getGamePadDisplay();
             *
             *      // Be sure to actually have an HTML file in the same directory; for now, assume this exists
             *      gpDisplay.load( 'gp.html' );
             *      // Alternatively, calling `gpDisplay.load` with an empty string will load a blank HTML page that can then have elements added to it
             *
             *      // Wait for the GamePad DOM to load; it lags behind the TV DOM a bit
             *      var gpWin = gpDisplay.window;
             *
             *      // It could be that this page is reloading, so for that case (and all others), go through the `loadLoop` below
             *      var oldDoc = gpWin.document;
             *
             *      // Set a tight loop for the load listener as a workaround for a WebKit bug
             *      var loadLoop = setInterval( function() {
             *          // If the new document hasn't launched, then return and keep trying/looping
             *          if (oldDoc === `gpWin.document` || gpWin.document.readyState === 'uninitialized') return;
             *          if (gpWin.document.readyState === 'loading') {
             *              // Add the listener here, specifically
             *              gpWin.addEventListener( 'DOMContentLoaded', gpOnLoad, false );
             *          } else if (gpWin.document.readyState === 'interactive' || gpWin.document.readyState === 'complete') {
             *              // If this already ran through the listener (these conditions were met) then launch it
             *              gpOnLoad();
             *          }
             *          clearInterval( loadLoop );
             *      }, 16);
             *
             *      var gpOnLoad = function() {
             *          gpWin.removeEventListener( 'DOMContentLoaded', gpOnLoad );
             *
             *          // Now we can be sure the document is ready and safe to use
             *          var gpDoc = gpWin.document;
             *          var newGamePadDiv = gpDoc.createElement( "div" );
             *          `newGamePadDiv.innerHTML` = "<h1>Hello Wii U!</h1>";
             *          gpDoc.body.appendChild( newGamePadDiv );
             *      };
             *
             * It is not necessary to use this function to display anything on the the display the code is being executed from. For example, `gpDisplay.window.document` is the exact same `document` object as the one developers call in JavaScript by simply typing `document` on the page loaded to the GamePad.
             *
             * @returns {nwf.display.GamePadDisplay} Reference to the `GamePadDisplay` object.
             * @see {@link nwf.display.TVDisplay}
             * @since 1.0
             */
            DisplayManager.prototype.getGamePadDisplay = function () {
                return new nwf.display.GamePadDisplay();
            };
            /**
             * Returns `true` if the display is currently attached, given the ID of the display.
             *
             *      var dm = nwf.display.DisplayManager.getInstance();
             *      var tvDisplay = dm.getTVDisplay();
             *      console.log( "Is the TV display attached? " + dm.isDisplayAttached( tvDisplay.id ) );
             *
             *  Alternatively, it's possible to query the display (TV or GamePad) directly this way:
             *
             *      if (tvDisplay.attached) { ... }
             *
             * @param {int} displayID ID of the display to test.
             * @returns {Boolean} Returns `true` if the display is attached, or `false` if not.
             * @since 1.0
             */
            DisplayManager.prototype.isDisplayAttached = function (displayID) {
                return false;
            };
            /**
             * Returns the ID of the display attached to the executing WebView. Useful for determining the context of your JavaScript code.
             *
             *      var manager = nwf.display.DisplayManager.getInstance();
             *      var displayID = manager.getThisDisplayID();
             *      switch( displayID ){
             *          case 0:
             *             // JavaScript is executing on the TV
             *             break;
             *          case 1:
             *             // JavaScript is executing on the GamePad
             *             break;
             *      }
             *
             *      // The Display object associated with this WebView
             *      var display = manager.getDisplayByID( displayID );
             *
             * @returns {int} Unique ID of the display attached to the executing WebView.
             * @since 1.0
             */
            DisplayManager.prototype.getThisDisplayID = function () {
                return false;
            };
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Accesses an instance of the `DisplayManager` singleton.
             * @method getInstance
             * @returns {nwf.display.DisplayManager} The `DisplayManager` singleton instance.
             * @since 1.0
             * @static
             */
            DisplayManager.getInstance = function () {
                return new nwf.display.DisplayManager();
            };
            /**
             * Tests for class availability.
             * @method isSupported
             * @returns {Boolean} Returns `false` if the class is not supported, or `true` if the class is available.
             * @since 1.0
             * @static
            */
            DisplayManager.isSupported = function () {
                return true;
            };
            return DisplayManager;
        })();
        display.DisplayManager = DisplayManager;
    })(display = nwf.display || (nwf.display = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var ec;
    (function (ec) {
        var Item = (function () {
            /**
             * Class containing the structure of an `Item` from the Nintendo eShop.
             *
             * @class nwf.ec.Item
             * @author Aaron Ward
             * @author Nate Long
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new `nwf.ec.Item` object.
             * @method constructor
             * @since 1.8.1
             * @ignore
             */
            function Item() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The description of the content of the `Item`.
                 * @property {String} [description='']
                 * @readonly
                 * @since 1.8.1
                 */
                this.description = '';
                /**
                 * The title of the content.
                 * @property {String} [name='']
                 * @readonly
                 * @since 1.8.1
                 */
                this.name = '';
                /**
                 * The ID of the content.
                 * This is a string representing a 64-bit value.
                 * Each `Item`, as specified by this `id`, can only be purchased or added to an `nwf.ec.DownloadCart` or `nwf.ec.PurchaseCart` once.
                 * @property {String} [id='']
                 * @readonly
                 * @since 1.8.1
                 */
                this.id = '';
                /**
                 * Indicates download status of the content.
                 * @property {Number} [downloadStatus=nwf.ec.DownloadStatus.NONE]
                 * @see nwf.ec.DownloadStatus
                 * @readonly
                 * @since 1.8.1
                 */
                this.downloadStatus = nwf.ec.DownloadStatus.NONE;
                /**
                 * Indicates sales status of the content.
                 * @property {Number} [salesStatus=nwf.ec.SalesStatus.UNKNOWN]
                 * @see nwf.ec.SalesStatus
                 * @readonly
                 * @since 1.8.1
                 */
                this.salesStatus = nwf.ec.SalesStatus.UNKNOWN;
                /**
                 * Indicates if the content has been purchased by the user.
                 * `Items` that have been purchased may not be purchased again but they can be re-downloaded.
                 * @property {Boolean} [isPurchased=false]
                 * @readonly
                 * @since 1.8.1
                 */
                this.isPurchased = false;
                return new nwf.ec.Item();
            }
            Object.defineProperty(Item.prototype, "icon", {
                /**
                 * The image icon representing the content.
                 * This will return `null` until `#downloadIcon` is called.
                 * @property {HTMLImageElement} [icon=new Image]
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return new Image();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Item.prototype, "promoImages", {
                /**
                 * An `Array` of images previewing the content.
                 * There are up to eight promotional images for each `Item`.
                 * Each slot's image must be downloaded separately using `#downloadPromoImages` to fill out the `Array`.
                 * Any index in the `Array` that has not been downloaded will return `undefined` when accessed.
                 * @property {Array} [promoImages=new Array]
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return new Array();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Item.prototype, "releaseDate", {
                /**
                 * Date the content was released.
                 * @property {Date} [releaseDate=new Date]
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return new Date();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Item.prototype, "price", {
                /**
                 * The price of the content.
                 * This will be `undefined` if `#isPurchased` is set to true.
                 * @property {nwf.ec.Price} price
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return new nwf.ec.Price();
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Downloads the icon for the content.
             * @param {Function} callback Function to call when the download has completed.
             * @param {Object} callback.event An `Event` object containing information about the download process.
             * @param {String} callback.event.type Describes the type and status of download.
             * @param {Number} callback.event.errorCode The status of the operation. This will be set to `0` on a success, `1` if the operation was canceled, or an error code from `nwf.system.SystemErrorCode`.
             * @param {Number} callback.event.timestamp The number of milliseconds (with microsecond precision) at the time of the event since the runtime was initialized.
             * @param {Object} callback.event.target Indicates the `EventTarget` to which the event was originally dispatched.
             * @async
             * @since 1.8.1
             */
            Item.prototype.downloadIcon = function (callback) {
                return null;
            };
            /**
             * Download the indicated promotional image.
             * @param {Function} callback Function to call when the download has completed.
             * @param {Object} callback.event An `Event` object containing information about the download process.
             * @param {String} callback.event.type Describes the type and status of download.
             * @param {Number} callback.event.errorCode The status of the operation. This will be set to `0` on a success, `1` if the operation was canceled, or an error code from `nwf.system.SystemErrorCode`.
             * @param {Number} callback.event.timestamp The number of milliseconds (with microsecond precision) at the time of the event since the runtime was initialized.
             * @param {Object} callback.event.target Indicates the `EventTarget` to which the event was originally dispatched.
             * @param {Number} slot The target promotional image to be downloaded. The valid range for `slot` is between `1` and `8` and will correspond to the `slot-1` index of `#promoImages`.
             * @async
             * @since 1.8.1
             */
            Item.prototype.downloadPromoImages = function (callback, slot) {
                return null;
            };
            return Item;
        })();
        ec.Item = Item;
    })(ec = nwf.ec || (nwf.ec = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var ec;
    (function (ec) {
        var Money = (function () {
            /**
             * Class containing the structure of a `Money` object for use with E-Commerce.
             *
             * @class nwf.ec.Money
             * @author Aaron Ward
             * @author Nate Long
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new `Money` object.
             * @method constructor
             * @since 1.8.1
             * @ignore
             */
            function Money() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The amount of money represented by a formatted string.
                 * @property {String} [amount='##########.##']
                 * @readonly
                 * @since 1.8.1
                 */
                this.amount = '##########.##';
                /**
                 * The currency of the money.
                 * @property {String} [currency='']
                 * @readonly
                 * @since 1.8.1
                 */
                this.currency = '';
                /**
                 * The amount of money.
                 * @property {Number} [value=0]
                 * @readonly
                 * @since 1.8.1
                 */
                this.value = 0;
                /**
                 * Indicates if the object is valid.
                 * @property {Boolean} [isValid=false]
                 * @since 1.8.1
                 */
                this.isValid = false;
                return new nwf.ec.Money();
            }
            return Money;
        })();
        ec.Money = Money;
    })(ec = nwf.ec || (nwf.ec = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var ec;
    (function (ec) {
        var Price = (function () {
            /**
             * Class containing the structure of eShop item prices.
             *
             * @class nwf.ec.Price
             * @author Aaron Ward
             * @author Nate Long
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new Price object.
             * @method constructor
             * @since 1.8.1
             * @ignore
             */
            function Price() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Description of the sale.
                 * @property {String} [discountDescription='']
                 * @readonly
                 * @since 1.8.1
                 */
                this.discountDescription = '';
                return new nwf.ec.Price();
            }
            Object.defineProperty(Price.prototype, "regularPrice", {
                /**
                 * The regular price.
                 * @property {nwf.ec.Money} [regularPrice=new nwf.ec.Money]
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return new nwf.ec.Money();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Price.prototype, "salesPrice", {
                /**
                 * The discounted price.
                 * @property {nwf.ec.Money} [salesPrice=new nwf.ec.Money]
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return new nwf.ec.Money();
                },
                enumerable: true,
                configurable: true
            });
            return Price;
        })();
        ec.Price = Price;
    })(ec = nwf.ec || (nwf.ec = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var ec;
    (function (ec) {
        var ICart = (function () {
            /**
             * `ICarts` are passed into the `nwf.ec.ECommerce.launchCartView` method to launch the `EC Applet` with a set of `{@link nwf.ec.Item Items}` to be downloaded or purchased.
             * The `ICart` class is not used directly; either an `nwf.ec.DownloadCart` or an `nwf.ec.PurchaseCart` is used.
             *
             * @class nwf.ec.ICart
             * @author Aaron Ward
             * @author Nate Long
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * `ICarts` are not created directly.
             * Instead create an `nwf.ec.PurchaseCart` or `nwf.ec.DownloadCart`.
             * @method constructor
             * @private
             * @since 1.8.1
             */
            function ICart() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The number of `{@link nwf.ec.Item Items}` contained in the object.
                 * @property {Number} [count=0]
                 * @readonly
                 * @since 1.8.1
                 */
                this.count = 0;
                return new nwf.ec.ICart();
            }
            Object.defineProperty(ICart.prototype, "total", {
                /**
                 * The total cost of all `{@link nwf.ec.Item Items}` in the cart.
                 * @property {nwf.ec.Money} [total=new nwf.ec.Money]
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return new nwf.ec.Money();
                    //return {};
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ICart.prototype, "isPurchased", {
                /**
                 * Indicates which kind of cart this object is.
                 * If this is `true`, the object is an `nwf.ec.PurchaseCart`.
                 * If `false`, the object is an `nwf.ec.DownloadCart`.
                 * @property {Boolean} [isPurchased]
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Clears the `{@link nwf.ec.Item Items}` previously added.
             * @since 1.8.1
             */
            ICart.prototype.clear = function () {
                return null;
            };
            /**
             * Gets an `{@link nwf.ec.Item Item}`.
             * This will return `undefined` until `{@link nwf.ec.Item Items}` are added with the `#add` method.
             * @param {Number} index The index of the `{@link nwf.ec.Item Item}` in the catalog.
             * @returns {nwf.ec.Item} The requested `{@link nwf.ec.Item Item}`.
             *          This will return `undefined` until `{@link nwf.ec.Item Items}` are added with the `#add` method.
             * @since 1.8.1
             */
            ICart.prototype.get = function (index) {
                return new nwf.ec.Item();
            };
            /**
             * Adds an `{@link nwf.ec.Item Item}`.
             * @param {nwf.ec.Item} item The `{@link nwf.ec.Item Item}` to add.
             * @since 1.8.1
             */
            ICart.prototype.add = function (item) {
                return;
            };
            /**
             * Removes an `{@link nwf.ec.Item Item}`.
             * @param {nwf.ec.Item} item The `{@link nwf.ec.Item Item}` to remove.
             * @since 1.8.1
             */
            ICart.prototype.remove = function (item) {
                return;
            };
            return ICart;
        })();
        ec.ICart = ICart;
    })(ec = nwf.ec || (nwf.ec = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var ec;
    (function (ec) {
        var PurchaseCart = (function (_super) {
            __extends(PurchaseCart, _super);
            /**
             * This class implements the `nwf.ec.ICart` interface class.
             *
             * @class nwf.ec.PurchaseCart
             * @extends nwf.ec.ICart
             * @author Aaron Ward
             * @author Nate Long
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new `nwf.ec.PurchaseCart`.
             * @method constructor
             *
             * @since 1.8.1
             */
            function PurchaseCart() {
                _super.call(this);
                return new nwf.ec.PurchaseCart();
            }
            return PurchaseCart;
        })(ec.ICart);
        ec.PurchaseCart = PurchaseCart;
    })(ec = nwf.ec || (nwf.ec = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var ec;
    (function (ec) {
        var DownloadCart = (function (_super) {
            __extends(DownloadCart, _super);
            /**
             * This class implements the `nwf.ec.ICart` interface class.
             *
             * @class nwf.ec.DownloadCart
             * @extends nwf.ec.ICart
             * @author Aaron Ward
             * @author Nate Long
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new `nwf.ec.DownloadCart`.
             * @method constructor
             *
             * @since 1.8.1
             */
            function DownloadCart() {
                _super.call(this);
                return new nwf.ec.DownloadCart();
            }
            return DownloadCart;
        })(ec.ICart);
        ec.DownloadCart = DownloadCart;
    })(ec = nwf.ec || (nwf.ec = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var ec;
    (function (ec) {
        var ICatalog = (function () {
            /**
             * Catalogs are used to download and retrieve E-Commerce items that are tied to the application.
             * The `ICatalog` class is not used directly; either a `nwf.ec.DownloadCatalog` or `nwf.ec.PurchaseCatalog` is used.
             * The `nwf.ec.ECommerce` methods `{@link nwf.ec.ECommerce#getDownloadCatalog getDownloadCatalog}` and `{@link nwf.ec.ECommerce#getPurchaseCatalog getPurchaseCatalog}` methods are used to get instances of the each respectively.
             *
             * @class nwf.ec.ICatalog
             * @author Aaron Ward
             * @author Nate Long
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new ICatalog object.
             * @method constructor
             * @since 1.8.1
             * @ignore
             */
            function ICatalog() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The number of `{@link nwf.ec.Item Items}` contained in the object.
                 * This will be `0` until `{@link nwf.ec.Item Items}` are retrieved with the `#download` method.
                 * @property {Number} [count=0]
                 * @readonly
                 * @since 1.8.1
                 */
                this.count = 0;
                /**
                 * The total number of `{@link nwf.ec.Item Items}` that exist on the server.
                 * This will be `0` until `{@link nwf.ec.Item Items}` are retrieved with the `#download` method.
                 * @property {Number} [total=0]
                 * @readonly
                 * @since 1.8.1
                 */
                this.total = 0;
                return new nwf.ec.ICatalog();
            }
            Object.defineProperty(ICatalog.prototype, "isPurchased", {
                /**
                 * Indicates which kind of catalog this object is.
                 * If this is `true`, the object is an `nwf.ec.DownloadCatalog`.
                 * If `false`, the object is an `nwf.ec.PurchaseCatalog`.
                 * @property {Boolean} [isPurchased]
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Clears the item data previously downloaded.
             * @since 1.8.1
             */
            ICatalog.prototype.clear = function () {
                return null;
            };
            /**
             * Retrieves a number of items for the catalog that can be purchased.
             * This function calls `#clear` before starting.
             * @param {Number} start The index to start downloading from.
             * @param {Number} count The number of items to attempt downloading.
             * @since 1.8.1
             * @see nwf.ec.ECommerce.RETRIEVE_NUM_MAX
             * @see nwf.events.ECommerceEvent.CATALOG_DOWNLOAD_SUCCESS
             * @see nwf.events.ECommerceEvent.CATALOG_DOWNLOAD_FAILED
             * @async
             */
            ICatalog.prototype.download = function (start, count) {
                return null;
            };
            /**
             * Gets an `{@link nwf.ec.Item Item}` from the catalog.
             * @param {Number} index The index of the `{@link nwf.ec.Item Item}` in the catalog.
             * @returns {nwf.ec.Item} The requested `{@link nwf.ec.Item Item}`.
             *          Will return `undefined` until `{@link nwf.ec.Item Items}` are retrieved with the `#download` method.
             * @since 1.8.1
             */
            ICatalog.prototype.get = function (index) {
                return new nwf.ec.Item();
            };
            return ICatalog;
        })();
        ec.ICatalog = ICatalog;
    })(ec = nwf.ec || (nwf.ec = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var ec;
    (function (ec) {
        var PurchaseCatalog = (function (_super) {
            __extends(PurchaseCatalog, _super);
            /**
             * This class implements the `nwf.ec.ICatalog` interface class.
             *
             * @class nwf.ec.PurchaseCatalog
             * @extends nwf.ec.ICatalog
             * @author Aaron Ward
             * @author Nate Long
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new PurchaseCatalog object.
             * @method constructor
             * @since 1.8.1
             * @ignore
             */
            function PurchaseCatalog() {
                _super.call(this);
                return new nwf.ec.PurchaseCatalog();
            }
            return PurchaseCatalog;
        })(ec.ICatalog);
        ec.PurchaseCatalog = PurchaseCatalog;
    })(ec = nwf.ec || (nwf.ec = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var ec;
    (function (ec) {
        var DownloadCatalog = (function (_super) {
            __extends(DownloadCatalog, _super);
            /**
             * This class implements the `nwf.ec.ICatalog` interface class.
             *
             * @class nwf.ec.DownloadCatalog
             * @extends nwf.ec.ICatalog
             * @author Aaron Ward
             * @author Nate Long
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new DownloadCatalog object.
             * @method constructor
             * @since 1.8.1
             * @ignore
             */
            function DownloadCatalog() {
                _super.call(this);
                return new nwf.ec.DownloadCatalog();
            }
            return DownloadCatalog;
        })(ec.ICatalog);
        ec.DownloadCatalog = DownloadCatalog;
    })(ec = nwf.ec || (nwf.ec = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var ec;
    (function (ec) {
        /**
         * `DownloadStatus` constants for `ECommerce`.
         *
         * @enum nwf.ec.DownloadStatus
         * @author Aaron Ward
         * @author Nate Long
         * @author Shawn Gates
         */
        ec.DownloadStatus = {
            /**
             * There is no download process currently.
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            NONE: 0,
            /**
             * Waiting for the download process to start.
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            WAITING: 1,
            /**
             * Currently downloading.
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            DOWNLOADING: 2,
            /**
             * Download completed.
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            COMPLETED: 3,
            /**
             * Download has failed.
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            FAILED: 4,
        };
    })(ec = nwf.ec || (nwf.ec = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var ec;
    (function (ec) {
        /**
         * `SalesStatus` constants for `ECommerce`.
         *
         * @enum nwf.ec.SalesStatus
         * @author Aaron Ward
         * @author Nate Long
         * @author Shawn Gates
         */
        ec.SalesStatus = {
            /**
             * The sales status is unknown.
             * There is likely an error on the server.
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            UNKNOWN: 0,
            /**
             * The item is not yet for sale.
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            UNRELEASED: 1,
            /**
             * The item is currently available.
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ONSALE: 2,
            /**
             * The item is no longer for sale.
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            SALES_TERMINATION: 3,
            /**
             * The item can no longer be downloaded.
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            DOWNLOAD_TERMINATION: 4,
        };
    })(ec = nwf.ec || (nwf.ec = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var ECommerceEvent = (function (_super) {
            __extends(ECommerceEvent, _super);
            /**
             * Events dispatched by the `ECommerce` class.
             *
             * @class nwf.events.ECommerceEvent
             * @see {@link nwf.ec.ECommerce}
             * @extends nwf.events.Event
             * @author Aaron Ward
             */
            function ECommerceEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(ECommerceEvent.prototype, "balance", {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The `nwf.ec.Money` object returned from the server after a successful login or transaction.
                 * When `nwf.events.ECommerceEvent.GET_BALANCE_SUCCESS` is dispatched, this represents the amount in the user's wallet.
                 * @property {nwf.ec.Money} [balance=new nwf.ec.Money]
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return new nwf.ec.Money();
                    // return {};
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ECommerceEvent.prototype, "errorCode", {
                /**
                 * Error code that is set on a fail event.
                 * Helps tie the failed event to a `{@link nwf.events.SystemErrorEvent}`.
                 *
                 * @property {Number} [errorCode=null]
                 * @readonly
                 * @since 1.8.1
                 * @see nwf.system.SystemErrorCode
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ECommerceEvent.prototype, "LOGIN_SUCCESS", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when a call made to `nwf.ec.ECommerce.login` is successful.
                 * @property {String} [LOGIN_SUCCESS='ecdkLoginSuccess']
                 * @static @constant
                 * @since 1.8.1
                 */
                // public static LOGIN_SUCCESS: string = 'ecdkLoginSuccess';
                get: function () {
                    return 'ecdkLoginSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ECommerceEvent.prototype, "LOGIN_FAILED", {
                /**
                 * Dispatched when a call made to `nwf.ec.ECommerce.login` fails.
                 * @property {String} [LOGIN_FAILED='ecdkLoginFailed']
                 * @static @constant
                 * @since 1.8.1
                 */
                // public static LOGIN_FAILED: string = 'ecdkLoginFailed';
                get: function () {
                    return 'ecdkLoginFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ECommerceEvent.prototype, "LOGOUT_SUCCESS", {
                /**
                 * Dispatched when a call made to `nwf.ec.ECommerce.logout` is successful.
                 * @property {String} [LOGOUT_SUCCESS='ecdkLogoutSuccess']
                 * @static @constant
                 * @since 1.8.1
                 */
                // public static LOGOUT_SUCCESS: string = 'ecdkLogoutSuccess';
                get: function () {
                    return 'ecdkLogoutSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ECommerceEvent.prototype, "LOGOUT_FAILED", {
                /**
                 * Dispatched when a call made to `nwf.ec.ECommerce.logout` fails.
                 * @property {String} [LOGOUT_FAILED='ecdkLogoutFailed']
                 * @static @constant
                 * @since 1.8.1
                 */
                // public static LOGOUT_FAILED: string = 'ecdkLogoutFailed';
                get: function () {
                    return 'ecdkLogoutFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ECommerceEvent.prototype, "GET_BALANCE_SUCCESS", {
                /**
                 * Dispatched when an attempt to update the user's balance is successful.
                 * @property {String} [GET_BALANCE_SUCCESS='ecdkGetBalanceSuccess']
                 * @static @constant
                 * @since 1.8.1
                 */
                // public static GET_BALANCE_SUCCESS: string = 'ecdkGetBalanceSuccess';
                get: function () {
                    return 'ecdkGetBalanceSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ECommerceEvent.prototype, "GET_BALANCE_FAILED", {
                /**
                 * Dispatched when an attempt to update the user's balance fails.
                 * @property {String} [GET_BALANCE_FAILED='ecdkGetBalanceFailed']
                 * @static @constant
                 * @since 1.8.1
                 */
                // public static GET_BALANCE_FAILED: string = 'ecdkGetBalanceFailed';
                get: function () {
                    return 'ecdkGetBalanceFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ECommerceEvent.prototype, "SYNCHRONIZE_RIGHTS_SUCCESS", {
                /**
                 * Dispatched when an attempt to synchronize the user's rights is successful.
                 * @property {String} [SYNCHRONIZE_RIGHTS_SUCCESS='ecdkSyncRightsSuccess']
                 * @static @constant
                 * @since 1.8.1
                 */
                // public static SYNCHRONIZE_RIGHTS_SUCCESS: string = 'ecdkSyncRightsSuccess';
                get: function () {
                    return 'ecdkSyncRightsSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ECommerceEvent.prototype, "SYNCHRONIZE_RIGHTS_FAILED", {
                /**
                 * Dispatched when an attempt to synchronize the user's rights fails.
                 * @property {String} [SYNCHRONIZE_RIGHTS_FAILED='ecdkSyncRightsFailed']
                 * @static @constant
                 * @since 1.8.1
                 */
                // public static SYNCHRONIZE_RIGHTS_FAILED: string = 'ecdkSyncRightsFailed';
                get: function () {
                    return 'ecdkSyncRightsFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ECommerceEvent.prototype, "CATALOG_DOWNLOAD_SUCCESS", {
                /**
                 * Dispatched when an attempt to download a catalog is successful.
                 * @property {String} [CATALOG_DOWNLOAD_SUCCESS='ecdkCatalogDownloadSuccess']
                 * @static @constant
                 * @since 1.8.1
                 */
                // public static CATALOG_DOWNLOAD_SUCCESS: string = 'ecdkCatalogDownloadSuccess';
                get: function () {
                    return 'ecdkCatalogDownloadSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ECommerceEvent.prototype, "CATALOG_DOWNLOAD_FAILED", {
                /**
                 * Dispatched when an attempt to download a catalog fails.
                 * @property {String} [CATALOG_DOWNLOAD_FAILED='ecdkCatalogDownloadFailed']
                 * @static @constant
                 * @since 1.8.1
                 */
                // public static CATALOG_DOWNLOAD_FAILED: string = 'ecdkCatalogDownloadFailed';
                get: function () {
                    return 'ecdkCatalogDownloadFailed';
                },
                enumerable: true,
                configurable: true
            });
            return ECommerceEvent;
        })(events.Event);
        events.ECommerceEvent = ECommerceEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/// <reference path="./Item.ts" />
/// <reference path="./Money.ts" />
/// <reference path="./Price.ts" />
/// <reference path="./ICart.ts" />
/// <reference path="./PurchaseCart.ts" />
/// <reference path="./DownloadCart.ts" />
/// <reference path="./ICatalog.ts" />
/// <reference path="./PurchaseCatalog.ts" />
/// <reference path="./DownloadCatalog.ts" />
/// <reference path="./DownloadStatus.ts" />
/// <reference path="./SalesStatus.ts" />
/// <reference path="../events/ECommerceEvent.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var ec;
    (function (ec) {
        var ECommerce = (function (_super) {
            __extends(ECommerce, _super);
            /**
             * Class for interacting with the EC Applet and eShop Server.
             * The static class can be used to launch the EC Applet, while the singleton is used to communicate with the eShop Server.
             * You must `#login` to the eShop Server before using any other `ECommerce` features.
             *
             * When logging in to the eShop Server and anytime content is purchased or the balance is changed, the system will automatically synchronize the account information with the server.
             * When this process has finished, a `nwf.events.ECommerceEvent.SYNCHRONIZE_RIGHTS_SUCCESS` event and a `nwf.events.ECommerceEvent.GET_BALANCE_SUCCESS` event will be fired.
             * Be sure that these have both finished before attempting to perform any actions that would trigger them again.
             *
             * __Note:__ The E-Commerce feature must be enabled in the Features page and the Network Access setting in Platform Features - Network page of Project Settings must NOT be set to disabled for the feature to work and for `nwf.ec` to be defined.
             *
             * The `ECommerce` class dispatches the following events:
             *
             * - nwf.events.ECommerceEvent.LOGIN_FAILED
             * - nwf.events.ECommerceEvent.LOGIN_SUCCESS
             * - nwf.events.ECommerceEvent.LOGOUT_SUCCESS
             * - nwf.events.ECommerceEvent.LOGOUT_FAILED
             * - nwf.events.ECommerceEvent.GET_BALANCE_SUCCESS
             * - nwf.events.ECommerceEvent.GET_BALANCE_FAILED
             * - nwf.events.ECommerceEvent.SYNCHRONIZE_RIGHTS_SUCCESS
             * - nwf.events.ECommerceEvent.SYNCHRONIZE_RIGHTS_FAILED
             * - nwf.events.ECommerceEvent.CATALOG_DOWNLOAD_SUCCESS
             * - nwf.events.ECommerceEvent.CATALOG_DOWNLOAD_FAILED
             *
             * @class nwf.ec.ECommerce
             * @extends nwf.events.EventDispatcher
             * @singleton
             * @author Aaron Ward
             * @author Nate Long
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * @private
             * The `new` method is not used to get an instance of an `ECommerce` object; use `#getInstance` instead.
             * @method constructor
             * @since 1.8.1
             */
            function ECommerce() {
                _super.call(this);
            }
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Logs into the eShop Server.
             *
             * @since 1.8.1
             * @see nwf.events.ECommerceEvent.LOGIN_SUCCESS
             * @see nwf.events.ECommerceEvent.LOGIN_FAILED
             * @async
             */
            ECommerce.prototype.login = function () {
                return null;
            };
            /**
             * Logs out from the eShop Server.
             *
             * @since 1.8.1
             * @see nwf.events.ECommerceEvent.LOGOUT_SUCCESS
             * @see nwf.events.ECommerceEvent.LOGOUT_FAILED
             * @async
             */
            ECommerce.prototype.logout = function () {
                return null;
            };
            /**
             * Returns the `{@link nwf.ec.DownloadCatalog DownloadCatalog}` associated with this application.
             *
             * @returns {nwf.ec.DownloadCatalog} The `{@link nwf.ec.DownloadCatalog DownloadCatalog}` associated with this title.
             * @since 1.8.1
             */
            ECommerce.prototype.getDownloadCatalog = function () {
                return new nwf.ec.DownloadCatalog();
            };
            /**
             * Returns the `{@link nwf.ec.PurchaseCatalog PurchaseCatalog}` associated with this application.
             *
             * @returns {nwf.ec.PurchaseCatalog} The `{@link nwf.ec.PurchaseCatalog PurchaseCatalog}` associated with this title.
             * @since 1.8.1
             */
            ECommerce.prototype.getPurchaseCatalog = function () {
                return new nwf.ec.PurchaseCatalog();
            };
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Launch the EC Applet to purchase or download the provided `Item`.
             *
             * @static
             * @param {Function} callback Function to call when the user returns from the EC Applet.
             * @param {Object} callback.event An `Event` object containing information about the EC Applet.
             * @param {String} callback.event.type The mode the EC Applet was in when it was closed.
             * @param {Number} callback.event.errorCode The status of the operation.
             *                 This will be set to `0` on a success, `1` if the operation was canceled, or an error code from `nwf.system.SystemErrorCode`.
             * @param {Number} callback.event.timestamp The number of milliseconds (with microsecond precision) at the time of the event since the runtime was initialized.
             * @param {Object} callback.event.target Indicates the `EventTarget` to which the event was originally dispatched.
             * @param {nwf.ec.Item} item The `nwf.ec.Item` to be purchased or downloaded.
             * @async
             * @since 1.8.1
             */
            ECommerce.prototype.launchItemView = function (callback, item) {
                return null;
            };
            /**
             * Launch the EC Applet to purchase or download the provided `ICart`.
             *
             * @static
             * @param {Function} callback Function to call when the user returns from the EC Applet.
             * @param {Object} callback.event An `Event` object containing information about the EC Applet.
             * @param {String} callback.event.type The mode the EC Applet was in when it was closed.
             * @param {Number} callback.event.errorCode The status of the operation.
             *                 This will be set to `0` on a success, `1` if the operation was canceled, or an error code from `nwf.system.SystemErrorCode`.
             * @param {Number} callback.event.timestamp The number of milliseconds (with microsecond precision) at the time of the event since the runtime was initialized.
             * @param {Object} callback.event.target Indicates the `EventTarget` to which the event was originally dispatched.
             * @param {nwf.ec.ICart} cart The `nwf.ec.ICart` to be purchased or downloaded.
             * @async
             * @since 1.8.1
             */
            ECommerce.prototype.launchCartView = function (callback, target) {
                return null;
            };
            /**
             * Launch the EC Applet to use a redemption code.
             *
             * @static
             * @param {Function} callback Function to call when the user returns from the EC Applet.
             * @param {Object} callback.event An `Event` object containing information about the EC Applet.
             * @param {String} callback.event.type The mode the EC Applet was in when it was closed.
             * @param {Number} callback.event.errorCode The status of the operation.
             *                 This will be set to `0` on a success, `1` if the operation was canceled, or an error code from `nwf.system.SystemErrorCode`.
             * @param {Number} callback.event.timestamp The number of milliseconds (with microsecond precision) at the time of the event since the runtime was initialized.
             * @param {Object} callback.event.target Indicates the `EventTarget` to which the event was originally dispatched.
             * @async
             * @since 1.8.1
             */
            ECommerce.prototype.launchRedeem = function (callback) {
                return null;
            };
            /**
             * Launch the EC Applet to manage the user's wallet.
             *
             * @static
             * @param {Function} callback Function to call when the user returns from the EC Applet.
             * @param {Object} callback.event An `Event` object containing information about the EC Applet.
             * @param {String} callback.event.type The mode the EC Applet was in when it was closed.
             * @param {Number} callback.event.errorCode The status of the operation.
             *                 This will be set to `0` on a success, `1` if the operation was canceled, or an error code from `nwf.system.SystemErrorCode`.
             * @param {Number} callback.event.timestamp The number of milliseconds (with microsecond precision) at the time of the event since the runtime was initialized.
             * @param {Object} callback.event.target Indicates the `EventTarget` to which the event was originally dispatched.
             * @async
             * @since 1.8.1
             */
            ECommerce.prototype.launchBalanceManager = function (callback) {
                return null;
            };
            /**
             * Accesses an instance of the `ECommerce` singleton.
             *
             * @method getInstance
             * @returns {nwf.ec.ECommerce} The `ECommerce` singleton instance.
             * @since 1.8.1
             * @static
             */
            ECommerce.getInstance = function () {
                if (!this.s_instance) {
                }
                return this.s_instance;
            };
            Object.defineProperty(ECommerce, "RETRIEVE_NUM_MAX", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The maximum number of items that can be retrieved in one operation.
                 * @property {Number} RETRIEVE_NUM_MAX=100
                 * @static @readonly
                 * @since 1.8.1
                 */
                // public static get RETRIEVE_NUM_MAX: number = 100;
                get: function () {
                    return 100;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // STATIC PRIVATE PROPERTIES
            //-------------------------------------------------------------------------
            /** @ignore */
            ECommerce.s_instance = ECommerce;
            return ECommerce;
        })(nwf.events.EventDispatcher);
        ec.ECommerce = ECommerce;
    })(ec = nwf.ec || (nwf.ec = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var fp;
    (function (fp) {
        /**
         * Class containing the structure of `Presence` data.
         *
         * @class nwf.fp.PresenceData
         * @author Ryan Lynd
         */
        var PresenceData = (function () {
            function PresenceData() {
            }
            Object.defineProperty(PresenceData.prototype, "principalID", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                //---------------------------------
                // Post Details
                //---------------------------------
                /**
                 * Represents a principal ID.
                 * @property {uint32} [principalID=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PresenceData.prototype, "accountID", {
                /**
                 * Represents an account ID.
                 * @property {String} [accountID='']
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PresenceData.prototype, "screenName", {
                /**
                 * The display name.
                 * @property {String} [screenName=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PresenceData.prototype, "area", {
                // Profile
                /**
                 * Area code.
                 * @property {uint8} [area=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PresenceData.prototype, "country", {
                /**
                 * Country code.
                 * @property {uint8} [country=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PresenceData.prototype, "language", {
                // Console info
                /**
                 * The console's language code.
                 * @property {uint8} [language=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PresenceData.prototype, "region", {
                /**
                 * The region code of the console.
                 * @property {uint8} [region=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PresenceData.prototype, "isOnline", {
                // Presence
                /**
                 * Returns `true` when the friend is on-line, or `false` otherwise.
                 * @property {Boolean} [isOnline=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            return PresenceData;
        })();
        fp.PresenceData = PresenceData;
    })(fp = nwf.fp || (nwf.fp = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var FriendPresenceEvent = (function (_super) {
            __extends(FriendPresenceEvent, _super);
            /**
             * Events dispatched by the `FriendPresence` class.
             *
             * @see {@link nwf.fp.FriendPresence}
             * @class nwf.events.FriendPresenceEvent
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function FriendPresenceEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(FriendPresenceEvent.prototype, "friendList", {
                //-------------------------------------------------------------------------
                // Accessors
                //-------------------------------------------------------------------------
                /**
                     * The list of friends' principal IDs returned from the server. Even on failure, it will return an array (an empty one, specifically). Use the principal IDs to fetch Presence Data for each friend with `nwf.fp.FriendPresence.getPresenceData`.
                     * Only set when `#FRIEND_LIST_SUCCESS` is dispatched.
                     * __Note:__ If the user has no friends this will be a zero-length array.
                     * @see {@link nwf.fp.FriendPresence}
                     * @property {Array} [friendList=[]]
                     * @readonly
                     * @since 1.0
                     */
                get: function () {
                    return [];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FriendPresenceEvent.prototype, "presenceData", {
                /**
                 * The presence data of a friend.
                 * Only set when `#PRESENCE_DATA_SUCCESS` is dispatched.
                 * @property {nwf.fp.PresenceData} [presenceData=null]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FriendPresenceEvent.prototype, "FRIEND_LIST_SUCCESS", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when a call made to {@link nwf.fp.FriendPresence#getFriendList getFriendList} of the {@link nwf.fp.FriendPresence FriendPresence} class is successful.
                 * @property {string} [FRIEND_LIST_SUCCESS='friendListSuccess']
                 * @static @constant
                 * @since 1.0
                 */
                // public static FRIEND_LIST_SUCCESS: string = 'friendListSuccess';
                get: function () {
                    return 'friendListSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FriendPresenceEvent.prototype, "FRIEND_LIST_FAIL", {
                /**
                 * Dispatched when a call made to {@link nwf.fp.FriendPresence#getFriendList getFriendList} of the {@link nwf.fp.FriendPresence FriendPresence} class failed.
                 * @property {string} [FRIEND_LIST_FAIL='friendListFail']
                 * @since 1.0
                 * @static @constant
                 */
                // public static FRIEND_LIST_FAIL: string = 'friendListFail';
                get: function () {
                    return 'friendListFail';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FriendPresenceEvent.prototype, "PRESENCE_DATA_SUCCESS", {
                /**
                 * Dispatched when a call made to {@link nwf.fp.FriendPresence#getPresenceData getPresenceData} of the {@link nwf.fp.FriendPresence FriendPresence} class is successful.
                 * @property {string} [PRESENCE_DATA_SUCCESS='presenceDataSuccess']
                 * @static @constant
                 * @since 1.0
                 */
                // public static PRESENCE_DATA_SUCCESS: string = 'presenceDataSuccess';
                get: function () {
                    return 'presenceDataSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FriendPresenceEvent.prototype, "PRESENCE_DATA_FAIL", {
                /**
                 * Dispatched when a call made to {@link nwf.fp.FriendPresence#getPresenceData getPresenceData} of the {@link nwf.fp.FriendPresence FriendPresence} class failed.
                 * @property {string} [PRESENCE_DATA_FAIL='presenceDataFail']
                 * @since 1.0
                 * @static @constant
                 */
                // public static PRESENCE_DATA_FAIL: string = 'presenceDataFail';
                get: function () {
                    return 'presenceDataFail';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FriendPresenceEvent.prototype, "LOGIN_SUCCESS", {
                /**
                 * Dispatched when logged-in to the Friend Presence server. Initiated by {@link nwf.fp.FriendPresence#login login} of the {@link nwf.fp.FriendPresence FriendPresence} class.
                 * @property {string} [LOGIN_SUCCESS='loginSuccess']
                 * @static @constant
                 * @since 1.0
                 */
                // public static LOGIN_SUCCESS: string = 'loginSuccess';
                get: function () {
                    return 'loginSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FriendPresenceEvent.prototype, "LOGIN_FAIL", {
                /**
                 * Dispatched when logging in to the Friend Presence server failed. Initiated by {@link nwf.fp.FriendPresence#login login} of the {@link nwf.fp.FriendPresence FriendPresence} class.
                 * @property {string} [LOGIN_FAIL='loginFail']
                 * @since 1.0
                 * @static @constant
                 */
                // public static LOGIN_FAIL: string = 'loginFail';
                get: function () {
                    return 'loginFail';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FriendPresenceEvent.prototype, "LOGOUT_SUCCESS", {
                /**
                 * Dispatched when logged-out of the Friend Presence server. Initiated by {@link nwf.fp.FriendPresence#logout logout} of the {@link nwf.fp.FriendPresence FriendPresence} class.
                 * @property {string} [LOGOUT_SUCCESS='logoutSuccess']
                 * @static @constant
                 * @since 1.0
                 */
                get: function () {
                    return 'logoutSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FriendPresenceEvent.prototype, "LOGOUT_FAIL", {
                /**
                 * Dispatched when logging out of the Friend Presence server failed. Initiated by {@link nwf.fp.FriendPresence#logout logout} of the {@link nwf.fp.FriendPresence FriendPresence} class.
                 * @property {string} [LOGOUT_FAIL='logoutFail']
                 * @since 1.0
                 * @static @constant
                 */
                get: function () {
                    return 'logoutFail';
                },
                enumerable: true,
                configurable: true
            });
            return FriendPresenceEvent;
        })(events.Event);
        events.FriendPresenceEvent = FriendPresenceEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/// <reference path="./PresenceData.ts" />
/// <reference path="../events/FriendPresenceEvent.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var fp;
    (function (fp) {
        var FriendPresence = (function (_super) {
            __extends(FriendPresence, _super);
            /**
             * Class for interacting with the Nintendo Friend Presence system.
             *
             * Class purpose:
             *
             * - Login/Logout
             * - check friends status
             * - get / set application meta-data
             * - get / update status of user
             *
             * __Note:__ The Friend Presence feature must be enabled in the Features page and the Network Access setting in Platform Features - Network page of Project Settings must NOT be set to disabled for the feature to work and for `nwf.fp` to be defined.
             *
             * Example usage:
             *
             *      var FP = nwf.fp.FriendPresence.getInstance();
             *      FP.addEventListener( nwf.events.FriendPresenceEvent.LOGIN_SUCCESS, onLogin, this );
             *      // See documentation for the login function for a way to handle errors
             *      FP.login();
             *
             *      function onLogin( evt ) {
             *          FP.removeEventListener( nwf.events.FriendPresenceEvent.LOGIN_SUCCESS, onLogin, this );
             *
             *          FP.addEventListener( nwf.events.FriendPresenceEvent.FRIEND_LIST_SUCCESS, onList, this );
             *          // See documentation for the getFriendList function for a way to handle errors
             *          FP.getFriendList();
             *      }
             *
             *      function onList( evt ) {
             *          FP.removeEventListener( nwf.events.FriendPresenceEvent.FRIEND_LIST_SUCCESS, onList, this );
             *
             *          var fl = evt.friendList;
             *          console.log( 'Friend List: ' + fl.toString() );
             *      }
             *
             * The `FriendPresence` class dispatches the following events:
             *
             * - nwf.events.FriendPresenceEvent.FRIEND_LIST_FAIL
             * - nwf.events.FriendPresenceEvent.FRIEND_LIST_SUCCESS
             * - nwf.events.FriendPresenceEvent.LOGIN_FAIL
             * - nwf.events.FriendPresenceEvent.LOGIN_SUCCESS
             * - nwf.events.FriendPresenceEvent.LOGOUT_FAIL
             * - nwf.events.FriendPresenceEvent.LOGOUT_SUCCESS
             * - nwf.events.FriendPresenceEvent.PRESENCE_DATA_SUCCESS
             *
             * @class nwf.fp.FriendPresence
             * @extends nwf.events.EventDispatcher
             * @author Ryan Lynd
             * @author Shawn Gates
             * @singleton
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * @private
             * The `new` method is not used to get an instance of `FriendPresence`; use `#getInstance` instead.
             * @method constructor
             * @since 1.0
             */
            function FriendPresence() {
                _super.call(this);
            }
            Object.defineProperty(FriendPresence.prototype, "loggedIn", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * Returns `true` if the local application is logged in, or `false` if it is not.
                 * @property {Boolean} [loggedIn=true]
                 * @since 1.0
                 * @readonly
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FriendPresence.prototype, "myPresenceData", {
                /**
                 * The Presence Data for the local host.
                 * @property {nwf.fp.PresenceData} [myPresenceData=nwf.fp.PresenceData]
                 * @since 1.0
                 * @readonly
                 */
                get: function () {
                    return new nwf.fp.PresenceData();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(FriendPresence.prototype, "hideMyPresence", {
                /**
                 * Indicates whether on-line status will be published. When set to `true`, the local host's presence information will not be delivered to friends. When set to `false`, the information will be delivered.
                 * @property {Boolean} [hideMyPresence=false]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return false; // nn::fp::Preference::isPresencePublication
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
              * Logs in to the friend server. Call this before attempting to retrieve data from the server. It is highly recommended to stay logged in for the time that the application is open. Be sure to call `#logout()` before the application exits.
              *
              *  Example usage of a safe event chain:
              *
              *      var FP = nwf.fp.FriendPresence.getInstance();
              *
              *      FP.addEventListener( nwf.events.FriendPresenceEvent.LOGIN_SUCCESS, onLogin, this );
              *      FP.addEventListener( nwf.events.FriendPresenceEvent.LOGIN_FAIL, onLogin, this );
              *
              *      console.log( "Attempting to log in to the Friend Presence server..." );
              *      try {
              *          FP.login();
              *      } catch(err) {
              *          console.error( "login did not succeed! Are you connected to the Internet? Received instead: " + err.message );
              *      }
              *
              *      function onLogin( evt ) {
              *          FP.removeEventListener( nwf.events.FriendPresenceEvent.LOGIN_SUCCESS, onLogin, this );
              *          FP.removeEventListener( nwf.events.FriendPresenceEvent.LOGIN_FAIL, onLogin, this );
              *
              *          if (evt.type === nwf.events.FriendPresenceEvent.LOGIN_SUCCESS) {
              *              // Once logged in a friend list can be received
              *              FP.getFriendList();
              *      } else {
              *              console.warn( 'Attempt to log in to the Friend Presence server failed.' );
              *          }
              *      }
              *
              * @see {@link nwf.events.FriendPresenceEvent}
              * @returns {Boolean} Returns `true` if call is successful, and `false` otherwise.
              * @since 1.0
              */
            FriendPresence.prototype.login = function () {
                return 0;
            };
            /**
             * Logs out from the friend server. This function will be called automatically when the application exits, but is available to call manually if necessary. Should only be called once per use session in order to prevent overloading the server.
             *
             * @see {@link nwf.events.FriendPresenceEvent}
             * @returns {Boolean} Returns `true` if call is successful, and `false` otherwise.
             * @since 1.0
             */
            FriendPresence.prototype.logout = function () {
                return 0;
            };
            /**
             * Gets the friend list from the active network account on the Wii U. This fires off the event chain for acquiring the actual {@link nwf.events.FriendPresenceEvent#friendList Friend List} array, and informs the developer of any immediate (synchronous) failures.
             * Example usage of a safe event chain:
             *
             *      var FP = nwf.fp.FriendPresence.getInstance();
             *      [...] // Go through the login process
             *      FP.addEventListener( nwf.events.FriendPresenceEvent.FRIEND_LIST_SUCCESS, onList, this );
             *      FP.addEventListener( nwf.events.FriendPresenceEvent.FRIEND_LIST_FAIL, onList, this );
             *
             *      console.log( "Attempting to get friend list..." );
             *      try {
             *          FP.getFriendList();
             *      } catch(err) {
             *          console.error( "getFriendList did not succeed! Did you log in first? Received instead: " + err.message );
             *      }
             *
             *      function onList( evt ) {
             *          FP.removeEventListener( nwf.events.FriendPresenceEvent.FRIEND_LIST_SUCCESS, onList );
             *          FP.removeEventListener( nwf.events.FriendPresenceEvent.FRIEND_LIST_FAIL, onList );
             *
             *          if (evt.type === nwf.events.FriendPresenceEvent.FRIEND_LIST_SUCCESS) {
             *              var fl = evt.friendList;
             *              console.log( 'Friend List: ' + fl.toString() );
             *          } else {
             *              console.warn( 'Attempt to get the friend list failed.' );
             *          }
             *      }
             *
             * @see {@link nwf.events.FriendPresenceEvent#friendList}
             * @param {uint32} [offset=0] Index of the first item to obtain.
             * @param {uint32} [size=0] Number of elements to get from the friend list, starting from the `startIndex` offset. The default value (0) will get the items from offset index (first parameter) to end of list.
             * @returns {Boolean} Returns `true` if call is successful, or `false` otherwise.
             * @since 1.0
             */
            FriendPresence.prototype.getFriendList = function (offset, size) {
                return 0;
            };
            /**
             * Gets the PresenceData of a friend by the principalID.
             * If there is no friend corresponding to the principalID passed in as a parameter, an empty `nwf.fp.PresenceData` object is returned with the event.
             *
             * __Note:__ _You can not retrieve "your" own presence data with the prinipalID of the current account. Use #myPresenceData instead._
             * @see {@link nwf.events.FriendPresenceEvent#PRESENCE_DATA_SUCCESS}
             * @param {uint32} principalID Principal ID of friend to get Presence Data.
             * @returns {Boolean} Returns `true` if call is successful, or `false` otherwise.
             * @since 1.0
             */
            FriendPresence.prototype.getPresenceData = function (principalID) {
                return 0;
            };
            /**
             * Accesses an instance of the `FriendPresence` singleton.
             *
             * @method getInstance
             * @returns {nwf.fp.FriendPresence} The `FriendPresence` singleton instance.
             * @since 1.0
             * @static
             */
            FriendPresence.getInstance = function () {
                if (!this.s_instance) {
                    this.s_instance = new FriendPresence();
                    this.s_instance.constructor = null;
                }
                return this.s_instance;
            };
            /**
             * Method to test for class availability.
             *
             * @method isSupported
             * @returns {Boolean} Returns `false` if the class is not supported, or `true` if the class is available.
             * @since 1.0
             * @static
             */
            FriendPresence.isSupported = function () {
                return false;
            };
            return FriendPresence;
        })(nwf.events.EventDispatcher);
        fp.FriendPresence = FriendPresence;
    })(fp = nwf.fp || (nwf.fp = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var GyroscopeControlEvent = (function (_super) {
            __extends(GyroscopeControlEvent, _super);
            /**
             * Defines events dispatched by instances of the `GyroscopeControl` Class.
             *
             * @see {@link nwf.input.control.GyroscopeControl}
             * @class nwf.events.GyroscopeControlEvent
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function GyroscopeControlEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(GyroscopeControlEvent.prototype, "rotationRateX", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * Angular velocity around the x axis, measured in radians/second.
                 * Range: -2&pi; - 2&pi;.
                 * @property {Number}[rotationRateX=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GyroscopeControlEvent.prototype, "rotationRateY", {
                /**
                 * Angular velocity around the y axis, measured in radians/second.
                 * Range: -2&pi; - 2&pi;.
                 * @property {Number} [rotationRateY=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GyroscopeControlEvent.prototype, "rotationRateZ", {
                /**
                 * Angular velocity around the z axis, measured in radians/second.
                 * Range: -2&pi; - 2&pi;.
                 * @property {Number}[rotationRateZ=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GyroscopeControlEvent.prototype, "angleX", {
                /**
                 * Calculated angle of the device on the x axis. Measured in radians.
                 * A complete rotation returns a value of 2&pi; ( or -2&pi; in the other direction).
                 * Additional rotation adds to this value, with each full rotation equaling a multiple of 2&pi;.
                 * @property {Number}[angleX=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GyroscopeControlEvent.prototype, "angleY", {
                /**
                 * Calculated angle of the device on the y axis. Measured in radians.
                 * A complete rotation returns a value of 2&pi; ( or -2&pi; in the other direction).
                 * Additional rotation adds to this value, with each full rotation equaling a multiple of 2&pi;.
                 * @property {Number}[angleY=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GyroscopeControlEvent.prototype, "angleZ", {
                /**
                 * Calculated angle of the device on the z axis. Measured in radians.
                 * A complete rotation returns a value of 2&pi; ( or -2&pi; in the other direction).
                 * Additional rotation adds to this value, with each full rotation equaling a multiple of 2&pi;.
                 * @property {Number}[angleZ=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GyroscopeControlEvent.prototype, "UPDATE", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched continuously at the rate of 60Hz.
                 * @property {String} [UPDATE='update']
                 * @static @constant
                 */
                get: function () {
                    return 'update';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GyroscopeControlEvent.prototype, "CALIBRATION_SUCCESS", {
                // public static UPDATE: string = 'update';
                /**
                 * Dispatched when the sensor has been successfully calibrated.
                 * @property {String}  [CALIBRATION_SUCCESS='calibrationSuccess']
                 * @since 1.0
                 * @static @constant
                 */
                get: function () {
                    return 'calibrationSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GyroscopeControlEvent.prototype, "CALIBRATION_FAIL", {
                // public static CALIBRATION_SUCCESS: string = 'calibrationSuccess';
                /**
                 * Dispatched when a calibration attempt is aborted, fails, or times out.
                 * @property {String}  [CALIBRATION_FAIL='calibrationFail']
                 * @since 1.0
                 * @static @constant
                 */
                get: function () {
                    return 'calibrationFail';
                },
                enumerable: true,
                configurable: true
            });
            return GyroscopeControlEvent;
        })(events.Event);
        events.GyroscopeControlEvent = GyroscopeControlEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var MovementControlEvent = (function (_super) {
            __extends(MovementControlEvent, _super);
            /**
             * Defines events dispatched by instances of the `MovementControl` Class.
             *
             * @see {@link nwf.input.control.MovementControl}
             * @class nwf.events.MovementControlEvent
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function MovementControlEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(MovementControlEvent.prototype, "angle", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * Angle of the vector from the center of the control to the X and Y position in radians.
                 * @property {Number} [angle=0]
                 * @type Number
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MovementControlEvent.prototype, "movementX", {
                /**
                 * Movement along the x plane.
                 * From -1.0 to 1.0 along a screen coordinate system.
                 * @property {Number} [movementX=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MovementControlEvent.prototype, "movementY", {
                /**
                 * Movement along the y plane.
                 * From -1.0 to 1.0 along a screen coordinate system.
                 * @property {Number} [movementY=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MovementControlEvent.prototype, "screenX", {
                /**
                 * Movement of control mapped to the screen's x plane.
                 * Value measured in pixels.
                 * @property {Number} [screenX=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MovementControlEvent.prototype, "screenY", {
                /**
                 * Movement of control mapped to the screen's y plane.
                 * Value measured in pixels.
                 * @property {Number} [screenY=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MovementControlEvent.prototype, "invertedY", {
                /**
                 * If set to `true`, the y values are inverted for this control. If set to `false`, they are not.
                 * @property {Boolean} [invertedY=true]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MovementControlEvent.prototype, "MOVE", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when the values of the control are changed by the user. Acts similar to the DOM [`onmousemove`](https://developer.mozilla.org/en-US/docs/Web/API/element.onmousemove) event.
                 * @property {String} [MOVE='move']
                 * @since 1.0
                 * @static @constant
                 */
                // public static MOVE: string = 'move';
                get: function () {
                    return 'move';
                },
                enumerable: true,
                configurable: true
            });
            return MovementControlEvent;
        })(events.Event);
        events.MovementControlEvent = MovementControlEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var AccelerometerControlEvent = (function (_super) {
            __extends(AccelerometerControlEvent, _super);
            /**
             * Defines events dispatched by instances of the `AccelerometerControl` Class.
             *
             * @class nwf.events.AccelerometerControlEvent
             * @see {@link nwf.input.control.AccelerometerControl}
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function AccelerometerControlEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(AccelerometerControlEvent.prototype, "accelerationX", {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Acceleration along the x axis, measured in Gs.
                 * @property {Number} [accelerationX=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AccelerometerControlEvent.prototype, "accelerationY", {
                /**
                 * Acceleration along the y axis, measured in Gs.
                 * @property {Number} [accelerationY=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AccelerometerControlEvent.prototype, "accelerationZ", {
                /**
                 * Acceleration along the z axis, measured in Gs.
                 * @property {Number} [accelerationZ=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AccelerometerControlEvent.prototype, "accelerationLength", {
                /**
                 * Magnitude of acceleration (length of x, y, and z).
                 * @property {Number} [accelerationLength=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AccelerometerControlEvent.prototype, "accelerationSpeed", {
                /**
                 * Change in acceleration (length of the difference along the x , y , and z axes relative to the previous values).
                 * @property {Number} [accelerationSpeed=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(AccelerometerControlEvent.prototype, "UPDATE", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched continuously at the rate of 60Hz.
                 * @property {string} [UPDATE='update']
                 * @since 1.0
                 * @static @constant
                 */
                // public static UPDATE: string = 'update';
                get: function () {
                    return 'update';
                },
                enumerable: true,
                configurable: true
            });
            return AccelerometerControlEvent;
        })(events.Event);
        events.AccelerometerControlEvent = AccelerometerControlEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var TouchControlEvent = (function (_super) {
            __extends(TouchControlEvent, _super);
            /**
             * Defines events dispatched by instances of the `{@link nwf.input.control.TouchControl}` Class.
             *
             * @see {@link nwf.input.control.TouchControl}
             * @class nwf.events.TouchControlEvent
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function TouchControlEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(TouchControlEvent.prototype, "touchX", {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Raw x coordinate of the touch screen. The possible values are 0 - 4095.
                 * @property [touchX=0]
                 * @type Number
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TouchControlEvent.prototype, "touchY", {
                /**
                 * Raw y coordinate of the touch screen. The possible values are 0 - 4095.
                 * @property [touchY=0]
                 * @type Number
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TouchControlEvent.prototype, "screenX", {
                /**
                 * Touch point of control mapped to the screen's x plane.
                 * Value measured in pixels.
                 * @property [screenX=0]
                 * @type Number
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TouchControlEvent.prototype, "screenY", {
                /**
                 * Touch point of control mapped to the screen's y plane.
                 * Value measured in pixels.
                 * @property [screenY=0]
                 * @type Number
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TouchControlEvent.prototype, "invertedY", {
                /**
                 * If set to `true`, the y values are inverted for this control. If set to `false`, they are not.
                 *
                 * @property [invertedY=true]
                 * @type Boolean
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TouchControlEvent.prototype, "UPDATE", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched continuously at the rate of 60Hz while the screen is being touched.
                 * @property {String} [UPDATE='update']
                 * @since 1.0
                 * @static @constant
                 */
                // public static UPDATE: string = 'update';
                get: function () {
                    return 'update';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TouchControlEvent.prototype, "TOUCH_START", {
                /**
                 * Dispatched when the touch screen is first touched.
                 * @property {String} [TOUCH_START='touchStart']
                 * @since 1.2
                 * @static @constant
                 */
                // public static TOUCH_START: string = 'touchStart';
                get: function () {
                    return 'touchStart';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TouchControlEvent.prototype, "TOUCH_END", {
                /**
                 * Dispatched when the touch screen is no longer being touched.
                 * @property {String} [TOUCH_END='touchEnd']
                 * @since 1.2
                 * @static @constant
                 */
                // public static TOUCH_END: string  = 'touchEnd';
                get: function () {
                    return 'touchEnd';
                },
                enumerable: true,
                configurable: true
            });
            return TouchControlEvent;
        })(events.Event);
        events.TouchControlEvent = TouchControlEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var WeightControlEvent = (function (_super) {
            __extends(WeightControlEvent, _super);
            /**
             * Defines events dispatched by instances of the `WeightControl` Class.
             *
             * @see {@link nwf.input.control.WeightControl}
             * @class nwf.events.WeightControlEvent
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function WeightControlEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(WeightControlEvent.prototype, "maxWeight", {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The maximum measurable load on the sensor in kg.
                 * @property {Number} [maxWeight=0]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WeightControlEvent.prototype, "weight", {
                /**
                 * The measured load on the sensor calculated in kg.
                 * @property {Number} [weight=0]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WeightControlEvent.prototype, "avgWeight", {
                /**
                 * Average value calculated continuously over approximately 2 seconds' worth of samples in kg. The value will be updated on each event with new weight data.
                 * @property {Number} [avgWeight=0]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WeightControlEvent.prototype, "weightDelta", {
                // Delta between previous events measurement.
                /**
                 * The difference in the measured load on the sensor from the previously measured value. Calculated in kg.
                 * @see  nwf.events.WeightControlEvent.weight
                 * @property {Number} [weightDelta=0]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WeightControlEvent.prototype, "avgWeightDelta", {
                /**
                 * The difference in the average measured load on the sensor from the previously measured average value. Calculated in kg.
                 * @see  nwf.events.WeightControlEvent.avgWeight
                 * @property {Number} [avgWeightDelta=0]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WeightControlEvent.prototype, "WEIGHT_CHANGE", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when the weight values change as a result of measured changes on the {@link nwf.input.control.WeightControl WeightControl} sensor.
                 * @property {String} [WEIGHT_CHANGE='weightChange']
                 * @static @constant
                 * @since  1.2
                 */
                // public static WEIGHT_CHANGE: string = 'weightChange';
                get: function () {
                    return 'weightChange';
                },
                enumerable: true,
                configurable: true
            });
            return WeightControlEvent;
        })(events.Event);
        events.WeightControlEvent = WeightControlEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var DirectionControlEvent = (function (_super) {
            __extends(DirectionControlEvent, _super);
            /**
             * Defines events dispatched by instances of the `DirectionControl` Class.
             *
             * @class nwf.events.DirectionControlEvent
             * @see {@link nwf.input.control.DirectionControl}
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function DirectionControlEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(DirectionControlEvent.prototype, "directionX", {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Direction along the x plane. Values can be -1, 0, or 1.
                 * @property {Number} [directionX=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DirectionControlEvent.prototype, "directionY", {
                /**
                 * Direction along the y plane. Values can be -1, 0, or 1.
                 * @property {Number} [directionY=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DirectionControlEvent.prototype, "invertedY", {
                /**
                 * If set to `true`, the y values are inverted for this control. If set to `false`, they are not.
                 * @property {Boolean} [invertedY=true]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DirectionControlEvent.prototype, "DIRECTION_CHANGE", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when the direction values change as a result of user input on the +Control Pad.
                 * @property {string} [DIRECTION_CHANGE='directionChange']
                 * @since 1.0
                 * @static @constant
                 */
                // public static DIRECTION_CHANGE: string = 'directionChange';
                get: function () {
                    return 'directionChange';
                },
                enumerable: true,
                configurable: true
            });
            return DirectionControlEvent;
        })(events.Event);
        events.DirectionControlEvent = DirectionControlEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var DPDControlEvent = (function (_super) {
            __extends(DPDControlEvent, _super);
            /**
             * Defines events dispatched by instances of the `DPDControl` Class.
             *
             * @see {@link nwf.input.control.DPDControl}
             * @class nwf.events.DPDControlEvent
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function DPDControlEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(DPDControlEvent.prototype, "pointerX", {
                //-------------------------------------------------------------------------
                // Accessors
                //-------------------------------------------------------------------------
                /**
                 * Pointer movement along the x plane.
                 * From -1.0 to 1.0 along a screen coordinate system.
                 * @property {Number} [pointerX=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DPDControlEvent.prototype, "pointerY", {
                /**
                 * Pointer movement along the y plane.
                 * From -1.0 to 1.0 along a screen coordinate system.
                 * @property {Number} [pointerY=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DPDControlEvent.prototype, "screenX", {
                /**
                 * Pointer movement of control mapped to the screen's x plane.
                 * Value measured in pixels.
                 * @property {Number} [screenX=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DPDControlEvent.prototype, "screenY", {
                /**
                 * Pointer movement of control mapped to the screen's y plane.
                 * Value measured in pixels.
                 * @property {Number} [screenY=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DPDControlEvent.prototype, "invertedY", {
                /**
                 * If set to `true`, the y values are inverted for this control. If set to `false`, they are not.
                 * @property {Boolean} [invertedY=true]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DPDControlEvent.prototype, "distance", {
                /**
                 * Distance between the Sensor Bar, set on the TV, and the Wii Remote.
                 * Measured in meters.
                 * @property {Number} [distance=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DPDControlEvent.prototype, "UPDATE", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched continuously at the rate of 60Hz while the DPD is pointed at the screen.
                 * @property {string} [UPDATE='update']
                 * @since 1.0
                 * @static @constant
                 */
                // public static UPDATE: string = 'update';
                get: function () {
                    return 'update';
                },
                enumerable: true,
                configurable: true
            });
            return DPDControlEvent;
        })(events.Event);
        events.DPDControlEvent = DPDControlEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var ButtonControlEvent = (function (_super) {
            __extends(ButtonControlEvent, _super);
            /**
             * Defines events dispatched by instances of the `ButtonControl` Class.
             *
             * @class nwf.events.ButtonControlEvent
             * @see {@link nwf.input.control.ButtonControl}
             * @extends nwf.events.Event
             * @author Ryan Lynd
             */
            function ButtonControlEvent(type) {
                /**
                 * The 'new' method is not used to get an NWF event object.
                 * @private
                 * @method constructor
                 * @param {String} type The name of the event (case-insensitive).
                 * @since 1.0
                 */
                _super.call(this, type);
                this._button = 0;
            }
            Object.defineProperty(ButtonControlEvent.prototype, "button", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * Value of the pressed or released button.
                 * @property [button=0]
                 * @type uint16
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return this._button;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ButtonControlEvent.prototype, "PRESS", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Triggered when a button is pressed.
                 * @property {String} [PRESS='press']
                 * @static @constant
                 */
                get: function () {
                    return 'press';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ButtonControlEvent.prototype, "RELEASE", {
                /**
                 * Triggered when a button is released.
                 * @property {String} [RELEASE='release']
                 * @static @constant
                 */
                get: function () {
                    return 'release';
                },
                enumerable: true,
                configurable: true
            });
            ButtonControlEvent.PRESS = 'press';
            ButtonControlEvent.RELEASE = 'release';
            return ButtonControlEvent;
        })(events.Event);
        events.ButtonControlEvent = ButtonControlEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var ControllerEvent = (function (_super) {
            __extends(ControllerEvent, _super);
            /**
             * Defines events dispatched by all Controller Class instances.
             *
             * @class nwf.events.ControllerEvent
             * @see {@link nwf.input.WiiUGamePad}
             * @see {@link nwf.input.WiiRemote}
             * @see {@link nwf.input.WiiUProController}
             * @see {@link nwf.input.WiiBalanceBoard}
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function ControllerEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(ControllerEvent.prototype, "name", {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Controller name.
                 *
                 * __Note:__ _This is only set when nwf.events.ControllerEvent.EXTENSION_CONTROLLER_ADDED or nwf.events.ControllerEvent.EXTENSION_CONTROLLER_REMOVED is fired._
                 * @property {String} [name='']
                 * @readonly
                 * @since 1.3
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ControllerEvent.prototype, "CONTROLLER_CONNECTED", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when a controller is connected to the Wii U.
                 *
                 * @property {String} [CONTROLLER_CONNECTED='controllerConnected']
                 * @since 1.0
                 * @static @constant
                 */
                // public static CONTROLLER_CONNECTED: string = 'controllerConnected';
                get: function () {
                    return 'controllerConnected';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ControllerEvent.prototype, "CONTROLLER_DISCONNECTED", {
                /**
                 * Dispatched when a controller is disconnected from the Wii U.
                 *
                 * @property {String} [CONTROLLER_DISCONNECTED='controllerDisconnected']
                 * @since 1.0
                 * @static @constant
                 */
                // public static CONTROLLER_DISCONNECTED: string = 'controllerDisconnected';
                get: function () {
                    return 'controllerDisconnected';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ControllerEvent.prototype, "BATTERY_LEVEL_CHANGE", {
                /**
                 * Dispatched when the battery level of the target controller changes.
                 *
                 * @property {String} [BATTERY_LEVEL_CHANGE='batteryLevelChange']
                 * @since 1.0
                 * @see {@link nwf.input.BatteryLevel}
                 * @static @constant
                 */
                // public static BATTERY_LEVEL_CHANGE: string = 'batteryLevelChange';
                get: function () {
                    return 'batteryLevelChange';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ControllerEvent.prototype, "EXTENSION_CONTROLLER_ADDED", {
                /**
                 * Dispatched when an extension controller is connected to a Wii Remote.
                 *
                 * @property {String} [EXTENSION_CONTROLLER_ADDED='extensionControllerAdded']
                 * @since 1.0
                 * @static @constant
                 */
                // public static EXTENSION_CONTROLLER_ADDED: string = 'extensionControllerAdded';
                get: function () {
                    return 'extensionControllerAdded';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ControllerEvent.prototype, "EXTENSION_CONTROLLER_REMOVED", {
                /**
                 * Dispatched when an extension controller is disconnected from a Wii Remote.
                 *
                 * @property {String} [EXTENSION_CONTROLLER_REMOVED='extensionControllerRemoved']
                 * @since 1.0
                 * @static @constant
                 */
                // public static EXTENSION_CONTROLLER_REMOVED: string = 'extensionControllerRemoved';
                get: function () {
                    return 'extensionControllerRemoved';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ControllerEvent.prototype, "MPLS_ADDED", {
                /**
                 * Dispatched when the Wii Motion Plus adapter is attached to the Wii Remote.
                 *
                 * To receive this event the mode on the Wii Remote must be set to `MODE_FULL`.
                 *
                 * When an extension controller (Nunchuk, Classic Controller, etc) is added to the Wii Remote with the Motion Plus attached, this event will be fired again because the Motion Plus must be reset so the extension data can pass through.
                 *
                 * __Note:__ _If the same type of extension controller (e.g., Nunchuk) is removed and added multiple times this event will only fire the first time it is plugged in._
                 *
                 * The Wii Remote Plus will fire this at the same time as the connected event because the Motion Plus is already integrated.
                 * @property {String} [MPLS_ADDED='mplsAdded']
                 * @since 1.0
                 * @static @constant
                 */
                // public static MPLS_ADDED: string = 'mplsAdded';
                get: function () {
                    return 'mplsAdded';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ControllerEvent.prototype, "MPLS_REMOVED", {
                /**
                 * Dispatched when the Wii Motion Plus adapter is removed from the Wii Remote.
                 *
                 * To receive this event the mode on the Wii Remote must be set to `MODE_FULL`.
                 *
                 * When an extension contoller (Nunchuk, Classic Controller, etc.) is added to the Wii Remote with the Motion Plus attached, this event will be fired again because the Motion Plus must be reset so the extension data can pass through.
                 *
                 * __Note:__ _If the same type of extension controller (e.g., Nunchuk) is removed and added multiple times this event will only fire the first time it is plugged in._
                 *
                 * This event will fire when a regular Wii Remote connects without a Wii Motion Plus adapter plugged in.
                 * @property {String} [MPLS_REMOVED='mplsRemoved']
                 * @since 1.0
                 * @static @constant
                 */
                // public static MPLS_REMOVED: string = 'mplsRemoved';
                get: function () {
                    return 'mplsRemoved';
                },
                enumerable: true,
                configurable: true
            });
            return ControllerEvent;
        })(events.Event);
        events.ControllerEvent = ControllerEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        /**
         * Defines constants for Controller Battery Level.
         *
         * @enum nwf.input.BatteryLevel
         * @author Ryan Lynd
         * @author Shawn Gates
         */
        input.BatteryLevel = {
            /**
         * Battery level is critical.
         * @property {int} [=0]
         * @static @constant
         * @since 1.0
         */
            CRITICAL: 0,
            /**
             * Battery level is low.
             * @property {int} [=1]
             * @static @constant
             * @since 1.0
             */
            LOW: 1,
            /**
             * Battery level is medium.
             * @property {int} [=2]
             * @static @constant
             * @since 1.0
             */
            MEDIUM: 2,
            /**
             * Battery level is high.
             * @property {int} [=3]
             * @static @constant
             * @since 1.0
             */
            HIGH: 3,
            /**
             * Battery level is maximum.
             * @property {int} [=4]
             * @static @constant
             * @since 1.0
             */
            MAX: 4,
            /**
             * Controller does not have a battery.
             * @property {int} [=-1]
             * @static @constant
             * @since 1.0
             */
            NO_BATTERY: -1
        };
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        /**
         * Defines constants for Controller button values.
         *
         * @enum nwf.input.ControllerButton
         * @author Ryan Lynd
         * @author Shawn Gates
         */
        input.ControllerButton = {
            //-----------------------------
            //  WiiU Display Remote (GAMEPAD) Button Values
            //-----------------------------
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_LEFT: 0x0800,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_RIGHT: 0x0400,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_UP: 0x0200,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_DOWN: 0x0100,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_A: 0x8000,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_B: 0x4000,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_X: 0x2000,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_Y: 0x1000,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_R: 0x0010,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_L: 0x0020,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_ZR: 0x0040,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_ZL: 0x0080,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_R_STICK: 0x00020000,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_L_STICK: 0x00040000,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_PLUS: 0x0008,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_MINUS: 0x0004,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            GAMEPAD_POWER: 0x0002,
            //-----------------------------
            //  Wii Remote Button Values
            //-----------------------------
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            WII_REMOTE_LEFT: 0x0001,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            WII_REMOTE_RIGHT: 0x0002,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            WII_REMOTE_DOWN: 0x0004,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            WII_REMOTE_UP: 0x0008,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            WII_REMOTE_A: 0x0800,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            WII_REMOTE_B: 0x0400,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            WII_REMOTE_1: 0x0200,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            WII_REMOTE_2: 0x0100,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            WII_REMOTE_PLUS: 0x0010,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            WII_REMOTE_MINUS: 0x1000,
            //-----------------------------
            //  Nunchuk Button Values
            //-----------------------------
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            NUNCHUK_Z: 0x2000,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            NUNCHUK_C: 0x4000,
            //-----------------------------
            //  Classic Controller Button Values
            //-----------------------------
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_UP: 0x0001,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_LEFT: 0x0002,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_ZR: 0x0004,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_X: 0x0008,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_A: 0x0010,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_Y: 0x0020,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_B: 0x0040,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_ZL: 0x0080,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_RESERVED: 0x0100,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_R: 0x0200,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_PLUS: 0x0400,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_MINUS: 0x1000,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_L: 0x2000,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_DOWN: 0x4000,
            /** @type uint32
             * @static @constant
             * @since 1.0 */
            CLASSIC_RIGHT: 0x8000,
            //-----------------------------
            //  Wii U Pro Controller Button Values
            //-----------------------------
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_UP: 0x0001,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_LEFT: 0x0002,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_ZR: 0x0004,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_X: 0x0008,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_A: 0x0010,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_Y: 0x0020,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_B: 0x0040,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_ZL: 0x0080,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_R: 0x0200,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_PLUS: 0x0400,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_MINUS: 0x1000,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_L: 0x2000,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_DOWN: 0x4000,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_RIGHT: 0x8000,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_R_STICK: 0x00010000,
            /** @type uint32
             * @static @constant
             * @since 1.4 */
            PRO_L_STICK: 0x00020000
        };
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        /**
         * Defines constants for input controller types.
         *
         * @enum nwf.input.ControllerType
         * @author Ryan Lynd
         * @author Shawn Gates
         */
        input.ControllerType = {
            //-----------------------------
            //  WiiU Display Remote (GAMEPAD) Button Values
            //-----------------------------
            /**
             * Wii U GamePad.
             * @see {@link nwf.input.WiiUGamePad}
             * @property {uint16}
             * @static @constant
             * @since 1.1
             */
            GAMEPAD: 0x0001,
            /**
             * Wii Remote.
             * @see {@link nwf.input.WiiRemote}
             * @property {uint16}
             * @static @constant
             * @since 1.1
             */
            WII_REMOTE: 0x0002,
            /**
             * Classic Controller.
             * @see {@link nwf.input.ClassicController}
             * @property {uint16}
             * @static @constant
             * @since 1.1
             */
            CLASSIC: 0x0004,
            /**
             * Nunchuk.
             * @see {@link nwf.input.Nunchuk}
             * @property {uint16}
             * @static @constant
             * @since 1.1
             */
            NUNCHUK: 0x0008,
            /**
             * Wii Balance Board.
             * @see {@link nwf.input.WiiBalanceBoard}
             * @property {uint16}
             * @static @constant
             * @since 1.2
             */
            BALANCE_BOARD: 0x0010,
            /**
             * Wii U Pro Controller.
             * @see {@link nwf.input.WiiUProController}
             * @property {uint16}
             * @static @constant
             * @since 1.4
             */
            WIIU_PRO: 0x0020,
            /**
             * Unknown.
             * @property {uint16}
             * @static @constant
             * @since 1.1
             */
            UNKNOWN: 0x0000 // Error - should not occur.
        };
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        /**
         * Defines constants for input control types.
         *
         * @enum nwf.input.InputControlType
         * @author Ryan Lynd
         * @author Shawn Gates
         */
        input.InputControlType = {
            //-----------------------------
            //  WiiU Display Remote (GAMEPAD) Button Values
            //-----------------------------
            /**
             * Represents an accelerometer control.
             * The acceleration values are in standard g-force units: (9.8m/sec/sec).
             * These values are relative and are not bounded.
             * @see {@link nwf.input.control.AccelerometerControl}
             * @property {String}
             * @static @constant
             * @since 1.0
             */
            ACCELERATION: 'acceleration',
            /**
             * Represents a button control. Buttons are either up or pressed.
             * See {@link nwf.input.ControllerButton} for values.
             * @see {@link nwf.input.control.ButtonControl}
             * @property {String}
             * @static @constant
             * @since 1.0
             */
            BUTTON: 'button',
            /**
             * Represents a control that specifies a bounded X/Y 2D direction, such as the +Control Pad. Values can be -1, 0, or 1.
             * @see {@link nwf.input.control.DirectionControl}
             * @property {String}
             * @static @constant
             * @since 1.0
             */
            DIRECTION: 'direction',
            /**
             * Represents a control that is useful for rotation.
             * All values are in radians/second and measure the rate of rotation round the device's local X, Y, and Z axes. The coordinate system is the same as the one used for the acceleration sensor.
             * Rotation is positive in the counterclockwise direction.
             * @see {@link nwf.input.control.GyroscopeControl}
             * @property {String}
             * @static @constant
             * @since 1.0
             */
            GYROSCOPE: 'gyroscope',
            /**
             * Represents a control that is useful for motion, such as an analog stick.
             * Values are relative to an XY plane along a screen coordinate system.
             * Values can range from -1.0 to 1.0 for each plane.
             * @see {@link nwf.input.control.MovementControl}
             * @property {String}
             * @static @constant
             * @since 1.0
             */
            MOVEMENT: 'movement',
            /**
             * Represents a control that is useful for on-screen navigation, such as the DPD (Direct Pointing Device) of the Wii Remote. This control  extends the functionality of the Movement control as it applies specifically to the Nintendo DPD found on the Wii Remote.
             * @see {@link nwf.input.control.DPDControl}
             * @property {String}
             * @static @constant
             * @since 1.0
             */
            DPD: 'dpd',
            /**
             * Represents a control used for single values.
             * The float values for each are normalized from -1.0 to 1.0.
             *
             * <p class="note">Note: No supported Wii U controller has this input type.</p>
             * @property {String}
             * @static @constant
             * @since 1.0
             */
            TRIGGER: 'trigger',
            /**
             * Represents a control used for touch pad data, such as the screen on the GamePad.
             * @see {@link nwf.input.control.TouchControl}
             * @property {String}
             * @static @constant
             * @since 1.0
             */
            TOUCH: 'touch',
            /**
             * Represents a control used for measuring a load.
             * @see nwf.input.control.WeightControl
             * @property {String} [='weight']
             * @static @constant
             * @since 1.2
             */
            WEIGHT: 'weight',
        };
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
///<reference path='../../events/EventDispatcher.ts'/>
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var control;
        (function (control) {
            var ButtonControl = (function (_super) {
                __extends(ButtonControl, _super);
                /**
                 * The `ButtonControl` class represents the buttons of a compatible controller.
                 *
                 *     // Get instance from GamePad Controller
                 *     var gpButtons = nwf.input.WiiUGamePad.getController().buttons;
                 *     gpButtons.addEventListener( nwf.events.ButtonControlEvent.PRESS, onGamePadPress, this );
                 *
                 * The `ButtonControl` class dispatches the following events:
                 *
                 *  - nwf.events.ButtonControlEvent.PRESS
                 *  - nwf.events.ButtonControlEvent.RELEASE
                 *
                 * @class nwf.input.control.ButtonControl
                 * @extends nwf.events.EventDispatcher
                 * @author Ryan Lynd
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // CONSTRUCTOR
                //-------------------------------------------------------------------------
                /**
                 * @private
                 * The `new` method is not used to get an instance of a `ButtonControl` object.
                 * @method constructor
                 * @since 1.0
                 */
                function ButtonControl() {
                    _super.call(this);
                    this._keys = {};
                    this._buttonToKeyMap = {};
                    this._keyToButtonMap = {};
                    this._supportedControllers = {
                        GAMEPAD: 'GAMEPAD',
                        WII_REMOTE: 'WII_REMOTE'
                    };
                    this._buttonDownEvent = new nwf.events.ButtonControlEvent(nwf.events.ButtonControlEvent.PRESS);
                    this._buttonUpEvent = new nwf.events.ButtonControlEvent(nwf.events.ButtonControlEvent.RELEASE);
                    this._eventsAdded = false;
                    var dm = nwf.display.DisplayManager.getInstance();
                    this._addInputListeners(dm.getGamePadDisplay());
                    this._addInputListeners(dm.getTVDisplay());
                    for (var ctrller in this._supportedControllers) {
                        this._buttonToKeyMap[ctrller] = {};
                        this._keyToButtonMap[ctrller] = {};
                    }
                    this._buildButtonMap();
                }
                Object.defineProperty(ButtonControl.prototype, "controller", {
                    //-------------------------------------------------------------------------
                    // ACCESSORS
                    //-------------------------------------------------------------------------
                    // IInputControl
                    /**
                     * Returns the controller object that contains this control.
                     * @property {nwf.input.IController} [controller={}]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return {};
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ButtonControl.prototype, "muted", {
                    /**
                     * When set to `true`, control values and events are disabled by the system. When set to `false`, control values and events are not disabled.
                     * When muted values return as 0.
                     *
                     * The system sets this to `true` in the following cases:
                     *
                     *  - The parent controller is disconnected or `enabled` = `false`.
                     *  - The parent controller is in a mode that doesn't support this controller.
                     *  - The user has not given permission to use this type of control or parent controller.
                     *
                     * @property {Boolean} [muted=true]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ButtonControl.prototype, "type", {
                    /**
                     * Returns the type of control.
                     * @property {String} [type=null]
                     * @readonly
                     * @since 1.0
                     * @see nwf.input.InputControlType
                     */
                    get: function () {
                        return nwf.input.InputControlType.BUTTON;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ButtonControl.prototype, "buttonValue", {
                    // ButtonControl
                    /**
                     * The bitwise OR value of all pressed buttons. This allows the developer to check for button combinations in one query:
                     *
                     *      var gpButtons = nwf.input.WiiUGamePad.getController().buttons;
                     *
                     *      function update() {
                     *          var btnConst = nwf.input.ControllerButton;
                     *          if ((gpButtons.buttonValue & btnConst.GAMEPAD_L) !== 0) console.log( 'Left shoulder button is being pressed' );
                     *
                     *          if ((gpButtons.buttonValue & (btnConst.GAMEPAD_L | btnConst.GAMEPAD_R)) !== 0) console.log( 'A shoulder button is being pressed' );
                     *
                     *          if ((gpButtons.buttonValue & (btnConst.GAMEPAD_L + btnConst.GAMEPAD_R)) === btnConst.GAMEPAD_L + btnConst.GAMEPAD_R) console.log( 'Both shoulder buttons are being pressed' );
                     *
                     *          webkitRequestAnimationFrame( update );
                     *      }
                     *      webkitRequestAnimationFrame( update );
                     *
                     * @property {uint32} [buttonValue=0]
                     * @readonly
                     * @since 1.0
                     * @see nwf.input.ControllerButton
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                //-------------------------------------------------------------------------
                // PUBLIC METHODS
                //-------------------------------------------------------------------------
                // ButtonControl
                /**
                 * Determines whether the specified button (or button combo) is being pressed. This is useful for polling on a per-frame basis, as opposed to the event listener approach.
                 *
                 *      function update() {
                 *          if (gp.connected) { // gp would be an instance of nwf.input.WiiUGamePad
                 *              if (gp.buttons.isButtonPressed(nwf.input.ControllerButton.GAMEPAD_X)) {
                 *                  console.info( 'GAMEPAD_X is pressed!' );
                 *              }
                 *          }
                 *      }
                 *
                 * @param {int}     button The button code as defined in `{@link nwf.input.ControllerButton}`.
                 * @param {Boolean} [strict=false] If `true`, returns `true` if only the defined button is pressed.
                 * If `false`, returns `true` if the defined button is pressed with any other combination of buttons.
                 * @returns {Boolean} Returns `true` if button is down, or `false` if it is not.
                 * @since 1.0
                 */
                ButtonControl.prototype.isButtonPressed = function (button, strict) {
                    return false;
                };
                ButtonControl.prototype.getButtonState = function (controllerID, btn) {
                    // convert NWF button value to keyboard value
                    var k = this._buttonToKeyMap[controllerID][btn.toString()];
                    return this._keys[k];
                };
                ButtonControl.prototype.onKeyDown = function (evt) {
                    var code = evt.keyCode;
                    // if (this._keys[code]) {
                    //     // it's already down, don't repeat
                    //     return;
                    // }
                    var controllerType = 'GAMEPAD';
                    var btn = this._keyToButtonMap[controllerType][code.toString()];
                    if (!this.eventCheck(evt, btn))
                        return;
                    var controller = nwf.input.WiiUGamePad.getController();
                    this._keys[code] = true;
                    this._buttonDownEvent._button = btn;
                    this._buttonDownEvent._target = controller.buttons;
                    controller.buttons.dispatchEvent(this._buttonDownEvent);
                };
                ButtonControl.prototype.onKeyUp = function (evt) {
                    var code = evt.keyCode;
                    var controllerType = 'GAMEPAD';
                    var btn = this._keyToButtonMap[controllerType][code.toString()];
                    if (!this.eventCheck(evt, btn))
                        return;
                    var controller = nwf.input.WiiUGamePad.getController();
                    this._keys[code] = false;
                    this._buttonUpEvent._button = btn;
                    this._buttonUpEvent._target = controller.buttons;
                    controller.buttons.dispatchEvent(this._buttonUpEvent);
                };
                ButtonControl.prototype.eventCheck = function (evt, btn) {
                    if (!btn) {
                        // only dispatch for buttons that exist in the map
                        return false;
                    }
                    var code = evt.keyCode;
                    if (code === 16 || code === 17 || code === 18) {
                        // don't ever block ctrl, shift, or alt; otherwise user can't use ctrl-r, alt-tab, etc
                        return false;
                    }
                    // if (bamfaux.system.WiiUSystem.__fsm !== 'normal') {
                    //     // do not dispatch events if we're not in a normal state (eg OSK is open)
                    //     return false;
                    // }
                    var controllerType = 'GAMEPAD';
                    // console.log('current controller: '+controllerType);
                    // console.log(evt.type);
                    // console.log(controller.buttons);
                    // absorb keyboard events during normal operation
                    evt.preventDefault();
                    return true;
                };
                ButtonControl.prototype._addInputListeners = function (display) {
                    var _this = this;
                    if (display._hasInputEvents)
                        return;
                    display._hasInputEvents = true;
                    if (display._initialized) {
                        this.resetListeners(display);
                    }
                    else {
                        display.addEventListener(nwf.events.DisplayEvent.LOAD, function (evt) { return _this.resetListeners(display); });
                    }
                };
                ButtonControl.prototype.resetListeners = function (display) {
                    var _this = this;
                    var doc = display.window.document;
                    doc.addEventListener('keydown', function (evt) { return _this.onKeyDown(evt); }, false);
                    doc.addEventListener('keyup', function (evt) { return _this.onKeyUp(evt); }, false);
                };
                // private updateSettings(newSettings:any):void {
                //     if (newSettings.controller && InputManager.currentController !== newSettings.controller) {
                //         // console.log('[InputManager.updateSettings] Old controller: '+InputManager.currentController);
                //         InputManager.currentController = newSettings.controller;
                //         InputManager.currentChannel = newSettings.channel;
                //         var controller = nwf.input.WiiUGamePad.getController();
                //         // console.log('[InputManager.updateSettings] New controller: '+newSettings.controller);
                //         // console.log(bamfaux_instances[InputManager.currentController]);
                //         // console.log(controller);
                //         controller._activate();
                //     }
                //     // todo: also dispatch events when channel is changed
                // }
                ButtonControl.prototype._buildButtonMap = function () {
                    var Btns = nwf.input.ControllerButton, keymap = this._buttonToKeyMap, btnmap = this._keyToButtonMap;
                    var i, b, v, container, strArr, ctrlType, ctrlBtn;
                    for (b in Btns) {
                        strArr = b.split('_');
                        ctrlType = strArr[0];
                        ctrlBtn = strArr[strArr.length - 1];
                        if (ctrlBtn === 'STICK')
                            ctrlBtn = strArr[1] + '_STICK';
                        if (ctrlType === 'WII')
                            ctrlType = WR; // catch to match nwf constants
                        if (!keymap[ctrlType])
                            continue; // ignore unsupported controllers
                        v = Btns[b];
                        keymap[ctrlType][v.toString()] = 0; // 0 will be keyCode assigned to mock the controller button
                    }
                    // defaults
                    // only supports the GamePad for the moment
                    // cheat sheet: http://www.webonweboff.com/tips/js/event_key_codes.aspx
                    var GP = 'GAMEPAD';
                    var WR = 'WII_REMOTE';
                    this.setButton(GP, 90, Btns.GAMEPAD_A); // z
                    this.setButton(GP, 88, Btns.GAMEPAD_B); // x
                    this.setButton(GP, 65, Btns.GAMEPAD_X); // a
                    this.setButton(GP, 83, Btns.GAMEPAD_Y); // s
                    this.setButton(GP, 38, Btns.GAMEPAD_UP); // arrow up
                    this.setButton(GP, 40, Btns.GAMEPAD_DOWN); // arrow down
                    this.setButton(GP, 37, Btns.GAMEPAD_LEFT); // arrow left
                    this.setButton(GP, 39, Btns.GAMEPAD_RIGHT); // arrow right
                    this.setButton(GP, 13, Btns.GAMEPAD_PLUS); // enter
                    this.setButton(GP, 27, Btns.GAMEPAD_MINUS); // Esc
                    // this.setButton(GP, 78, Btns.GAMEPAD_L_STICK); // n
                    // this.setButton(GP, 77, Btns.GAMEPAD_R_STICK); // m
                    this.setButton(GP, 67, Btns.GAMEPAD_L); // c
                    this.setButton(GP, 86, Btns.GAMEPAD_R); // v
                    // this.setButton(GP, 89, Btns.GAMEPAD_ZL); // y
                    // this.setButton(GP, 85, Btns.GAMEPAD_ZR); // u
                    // this.setButton(WR, 65, Btns.WII_REMOTE_A); // a
                    // this.setButton(WR, 66, Btns.WII_REMOTE_B); // b
                    // this.setButton(WR, 38, Btns.WII_REMOTE_UP); // arrow up
                    // this.setButton(WR, 40, Btns.WII_REMOTE_DOWN); // arrow down
                    // this.setButton(WR, 37, Btns.WII_REMOTE_LEFT); // arrow left
                    // this.setButton(WR, 39, Btns.WII_REMOTE_RIGHT); // arrow right
                    // this.setButton(WR, 187, Btns.WII_REMOTE_PLUS); // =+
                    // this.setButton(WR, 189, Btns.WII_REMOTE_MINUS); // -_
                    // this.setButton(WR, 49, Btns.WII_REMOTE_A); // 1
                    // this.setButton(WR, 50, Btns.WII_REMOTE_B); // 2
                };
                ButtonControl.prototype.setButton = function (controller, keyCode, button) {
                    this._buttonToKeyMap[controller][button.toString()] = keyCode;
                    this._keyToButtonMap[controller][keyCode.toString()] = button;
                };
                return ButtonControl;
            })(nwf.events.EventDispatcher);
            control.ButtonControl = ButtonControl;
        })(control = input.control || (input.control = {}));
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var control;
        (function (control) {
            var AccelerometerControl = (function (_super) {
                __extends(AccelerometerControl, _super);
                /**
                 * The `AccelerometerControl` class represents the accelerometer sensor of a compatible controller.
                 *
                 * The coordinate system is backwards to what most developers are probably used to. In contrast to the WPAD library, when the Wii Remote is pointed toward the TV screen, the forward direction is Z+, upward direction is Y+, and leftward direction is X+.
                 *
                 *     // Get instance from GamePad Controller
                 *     var gpACC = nwf.input.WiiUGamePad.getController().accelerometer;
                 *
                 * The values returned from `AccelerometerControl` have been processed by the system to return a smoother range than the hardware returns directly.
                 *
                 * The `AccelerometerControl` class dispatches the following event:
                 *
                 * - nwf.events.AccelerometerControlEvent.UPDATE
                 *
                 * @class nwf.input.control.AccelerometerControl
                 * @extends nwf.events.EventDispatcher
                 * @author Ryan Lynd
                 */
                //-------------------------------------------------------------------------
                // CONSTRUCTOR
                //-------------------------------------------------------------------------
                /**
                 * @private
                 * The `new` method is not used to get an instance of an `AccelerometerControl` object.
                 * @method constructor
                 * @since 1.0
                 */
                function AccelerometerControl() {
                    _super.call(this);
                }
                Object.defineProperty(AccelerometerControl.prototype, "controller", {
                    //-------------------------------------------------------------------------
                    // ACCESSORS
                    //-------------------------------------------------------------------------
                    // IInputControl
                    /**
                     * Returns the controller object that contains this control.
                     * @property {nwf.input.IController} [controller={}]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return {};
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AccelerometerControl.prototype, "muted", {
                    /**
                     * When set to `true`, control values and events are disabled by the system. When set to `false`, control values and events are not disabled.
                     * When muted values return as 0.
                     *
                     * The system sets this to `true` in the following cases:
                     *
                     *  - The parent controller is disconnected or `enabled` = `false`.
                     *  - The parent controller is in a mode that doesn't support this controller.
                     *  - The user has not given permission to use this type of control or parent controller.
                     *
                     * @property {Boolean} [muted=true]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AccelerometerControl.prototype, "type", {
                    /**
                     * Returns the type of control.
                     * @property {String} [type=null]
                     * @readonly
                     * @since 1.0
                     * @see nwf.input.InputControlType
                     */
                    get: function () {
                        // return nwf.input.InputControlType.ACCELEROMETER;
                        return '';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AccelerometerControl.prototype, "accelerationX", {
                    // AccelerometerControl
                    /**
                     * Acceleration along the x axis, measured in Gs.
                     * @property {Number} [accelerationX=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AccelerometerControl.prototype, "accelerationY", {
                    /**
                     * Acceleration along the y axis, measured in Gs.
                     * @property {Number} [accelerationY=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AccelerometerControl.prototype, "accelerationZ", {
                    /**
                     * Acceleration along the z axis, measured in Gs.
                     * @property {Number} [accelerationZ=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AccelerometerControl.prototype, "accelerationLength", {
                    /**
                     * Magnitude of acceleration (length of x, y, and z).
                     * @property [accelerationLength=0]
                     * @type Number
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AccelerometerControl.prototype, "accelerationSpeed", {
                    /**
                     * Change in acceleration (length of the difference along the x, y, and z axes relative to the previous values).
                     * @property [accelerationSpeed=0]
                     * @type Number
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                return AccelerometerControl;
            })(nwf.events.EventDispatcher);
            control.AccelerometerControl = AccelerometerControl;
        })(control = input.control || (input.control = {}));
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var control;
        (function (control) {
            var DirectionControl = (function (_super) {
                __extends(DirectionControl, _super);
                /**
                 * The `DirectionControl` class represents the +Control Pad of a compatible controller.
                 *
                 *      // Get instance from GamePad Controller
                 *      var gpControlPad = nwf.input.WiiUGamePad.getController().controlPad;
                 *
                 * The `DirectionControl` class dispatches the following event:
                 *
                 * - nwf.events.DirectionControlEvent.DIRECTION_CHANGE
                 *
                 * @class nwf.input.control.DirectionControl
                 * @extends nwf.events.EventDispatcher
                 * @author Ryan Lynd
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // CONSTRUCTOR
                //-------------------------------------------------------------------------
                /**
                 * @private
                 * The `new` method is not used to get an instance of a `DirectionControl` object.
                 * @method constructor
                 * @since 1.0
                 */
                function DirectionControl() {
                    _super.call(this);
                }
                Object.defineProperty(DirectionControl.prototype, "controller", {
                    //-------------------------------------------------------------------------
                    // ACCESSORS
                    //-------------------------------------------------------------------------
                    // IInputControl
                    /**
                     * Returns the controller object that contains this control.
                     * @property {nwf.input.IController} [controller={}]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return {};
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DirectionControl.prototype, "muted", {
                    /**
                     * When set to `true`, control values and events are disabled by the system. When set to `false`, control values and events are not disabled.
                     * When muted values return as 0.
                     *
                     * The system sets this to `true` in the following cases:
                     *
                     *  - The parent controller is disconnected or `enabled` = `false`.
                     *  - The parent controller is in a mode that doesn't support this controller.
                     *  - The user has not given permission to use this type of control or parent controller.
                     *
                     * @property {Boolean} [muted=true]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DirectionControl.prototype, "type", {
                    /**
                     * Returns the type of control.
                     * @property {String} [type=null]
                     * @readonly
                     * @since 1.0
                     * @see nwf.input.InputControlType
                     */
                    get: function () {
                        return nwf.input.InputControlType.DIRECTION;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DirectionControl.prototype, "directionX", {
                    // DirectionControl
                    /**
                     * Direction along the x plane.
                     * Values can be -1, 0, or 1.
                     * `Left  = -1`
                     * `Rest  =  0`
                     * `Right =  1`
                     * @property {int} [directionX=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DirectionControl.prototype, "directionY", {
                    /**
                     * Direction along the y plane.
                     * Values can be -1, 0, or 1.
                     * `Up   = -1`
                     * `Rest =  0`
                     * `Down =  1`
                     * @property {int} [directionY=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DirectionControl.prototype, "invertedY", {
                    /**
                     * Gets/sets whether the y values are inverted for this control.
                     *
                     * `false`: The y values decrease with the downward direction of the control.
                     * This is consistent with the Cartesian coordinate system.
                     *
                     * `true`: The y values increase with the downward direction of the control.
                     * This is consistent with the Screen coordinate system.
                     *
                     * @property {Boolean} [invertedY=true]
                     * @since 1.0
                     */
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                return DirectionControl;
            })(nwf.events.EventDispatcher);
            control.DirectionControl = DirectionControl;
        })(control = input.control || (input.control = {}));
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var control;
        (function (control) {
            var DPDControl = (function (_super) {
                __extends(DPDControl, _super);
                /**
                 * The `DPDControl` class represents the DPD (pointer) of a compatible controller such as the Wii Remote.
                 *
                 * To use this control, a controller instance must have the `{@link nwf.input.WiiRemote#mode mode}` property set to `{@link nwf.input.WiiRemote#MODE_DPD MODE_DPD}` or `{@link nwf.input.WiiRemote#MODE_FULL MODE_FULL}`, or the `{@link nwf.input.WiiRemote#mouseEnabled mouseEnabled}` property set to `true`.
                 *
                 * `{@link nwf.input.WiiRemote#mouseEnabled mouseEnabled}` will automatically be set to `true` if the `Wii Remote Pointer as Mouse` feature is selected in Project Settings ->Platform Features -> Input.
                 *
                 *      // Get instance from Wii Remote Player 1
                 *      var remoteCursor = nwf.input.WiiRemote.getController(0).cursor;
                 *
                 * The values returned from `DPDControl` have been processed by the system to return a smoother range than the hardware returns directly.
                 *
                 * The `DPDControl` class dispatches the following event:
                 *
                 * - nwf.events.DPDControlEvent.UPDATE
                 *
                 * @class nwf.input.control.DPDControl
                 * @extends nwf.events.EventDispatcher
                 * @author Ryan Lynd
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // CONSTRUCTOR
                //-------------------------------------------------------------------------
                /**
                * @private
                * The `new` method is not used to get an instance of a `DPDControl` object.
                * @method constructor
                * @since 1.0
                */
                function DPDControl() {
                    _super.call(this);
                }
                Object.defineProperty(DPDControl.prototype, "controller", {
                    //-------------------------------------------------------------------------
                    // ACCESSORS
                    //-------------------------------------------------------------------------
                    // InputControl
                    /**
                     * Returns the controller object that contains this control.
                     * @property {nwf.input.IController} [controller={}]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return {};
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "muted", {
                    /**
                     * When set to `true`, control values and events are disabled by the system. When set to `false`, control values and events are not disabled.
                     * When muted values return as 0.
                     *
                     * The system sets this to `true` in the following cases:
                     *
                     *  - The parent controller is disconnected or `enabled` = `false`.
                     *  - The parent controller is in a mode that doesn't support this controller.
                     *  - The user has not given permission to use this type of control or parent controller.
                     *
                     * @property {Boolean} [muted=true]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "type", {
                    /**
                     * Returns the type of control.
                     * @property {String} [type=null]
                     * @readonly
                     * @since 1.0
                     * @see nwf.input.InputControlType
                     */
                    get: function () {
                        return nwf.input.InputControlType.DPD;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "pointerX", {
                    // DPDControl
                    /**
                     * Pointer movement along the x plane.
                     * From `-1.0` to `1.0` along a screen coordinate system.
                     * Returns values outside of this range when pointing off-screen.
                     * @property {Number} [pointerX=0.0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0.0;
                    } // KPADStatus.pos.x
                    ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "pointerY", {
                    /**
                     * Pointer movement along the y plane.
                     * From `-1.0` to `1.0` along a screen coordinate system.
                     * Returns values outside of this range when pointing off-screen.
                     * @property {Number} [pointerY=0.0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0.0;
                    } // KPADStatus.pos.y
                    ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "screenX", {
                    /**
                     * Pointer movement of control mapped to the screen's x plane.
                     * @property {Number} [screenX=0.0]
                     * Value measured in pixels.
                     * @type Number
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0.0;
                    } // Return 0.0 * stageWidth;
                    ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "screenY", {
                    /**
                     * Pointer movement of control mapped to the screen's y plane.
                     * @property {Number} [screenY=0.0]
                     * Value measured in pixels.
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0.0;
                    } // Return invertedY ? 0.0 * stageHeight : 0.0 * stageHeight * -1;
                    ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "pointerDifference", {
                    /**
                     * Difference vector from the previous pointing position.
                     * @property {Object} [pointerDifference={x:0.0, y:0.0}]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return {
                            // KPADStatus.vec.x and KPADStatus.vec.y
                            x: 0.0,
                            y: 0.0
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "pointerSpeed", {
                    /**
                     * Length of difference from the previous pointing position.
                     * @property {Number} [pointerSpeed=0.0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0.0;
                    } // KPADStatus.speed
                    ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "pointerHorizon", {
                    /**
                     * Directional vector of the pointer's horizontal plane.
                     * The vector has a magnitude of 1, and the positive directions are to the right and down.
                     * @property {Object} [pointerHorizon={x:0.0, y:0.0}]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return {
                            // KPADStatus.horizon.x and KPADStatus.horizon.y
                            x: 0.0,
                            y: 0.0
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "pointerHorizonDifference", {
                    /**
                     * Difference from the previous directional vector.
                     * @property {Object} [pointerHorizonDifference={x:0.0, y:0.0}]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return {
                            // KPADStatus.hori_vec.x and KPADStatus.hori_vec.y
                            x: 0.0,
                            y: 0.0
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "pointerHorizonSpeed", {
                    /**
                     * Magnitude of difference from the previous directional vector.
                     * @property {Number} [pointerHorizonSpeed=0.0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0.0;
                    } // KPADStatus.hori_speed
                    ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "pointerRotation", {
                    /**
                     * The rotation of the pointer in degrees.
                     * @property {Number} [pointerRotation=0.0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0.0;
                    } // Calculate from KPADStatus.horizon vector...
                    ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "pointerAccuracy", {
                    /**
                     * Maintains the number of objects that were used to recognize the pointing position. It is normally 1 or 2; 0 indicates an invalid position. A stored negative value indicates that the recognition result is not very reliable.
                     * @property {Number} [pointerAccuracy=0.0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0.0;
                    } // KPADStatus.dpd_valid_fg
                    ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "distance", {
                    /**
                     * Distance between the Sensor Bar, set on the TV, and the Wii Remote.
                     * Measured in meters.
                     * @property [distance=0.0]
                     * @type Number
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0.0;
                    } // KPADStatus.dist
                    ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "distanceDifference", {
                    /**
                     * Difference from previous distance data.
                     * @property [distanceDifference=0.0]
                     * @type Number
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0.0;
                    } // KPADStatus.dist_vec
                    ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "distanceSpeed", {
                    /**
                     * Magnitude of the difference from previous distance data.
                     * @property [distanceSpeed=0.0]
                     * @type Number
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0.0;
                    } // KPADStatus.dist_speed
                    ,
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(DPDControl.prototype, "invertedY", {
                    /**
                     * Gets/sets whether the y values are inverted for this control.
                     *
                     * `false`: The y values decrease with the downward direction of the control.
                     * This is consistent with the Cartesian coordinate system.
                     *
                     * `true`: The y values increase with the downward direction of the control.
                     * This is consistent with the Screen coordinate system.
                     *
                     * @property {Boolean} [invertedY=true]
                     * @since 1.0
                     */
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                //-------------------------------------------------------------------------
                // PUBLIC METHODS
                //-------------------------------------------------------------------------
                /**
                 * Sets the resolution used to calculate the `screenX` and
                 * `screenY` properties of the control.
                 * <p>By default, the control resolution is set to the TV's resolution.</p>
                 * @param   {uint32}    screenWidth     Number of pixels wide.
                 * @param   {uint32}    screenHeight    Number of pixels tall.
                 * @since 1.0
                 */
                DPDControl.prototype.setScreenResolution = function (screenWidth, screenHeight) {
                    return null;
                };
                return DPDControl;
            })(nwf.events.EventDispatcher);
            control.DPDControl = DPDControl;
        })(control = input.control || (input.control = {}));
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var control;
        (function (control) {
            var GyroscopeControl = (function (_super) {
                __extends(GyroscopeControl, _super);
                /**
                 * The `GyroscopeControl` class represents the gyroscope sensor of a compatible controller.
                 *
                 * To use this control, a controller instance must have the `{@link nwf.input.WiiRemote#mode mode}` property set to `{@link nwf.input.WiiRemote#MODE_GYRO MODE_GYRO}` or `{@link nwf.input.WiiRemote#MODE_FULL MODE_FULL}`.
                 *
                 *     // Get instance from GamePad Controller
                 *     var gpGyro = nwf.input.WiiUGamePad.getController().gyroscope;
                 *
                 * The below diagram shows the gyroscope's axes with relation to each controller when held vertically.
                 * {@img axis-diagram.png}
                 *
                 * The values returned from `GyroscopeControl` have been processed by the system to return a smoother range than the hardware returns directly.
                 *
                 * The `GyroscopeControl` class dispatches the following event:
                 *
                 * - nwf.events.GyroscopeControlEvent.CALIBRATION_FAIL
                 * - nwf.events.GyroscopeControlEvent.CALIBRATION_SUCCESS
                 * - nwf.events.GyroscopeControlEvent.UPDATE
                 *
                 * @class nwf.input.control.GyroscopeControl
                 * @extends nwf.events.EventDispatcher
                 * @author Ryan Lynd
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // CONSTRUCTOR
                //-------------------------------------------------------------------------
                /**
                 * @private
                 * The `new` method is not used to get an instance of a `GyroscopeControl` object.
                 * @method constructor
                 * @since 1.0
                 */
                function GyroscopeControl() {
                    _super.call(this);
                }
                Object.defineProperty(GyroscopeControl.prototype, "controller", {
                    //-------------------------------------------------------------------------
                    // ACCESSORS
                    //-------------------------------------------------------------------------
                    // InputControl
                    /**
                     * Returns the controller object that contains this control.
                     * @property {nwf.input.IController} [controller={}]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return {};
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GyroscopeControl.prototype, "muted", {
                    /**
                     * When set to `true`, control values and events are disabled by the system. When set to `false`, control values and events are not disabled.
                     * When muted values return as 0.
                     *
                     * The system sets this to `true` in the following cases:
                     *
                     *  - The parent controller is disconnected or `enabled` = `false`.
                     *  - The parent controller is in a mode that doesn't support this controller.
                     *  - The user has not given permission to use this type of control or parent controller.
                     *
                     * @property {Boolean} [muted=true]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GyroscopeControl.prototype, "type", {
                    /**
                     * Returns the type of control.
                     * @property {String} [type=null]
                     * @readonly
                     * @since 1.0
                     * @see nwf.input.InputControlType
                     */
                    get: function () {
                        return nwf.input.InputControlType.GYROSCOPE;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GyroscopeControl.prototype, "rotationRateX", {
                    // GyroscopeControl
                    /**
                     * Angular velocity around the x axis, measured in radians/second.
                     * Range: -2&pi; - 2&pi;.
                     * @property {Number} [rotationRateX=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GyroscopeControl.prototype, "rotationRateY", {
                    /**
                     * Angular velocity around the y axis, measured in radians/second.
                     * Range: -2&pi; - 2&pi;.
                     * @property {Number} [rotationRateY=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GyroscopeControl.prototype, "rotationRateZ", {
                    /**
                     * Angular velocity around the z axis, measured in radians/second.
                     * Range: -2&pi; - 2&pi;.
                     * @property {Number} [rotationRateZ=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GyroscopeControl.prototype, "angleX", {
                    /**
                     * Calculated angle of the device on the x axis, measured in radians.
                     * A complete rotation returns a value of 2&pi; ( or -2&pi; in the other direction). Additional rotation adds to this value, with each full rotation equaling a multiple of 2&pi;.
                     * @property {Number} [angleX=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GyroscopeControl.prototype, "angleY", {
                    /**
                     * Calculated angle of the device on the y axis, measured in radians.
                     * A complete rotation returns a value of 2&pi; ( or -2&pi; in the other direction). Additional rotation adds to this value, with each full rotation equaling a multiple of 2&pi;.
                     * @property {Number} [angleY=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GyroscopeControl.prototype, "angleZ", {
                    /**
                     * Calculated angle of the device on the z axis, measured in radians.
                     * A complete rotation returns a value of 2&pi; ( or -2&pi; in the other direction). Additional rotation adds to this value, with each full rotation equaling a multiple of 2&pi;.
                     * @property {Number} [angleZ=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GyroscopeControl.prototype, "dirVectorX", {
                    /**
                    * The x directional vector of the device.
                    * Returns a vector object with x, y, and z properties. This should be a unit vector.
                    * @property {Object} [dirVectorX={x:0, y:0, z:0}]
                    * @readonly
                    * @since 1.0
                    */
                    get: function () {
                        return { x: 0, y: 0, z: 0 };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GyroscopeControl.prototype, "dirVectorY", {
                    /**
                    * The y directional vector of the device.
                    * Returns a vector object with x, y, and z properties. This should be a unit vector.
                    * @property {Object} [dirVectorY={x:0, y:0, z:0}]
                    * @readonly
                    * @since 1.0
                    */
                    get: function () {
                        return { x: 0, y: 0, z: 0 };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GyroscopeControl.prototype, "dirVectorZ", {
                    /**
                    * The z directional vector of the device.
                    * Returns a vector object with x, y, and z properties. This should be a unit vector.
                    * @property {Object} [dirVectorZ={x:0, y:0, z:0}]
                    * @readonly
                    * @since 1.0
                    */
                    get: function () {
                        return { x: 0, y: 0, z: 0 };
                    },
                    enumerable: true,
                    configurable: true
                });
                //-------------------------------------------------------------------------
                // PUBLIC METHODS
                //-------------------------------------------------------------------------
                /**
                 * Performs an at-rest (zero-point) calibration.
                 * A calibration event is triggered when the sensor is successfully calibrated.
                 * If calibration is not successful in the allotted time (default: 30s) a calibration failed event will be triggered.
                 *
                 * __To Use:__ Direct the user to place the controller at rest.
                 * The calibration process ends when the sensor values stabilize.
                 *
                 * @param   {uint32} [maxTime=30000] The amount of time in milliseconds before the operation will time out.
                 * @returns {Boolean} The status of the operation: `true` if successful, `false` if an error is generated. An error occurs because the control is muted or is already being calibrated.
                 * @since 1.0
                 * @see nwf.events.GyroscopeControlEvent.CALIBRATION_SUCCESS
                 * @see nwf.events.GyroscopeControlEvent.CALIBRATION_FAIL
                 * @async
                 */
                GyroscopeControl.prototype.calibrate = function (maxTime) {
                    // See `KPADStartMplsCalibration()` and other techniques...
                    return true; // Status of native call...
                };
                /**
                 * Cancels sensor calibration and dispatches a calibration failed event.
                 * @since 1.0
                 * @see nwf.events.GyroscopeControlEvent.CALIBRATION_FAIL
                 */
                GyroscopeControl.prototype.cancelCalibration = function () {
                    return null;
                };
                return GyroscopeControl;
            })(nwf.events.EventDispatcher);
            control.GyroscopeControl = GyroscopeControl;
        })(control = input.control || (input.control = {}));
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var control;
        (function (control) {
            var MovementControl = (function (_super) {
                __extends(MovementControl, _super);
                /**
                 * The `MovementControl` class represents the 2D movement (x,y) control of a compatible controller such as the Left Stick on the Wii U GamePad.
                 *
                 *      // Get instances from GamePad Controller
                 *      var gpLStick = nwf.input.WiiUGamePad.getController().leftStick;
                 *      var gpRStick = nwf.input.WiiUGamePad.getController().rightStick;
                 *
                 *      // Add listeners for the move event to be fired from the controls
                 *      gpLStick.addEventListener( nwf.events.MovementControlEvent.MOVE, onMove, this );
                 *      gpRStick.addEventListener( nwf.events.MovementControlEvent.MOVE, onMove, this );
                 *
                 *      // Handler for the MovementControls move event
                 *      function onMove( evt ) {
                 *
                 *          // Check to be sure that the movement was significant enough
                 *          if ( Math.abs( evt.movementX ) < 0.05 && Math.abs( evt.movementY ) < 0.05 ) {
                 *              return;
                 *          }
                 *
                 *          // Continue handling input
                 *      }
                 *
                 * The values returned from `MovementControl` have been processed by the system to return a smoother range than the hardware returns directly.
                 *
                 * The `MovementControl` class dispatches the following event:
                 *
                 * - nwf.events.MovementControlEvent.MOVE
                 *
                 * @class nwf.input.control.MovementControl
                 * @extends nwf.events.EventDispatcher
                 * @author Ryan Lynd
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // CONSTRUCTOR
                //-------------------------------------------------------------------------
                /**
                 * @private
                 * The `new` method is not used to get an instance of a MovementControl object.
                 * @method constructor
                 * @since 1.0
                 */
                function MovementControl() {
                    _super.call(this);
                }
                Object.defineProperty(MovementControl.prototype, "controller", {
                    //-------------------------------------------------------------------------
                    // ACCESSORS
                    //-------------------------------------------------------------------------
                    // InputControl
                    /**
                     * Returns the controller object that contains this control.
                     * @property {nwf.input.IController} [controller={}]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return {};
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MovementControl.prototype, "muted", {
                    /**
                     * When set to `true`, control values and events are disabled by the system. When set to `false`, control values and events are not disabled.
                     * When muted values return as 0.
                     *
                     * The system sets this to `true` in the following cases:
                     *
                     *  - The parent controller is disconnected or `enabled` = `false`.
                     *  - The parent controller is in a mode that doesn't support this controller.
                     *  - The user has not given permission to use this type of control or parent controller.
                     *
                     * @property {Boolean} [muted=true]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MovementControl.prototype, "type", {
                    /**
                     * Returns the type of control.
                     * @property {String} [type=null]
                     * @readonly
                     * @since 1.0
                     * @see nwf.input.InputControlType
                     */
                    get: function () {
                        return nwf.input.InputControlType.MOVEMENT;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MovementControl.prototype, "movementX", {
                    // MovementControl
                    /**
                     * Movement along the x plane.
                     * From -1.0 to 1.0 along a screen coordinate system (where -1 on the x axis is "left").
                     * @property {Number} [movementX=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MovementControl.prototype, "movementY", {
                    /**
                     * Movement along the y plane.
                     * From -1.0 to 1.0 along a screen coordinate system (where -1 on the y axis is "up").
                     * @property {Number} [movementY=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MovementControl.prototype, "screenX", {
                    /**
                     * Movement of control mapped to the screen's x plane.
                     * Value measured in pixels. This is faster than doing `control.movementX * windowWidth` but yields the exact same result (unless `setScreenResolution()` was used, in which case it will use the value passed through that instead of the current window resolution).
                     * @property {Number} [screenX=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0; // Return public get values[0] * stageWidth;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MovementControl.prototype, "screenY", {
                    /**
                     * Movement of control mapped to the screen's y plane.
                     * Value measured in pixels. This is faster than doing `control.movementY * windowHeight` but yields the exact same result (unless `setScreenResolution()` was used, in which case it will use the value passed through that instead of the current window resolution).
                     * @property {Number} [screenY=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0; // Return invertedY ? public get values[1] * stageHeight : public get values[1] * stageHeight * -1;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MovementControl.prototype, "angle", {
                    /**
                     * Angle of the vector from the center of the control to the X and Y position in radians.
                     * @property {Number} [angle=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MovementControl.prototype, "invertedY", {
                    /**
                     * Gets/sets whether the y values are inverted for this control.
                     *
                     * `false`: The y values decrease with downward direction of the control.
                     * This is consistent with the Cartesian coordinate system.
                     *
                     * `true`: The y values increase with downward direction of the control.
                     * This is consistent with the Screen coordinate system.
                     * @property {Boolean} [invertedY=true]
                     * @since 1.0
                     */
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                //-------------------------------------------------------------------------
                // PUBLIC METHODS
                //-------------------------------------------------------------------------
                // MovementControl
                /**
                 * Sets the resolution used to calculate the `screenX` and
                 * `screenY` properties of the control.
                 * <p>By default the control resolution is mapped to the most appropriate resolution.
                 * For example, 854×480 for the stick controls on the GamePad and the TV's resolution for the stick on the Nunchuk.</p>
                 * @param   {uint32}    screenWidth     Number of pixels wide.
                 * @param   {uint32}    screenHeight    Number of pixels tall.
                 * @method setScreenResolution
                 * @since 1.0
                 */
                MovementControl.prototype.setScreenResolution = function (screenWidth, screenHeight) {
                    return null;
                };
                return MovementControl;
            })(nwf.events.EventDispatcher);
            control.MovementControl = MovementControl;
        })(control = input.control || (input.control = {}));
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var control;
        (function (control) {
            var TouchControl = (function (_super) {
                __extends(TouchControl, _super);
                /**
                 * The `TouchControl` class represents the touch screen of a compatible controller such as the Wii U GamePad.
                 *
                 * The Wii U GamePad does not fire DOM touch events (such as <em>touchstart</em>, <em>touchmove</em>, etc.), since the Wii U GamePad is not a multitouch device, which those events were designed for. The Wii U GamePad itself does <strong>not</strong> hold any extra data on the point of contact, such as radius or pressure. It is therefore treated exactly as a single-point-of-contact trackpad on a laptop would be.
                 *
                 *      // Get instance from GamePad Controller
                 *      var gpTouchPanel = nwf.input.WiiUGamePad.getController().touchPanel;
                 *
                 * The values returned from `TouchControl` have been processed by the system to return a smoother range than the hardware returns directly.
                 *
                 * The `TouchControl` class dispatches the following events:
                 *
                 * - nwf.events.TouchControlEvent.TOUCH_END
                 * - nwf.events.TouchControlEvent.TOUCH_START
                 * - nwf.events.TouchControlEvent.UPDATE
                 *
                 * @class nwf.input.control.TouchControl
                 * @extends nwf.events.EventDispatcher
                 * @author Ryan Lynd
                 */
                //-------------------------------------------------------------------------
                // CONSTRUCTOR
                //-------------------------------------------------------------------------
                /**
                 * @private
                 * The `new` method is not used to get an instance of a `TouchControl` object. Use nwf.input.WiiUGamePad.touchPanel instead.
                 * @method constructor
                 * @since 1.0
                 */
                function TouchControl() {
                    _super.call(this);
                }
                Object.defineProperty(TouchControl.prototype, "controller", {
                    //-------------------------------------------------------------------------
                    // ACCESSORS
                    //-------------------------------------------------------------------------
                    // IInputControl
                    /**
                     * Returns the controller object that contains this control.
                     * @property {nwf.input.IController} [controller={}]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return {};
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TouchControl.prototype, "muted", {
                    /**
                     * When set to `true`, control values and events are disabled by the system. When set to `false`, control values and events are not disabled.
                     * When muted values return as 0.
                     *
                     * The system sets this to `true` in the following cases:
                     *
                     *  - The parent controller is disconnected or `enabled` = `false`.
                     *  - The parent controller is in a mode that doesn't support this controller.
                     *  - The user has not given permission to use this type of control or parent controller.
                     *
                     * @property {Boolean} [muted=true]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TouchControl.prototype, "type", {
                    /**
                     * Returns the type of control.
                     * @property {String} [type=null]
                     * @readonly
                     * @since 1.0
                     * @see nwf.input.InputControlType
                     */
                    get: function () {
                        return nwf.input.InputControlType.TOUCH;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TouchControl.prototype, "touch", {
                    // Movement Control
                    /**
                     * Touch determination flag. Used to determine if the touch screen is being touched and the validity of the touch data.
                     *
                     * Due to the nature of the touch screen hardware it is possible to detect a touch but the coordinate information may not be valid. In the case where touch data is invalid, the previous valid value will persist.
                     *
                     *      var gpTP = nwf.input.WiiUGamePad.getController().touchPanel;
                     *
                     *      // Quick test to pull if the touch screen is being touched
                     *      if (gpTP.touch) {
                     *
                     *          // Touch screen is touched. Touch coordinates may be recycled
                     *
                     *          if(gpTP.touch === nwf.input.control.TouchControl.TOUCH_VALID) {
                     *
                     *              // Touch screen is touched and all touch coordinates are updated
                     *
                     *          }
                     *
                     *      } else {
                     *
                     *          // Touch screen is not being touched ...
                     *
                     *      }
                     *
                     * @property {uint16} [touch=0]
                     * @readonly
                     * @since 1.2
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TouchControl.prototype, "touchX", {
                    /**
                     * Raw x coordinate of the touch screen. 0 - 4095
                     * @property {Number} [touchX=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TouchControl.prototype, "touchY", {
                    /**
                     * Raw y coordinate of the touch screen. 0 - 4095
                     * @property {Number} [touchY=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TouchControl.prototype, "screenX", {
                    /**
                     * Touch point of control mapped to the screen's x plane.
                     * Value measured in pixels.
                     * @property {Number} [screenX=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0; // Return this.values[0] * stageWidth;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TouchControl.prototype, "screenY", {
                    /**
                     * Touch point of control mapped to the screen's y plane.
                     * Value measured in pixels.
                     * @property {Number} [screenY=0]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return 0; // Return invertedY ? this.values[1] * stageHeight : this.values[1] * stageHeight * -1;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TouchControl.prototype, "invertedY", {
                    /**
                     * Gets/sets whether the y values are inverted for this control.
                     *
                     * `false`: The y values decrease with the downward direction of the control.
                     * This is consistent with the Cartesian coordinate system.
                     *
                     * `true`: The y values increase with the downward direction of the control.
                     * This is consistent with the Screen coordinate system.
                     *
                     * @property {Boolean} [invertedY=true]
                     * @since 1.0
                     */
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                //-------------------------------------------------------------------------
                // PUBLIC METHODS
                //-------------------------------------------------------------------------
                /**
                 * Sets the resolution of the screen associated with this control.
                 * These values are used to calculate the `screenX` and
                 * `screenY` properties of the control.
                 *
                 * By default, `screenWidth` and `screenHeight` are set to the GamePad display attached to the touch screen. However, by setting the resolution to that of the TV (for example) the touch screen can then be used to draw to the screen space of the TV display.
                 *
                 * @param   {uint32}    screenWidth     Number of pixels wide.
                 * @param   {uint32}    screenHeight    Number of pixels tall.
                 * @since 1.0
                 */
                TouchControl.prototype.setScreenResolution = function (screenWidth, screenHeight) {
                    return null;
                };
                Object.defineProperty(TouchControl.prototype, "TOUCH_OFF", {
                    //-------------------------------------------------------------------------
                    // STATIC PUBLIC PROPERTIES
                    //-------------------------------------------------------------------------
                    /**
                     * Touch screen is not being touched.
                     * @static @constant
                     * @since 1.2
                     * @property {uint8} [TOUCH_OFF=0]
                     */
                    // public static TOUCH_OFF: number            =       0;
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TouchControl.prototype, "TOUCH_VALID", {
                    /**
                     * Touch screen is being touched and all coordinates are valid and updated.
                     * @static @constant
                     * @since 1.2
                     * @property {uint8} [TOUCH_VALID=1]
                     */
                    // public static TOUCH_VALID: number          =       1;
                    get: function () {
                        return 1;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TouchControl.prototype, "TOUCH_INVALID_X", {
                    /**
                     * Touch screen is being touched. X coordinate data is invalid and not updated.
                     * @static @constant
                     * @since 1.2
                     * @property {uint8} [TOUCH_INVALID_X=2]
                     */
                    // public static TOUCH_INVALID_X: number      =       2;
                    get: function () {
                        return 2;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TouchControl.prototype, "TOUCH_INVALID_Y", {
                    /**
                     * Touch screen is being touched. Y coordinate data is invalid and not updated.
                     * @static @constant
                     * @since 1.2
                     * @property {uint8} [TOUCH_INVALID_Y=3]
                     */
                    // public static TOUCH_INVALID_Y: number      =       3;
                    get: function () {
                        return 3;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TouchControl.prototype, "TOUCH_INVALID_XY", {
                    /**
                     * Touch screen is being touched. Both X and Y coordinate data is invalid and not updated.
                     * @static @constant
                     * @since 1.2
                     * @property {uint8} [TOUCH_INVALID_XY=4]
                     */
                    // public static TOUCH_INVALID_XY: number     =       4;
                    get: function () {
                        return 4;
                    },
                    enumerable: true,
                    configurable: true
                });
                return TouchControl;
            })(nwf.events.EventDispatcher);
            control.TouchControl = TouchControl;
        })(control = input.control || (input.control = {}));
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var control;
        (function (control) {
            var WeightControl = (function (_super) {
                __extends(WeightControl, _super);
                /**
                 * The `WeightControl` class represents the weight sensor of a compatible controller.
                 *
                 *     // Get instance from Wii Balance Board
                 *     var wiiBB = nwf.input.WiiBalanceBoard.getController().tgcWeight;
                 *
                 * The values returned from `WeightControl` have been processed by the system to return a smoother range than the hardware returns directly.
                 *
                 * The `WeightControl` class dispatches the following events:
                 *
                 * - nwf.events.WeightControlEvent.WEIGHT_CHANGE
                 *
                 * @class nwf.input.control.WeightControl
                 * @extends nwf.events.EventDispatcher
                 * @author Ryan Lynd
                 */
                //-------------------------------------------------------------------------
                // CONSTRUCTOR
                //-------------------------------------------------------------------------
                /**
                 * @private
                 * The `new` method is not used to get an instance of a `WeightControl` object.
                 * @method constructor
                 * @since 1.0
                 */
                function WeightControl() {
                    _super.call(this);
                }
                Object.defineProperty(WeightControl.prototype, "controller", {
                    //-------------------------------------------------------------------------
                    // ACCESSORS
                    //-------------------------------------------------------------------------
                    // IInputControl
                    /**
                     * Returns the controller object that contains this control.
                     * @property {nwf.input.IController} [controller={}]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return {};
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WeightControl.prototype, "muted", {
                    /**
                     * When set to `true`, control values and events are disabled by the system. When set to `false`, control values and events are not disabled.
                     * When muted values return as 0.
                     *
                     * The system sets this to `true` in the following cases:
                     *
                     *  - The parent controller is disconnected or `enabled` = `false`.
                     *  - The parent controller is in a mode that doesn't support this controller.
                     *  - The user has not given permission to use this type of control or parent controller.
                     *
                     * @property {Boolean} [muted=true]
                     * @readonly
                     * @since 1.0
                     */
                    get: function () {
                        return true;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WeightControl.prototype, "type", {
                    /**
                     * Returns the type of control.
                     * @property {String} [type=null]
                     * @readonly
                     * @since 1.0
                     * @see nwf.input.InputControlType
                     */
                    get: function () {
                        return nwf.input.InputControlType.WEIGHT;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WeightControl.prototype, "maxWeight", {
                    // WeightControl
                    /**
                     * The maximum measurable load on the sensor in Kg.
                     *
                     * @property {Number} [maxWeight=0]
                     * @readonly
                     * @since 1.2
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WeightControl.prototype, "weight", {
                    /**
                     * The measured load on the sensor calculated in Kg.
                     *
                     * @property {Number} [weight=0]
                     * @readonly
                     * @since 1.2
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WeightControl.prototype, "avgWeight", {
                    /**
                     * Average value calculated continuously over approximately 2 seconds' worth of samples in Kg. The value is updated continuously as it is calculated.
                     *
                     * @property {Number} [avgWeight=0]
                     * @readonly
                     * @since 1.2
                     */
                    get: function () {
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                return WeightControl;
            })(nwf.events.EventDispatcher);
            control.WeightControl = WeightControl;
        })(control = input.control || (input.control = {}));
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/// <reference path="../events/GyroscopeControlEvent.ts" />
/// <reference path="../events/MovementControlEvent.ts" />
/// <reference path="../events/AccelerometerControlEvent.ts" />
/// <reference path="../events/TouchControlEvent.ts" />
/// <reference path="../events/WeightControlEvent.ts" />
/// <reference path="../events/DirectionControlEvent.ts" />
/// <reference path="../events/DPDControlEvent.ts" />
/// <reference path="../events/ButtonControlEvent.ts" />
/// <reference path="../events/ControllerEvent.ts" />
/// <reference path="./BatteryLevel.ts" />
/// <reference path="./ControllerButton.ts" />
/// <reference path="./ControllerType.ts" />
/// <reference path="./InputControlType.ts" />
/// <reference path="./control/ButtonControl.ts" />
/// <reference path="./control/AccelerometerControl.ts" />
/// <reference path="./control/DirectionControl.ts" />
/// <reference path="./control/DPDControl.ts" />
/// <reference path="./control/GyroscopeControl.ts" />
/// <reference path="./control/MovementControl.ts" />
/// <reference path="./control/TouchControl.ts" />
/// <reference path="./control/WeightControl.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var IController = (function (_super) {
            __extends(IController, _super);
            /**
             * Interface class for all `nwf` Controller classes.
             *
             * _This class is for documentation purposes only._
             *
             * @class nwf.input.IController
             * @extends nwf.events.EventDispatcher
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * @private
             * The `new` method is not used to get an instance of a controller.
             * @method constructor
             * @since 1.0
             */
            function IController() {
                _super.call(this);
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * When set to `true`, input is enabled on this controller. When set to `false`, it is disabled.
                 * @property {Boolean} [enabled=false]
                 * @since 1.0
                 */
                this.enabled = false;
            }
            Object.defineProperty(IController.prototype, "connected", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * Returns `true` if the controller is connected to the console, or returns `false` otherwise.
                 * @property {Boolean} [connected=false]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IController.prototype, "batteryLevel", {
                /**
                 * Battery level of the controller.
                 *
                 * _If the controller does not have a battery, this value will be `{@link nwf.input.BatteryLevel#NO_BATTERY}`._
                 * @property {int} [batteryLevel= nwf.input.BatteryLevel.NO_BATTERY]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.BatteryLevel}
                 */
                get: function () {
                    // return nwf.input.BatteryLevel.NO_BATTERY;
                    return -1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IController.prototype, "type", {
                /**
                 * Controller type.
                 * @property {uint16} [type=nwf.input.ControllerType.UNKNOWN]
                 * @readonly
                 * @since 1.1
                 * @see {@link nwf.input.ControllerType}
                 */
                get: function () {
                    return nwf.input.ControllerType.UNKNOWN;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IController.prototype, "name", {
                /**
                 * Controller name.
                 * @property {String} [name='']
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            //---------------------------------
            // IController
            //---------------------------------
            /**
             * Converts the `IController` instance to `{@link String}`.
             * @since 1.0
             * @returns {String}
             */
            IController.prototype.toString = function () {
                return '[object ' + self.name + ']';
            };
            /**
             * Returns the value of the `IController` instance as a `{@link String}`.
             * @since 1.0
             * @returns {String}
             */
            IController.prototype.valueOf = function () {
                return '[object ' + self.name + ']';
            };
            /**
             * Sets the controllers buttons to dispatch key press events.
             * @param {Object} keyMap Object containing the buttons to be mapped to keyboard keys, i.e. `{ 'A': 'a' }`.
             * @since 1.3
             */
            IController.prototype.setupKeyboardRemap = function () {
                return null;
            };
            /**
             * Fetches the currently mapped keyboard key of the provided button.
             * @param {nwf.input.ControllerButton} buttonValue The button to be checked.
             * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/event.keyCode">MDN event.keyCode</a>
             * @returns {Number} The `keyCode` of the keyboard key currently mapped to the button.
             * @since 1.3
             */
            IController.prototype.getKeyboardRemap = function () {
                return null;
            };
            /**
             * Removes all of the mapped keyboard characters on the controller.
             * @since 1.3
             */
            IController.prototype.clearKeyboardRemaps = function () {
                return null;
            };
            return IController;
        })(nwf.events.EventDispatcher);
        input.IController = IController;
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var WiiBalanceBoard = (function (_super) {
            __extends(WiiBalanceBoard, _super);
            /**
             * Container class representing the Wii Balance Board.
             *
             * ### Working with input controls:
             *
             * The Nintendo Web Framework API maps the physical controls of a controller to simple, logical control classes.
             * From the controller class you can access the supported controls.
             *
             *      // Get an instance of the WiiBalanceBoard
             *      var balanceBoard = nwf.input.WiiBalanceBoard.getController();
             *
             *      // Keep in mind that at any given time the Wii Balance Board may or may not be connected, so always check
             *      if (!balanceBoard.connected) return;
             *
             *      // Before using the Balance Board test to be sure it is not malfunctioning
             *      if(balanceBoard.checkIdleWeight()) return;
             *
             *      // Always call `calibrateWeightControls` before listening for a weight change to be sure that the weight measurments are accurate
             *      balanceBoard.calibrateWeightControls(onCalibrateSuccess);
             *
             *      function onCalibrateSuccess( success ){
             *          if(success){
             *              // If calibration is successful
             *              // instruct the user to step onto the Balance Board
             *              // and test to be sure the weight is between minimum and maximum allowed values
             *              if(!balanceBoard.weightAboveMinimum()) return;
             *              if(!balanceBoard.weightBelowMaximum()) return;
             *
             *              // Test to be sure all of the weight sensors are returning accurately
             *              if(!balanceBoard.checkWeightControls()) return;
             *
             *              // It is now safe to use the Balance Board, so listen for a weight change event
             *              // This is done on the specific WeightControl not the WiiBalanceBoard itself
             *              balanceBoard.tgcWeight.addEventListener( nwf.events.WeightControlEvent.WEIGHT_CHANGE, onWeightChange, this );
             *          } else {
             *              // Handle the failure case
             *              console.log( '[Wii Balance Board] Calibration attempt failed!' );
             *          }
             *      }
             *
             *      function onWeightChange( evt ) {
             *          console.log( "Current Weight: " + evt.weight );
             *      }
             *
             * The `WiiBalanceBoard` class dispatches the following events:
             *
             * - nwf.events.ControllerEvent.BATTERY_LEVEL_CHANGE
             * - nwf.events.ControllerEvent.CONTROLLER_CONNECTED
             * - nwf.events.ControllerEvent.CONTROLLER_DISCONNECTED
             *
             * @class nwf.input.WiiBalanceBoard
             * @extends nwf.input.IController
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            /**
             * @private
             * The `new` method is not used to get an instance of the `WiiBalanceBoard` singleton; use `#getController` instead.
             * @method constructor
             * @since 1.0
             */
            function WiiBalanceBoard() {
                _super.call(this);
            }
            Object.defineProperty(WiiBalanceBoard.prototype, "frontLeftWeight", {
                //-----------------------------
                // Controls
                //-----------------------------
                /**
                 * Weight sensor in the front left area of the Wii Balance Board.
                 *
                 * @property {nwf.input.control.WeightControl} [frontLeftWeight]
                 * @readonly
                 * @since 1.2
                 * @see {@link nwf.input.control.WeightControl}
                 */
                get: function () {
                    return new nwf.input.control.WeightControl();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiBalanceBoard.prototype, "frontRightWeight", {
                /**
                 * Weight sensor in the front right area of the Wii Balance Board.
                 *
                 * @property {nwf.input.control.WeightControl} [frontRightWeight]
                 * @readonly
                 * @since 1.2
                 * @see {@link nwf.input.control.WeightControl}
                 */
                get: function () {
                    return new nwf.input.control.WeightControl();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiBalanceBoard.prototype, "backLeftWeight", {
                /**
                 * Weight sensor in the back left area of the Wii Balance Board.
                 *
                 * @property {nwf.input.control.WeightControl} [backLeftWeight]
                 * @readonly
                 * @since 1.2
                 * @see {@link nwf.input.control.WeightControl}
                 */
                get: function () {
                    return new nwf.input.control.WeightControl();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiBalanceBoard.prototype, "backRightWeight", {
                /**
                 * Weight sensor in the back right area of the Wii Balance Board.
                 *
                 * @property {nwf.input.control.WeightControl} [backRightWeight]
                 * @readonly
                 * @since 1.2
                 * @see {@link nwf.input.control.WeightControl}
                 */
                get: function () {
                    return new nwf.input.control.WeightControl();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiBalanceBoard.prototype, "tgcWeight", {
                /**
                 * Represents an average weight of all sensors that has been corrected for both temperature and gravitational acceleration.
                 * This value is calulated and returned every 2 seconds.
                 *
                 * Always use this `WeightControl`'s values when accurate measurements are required.
                 *
                 * @property {nwf.input.control.WeightControl} [tgcWeight]
                 * @readonly
                 * @since 1.2
                 * @see {@link nwf.input.control.WeightControl}
                 */
                get: function () {
                    return new nwf.input.control.WeightControl();
                },
                enumerable: true,
                configurable: true
            });
            //---------------------------------------------------------------------
            // PUBLIC METHODS
            //---------------------------------------------------------------------
            /**
             * Disconnects the controller.
             * <p class="note">Reconnecting of the controller is initiated by the user.</p>
             * @since 1.2
             */
            WiiBalanceBoard.prototype.disconnect = function () {
                return null;
            };
            /**
             * First collects temperature and gravitational acceleration data and then performs a zero-point calibration of all the `WeightControl` sensors and calls a callback function with a boolean for its parameter.
             *
             * __To Use:__ Direct the user to remove any load from the Wii Balance Board before executing this function.
             *
             * __Note:__ _It is necessary to calibrate the Wii Balance Board each time before an accurate measurement is to be collected on the #tgcWeight control._
             * @param {Function} calibrateCallback Callback function that returns when the calibration ends.
             * @param {Boolean} calibrateCallback.success Set to `true` if the calibration process was succesful, or `false` if it was not.
             * @returns {Boolean} Returns `true` if the calibration process starts successfully, or `false` if an error is generated.
             *                    An error occurs when the control is muted or is already being calibrated.
             * @since 1.2
             * @async
             * @see nwf.input.control.WeightControl#muted
             */
            WiiBalanceBoard.prototype.calibrateWeightControls = function (calibrateCallback) {
                return true;
            };
            /**
             * Checks whether the weight on the Balance Board exceeds 15.4 lbs.
             *
             * __Note:__ _This should be called before the user is instructed to stand on the Balance Board._
             *
             * @returns {Boolean} Returns `false` if the weight doesn't exceed the limit, or `true` if it does.
             * @since 1.2
             */
            WiiBalanceBoard.prototype.checkIdleWeight = function () {
                return false;
            };
            /**
             * Checks to be sure that the current weight is above the minimum weight of 2 kg.
             *
             * @returns {Boolean} Returns `true` if the weight is above the minimum, or `false` if it is not.
             * @since 1.2
             */
            WiiBalanceBoard.prototype.weightAboveMinimum = function () {
                return false;
            };
            /**
             * Checks to be sure that the current weight is below the maximum weight 150 kg.
             *
             * @returns {Boolean} Returns `true` if the weight is below the maximum, or `false` if it is not.
             * @since 1.2
             */
            WiiBalanceBoard.prototype.weightBelowMaximum = function () {
                return false;
            };
            /**
             * Checks to be sure that the current weight of each weight sensor has changed by 2 kg from the zero-point.
             *
             * @returns {Boolean} Returns `true` if the weight on all sensors has changed by the required amount, or `false` otherwise.
             * @since 1.2
             */
            WiiBalanceBoard.prototype.checkWeightControls = function () {
                return false;
            };
            /**
             * This is not inherited by the Wii Balance Board.
             * @hide
             * @since 1.2
             */
            WiiBalanceBoard.prototype.setupKeyboardRemap = function () {
                return null;
            };
            /**
             * This is not inherited by the Wii Balance Board.
             * @hide
             * @since 1.2
             */
            WiiBalanceBoard.prototype.getKeyboardRemap = function () {
                return null;
            };
            /**
             * This is not inherited by the Wii Balance Board.
             * @hide
             * @since 1.2
             */
            WiiBalanceBoard.prototype.clearKeyboardRemaps = function () {
                return null;
            };
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Creates a "singleton" instance of the Wii Balance Board. Only one Wii Balance Board can be connected to the Wii U at a time.
             *
             * Check the `#connected` property to verify the controller is connected before accessing properties or methods.
             * @method getController
             * @returns {nwf.input.WiiBalanceBoard} The `WiiBalanceBoard` singleton instance.
             * @since 1.2
             * @static
             */
            WiiBalanceBoard.getController = function () {
                if (!this.s_controller0) {
                    this.s_controller0 = new WiiBalanceBoard();
                }
                return this.s_controller0;
            };
            /**
             * Method to test for class availability.
             * @method isSupported
             * @returns {Boolean} Returns `false` if the class is not supported, or `true` if the class is available.
             * @since 1.2
             * @static
             */
            WiiBalanceBoard.isSupported = function () {
                return false;
            };
            return WiiBalanceBoard;
        })(nwf.input.IController);
        input.WiiBalanceBoard = WiiBalanceBoard;
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var Nunchuk = (function (_super) {
            __extends(Nunchuk, _super);
            /**
             * Container class representing the Nunchuk controller extension.
             *
             *     // Get instance when Nunchuk is plugged into the extension port of the player 1 Wii Remote
             *     var player1Nunchuk = nwf.input.WiiRemote.getController( 0 ).extensionController;
             *
             * @class nwf.input.Nunchuk
             * @extends nwf.input.IController
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            /**
             * @private
             * The `new` method is not used to get an instance of the `Nunchuk` singleton; use `nwf.input.WiiRemote.extendionController` instead.
             * @method constructor
             * @since 1.0
             */
            function Nunchuk() {
                _super.call(this);
            }
            Object.defineProperty(Nunchuk.prototype, "controller", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * Returns the parent controller object that controls this controller.
                 * @property {nwf.input.IController} [controller=nwf.input.IController]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return new nwf.input.IController();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Nunchuk.prototype, "buttons", {
                //---------------------------------
                // Controls
                //---------------------------------
                /**
                 * Button control object of the Nunchuk.
                 * @property {nwf.input.control.ButtonControl} [buttons=null]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.ButtonControl}
                 */
                get: function () {
                    // return new nwf.input.control.ButtonControl(this);
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Nunchuk.prototype, "stick", {
                /**
                 * Stick control (`MovementControl`) object of the Nunchuk.
                 * @property {nwf.input.control.MovementControl} [stick=null]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.MovementControl}
                 */
                get: function () {
                    // return new nwf.input.control.MovementControl(this);
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Nunchuk.prototype, "accelerometer", {
                /**
                 * Accelerometer control object of the Nunchuk.
                 * @property {nwf.input.control.AccelerometerControl} [accelerometer=null]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.AccelerometerControl}
                 */
                get: function () {
                    // return new nwf.input.control.AccelerometerControl(this);
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            return Nunchuk;
        })(nwf.input.IController);
        input.Nunchuk = Nunchuk;
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var ClassicController = (function (_super) {
            __extends(ClassicController, _super);
            /**
             * Container class representing the Classic Controller and Classic Controller Pro controller extensions.
             *
             *     // Get instance when Classic Controller is plugged into the extension port of the player 1 Wii Remote
             *     var player1Classic = nwf.input.WiiRemote.getController( 0 ).extensionController;
             *
             * @class nwf.input.ClassicController
             * @extends nwf.input.IController
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            /**
             * @private
             * The `new` method is not used to get an instance of the `ClassicController` singleton; use `nwf.input.WiiRemote.extendionController` instead.
             * @method constructor
             * @since 1.0
             */
            function ClassicController() {
                _super.call(this);
            }
            Object.defineProperty(ClassicController.prototype, "controller", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * Returns the parent controller object that controls this controller.
                 * @property {nwf.input.IController} [controller=nwf.input.IController]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return new nwf.input.IController();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ClassicController.prototype, "buttons", {
                //---------------------------------
                // Controls
                //---------------------------------
                /**
                 * Button control object of the Classic Controller.
                 * @property {nwf.input.control.ButtonControl} [buttons=nwf.input.control.ButtonControl]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.ButtonControl}
                 */
                get: function () {
                    return new nwf.input.control.ButtonControl();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ClassicController.prototype, "controlPad", {
                /**
                 * +Control Pad directional control object of the Classic Controller.
                 * @property {nwf.input.control.DirectionControl} [controlPad=nwf.input.control.DirectionControl]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.DirectionControl}
                 */
                get: function () {
                    return new nwf.input.control.DirectionControl();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ClassicController.prototype, "leftStick", {
                /**
                 * Left stick control (`MovementControl`) object of the Classic Controller.
                 * @property {nwf.input.control.MovementControl} [leftStick=nwf.input.control.MovementControl]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.MovementControl}
                 */
                get: function () {
                    return new nwf.input.control.MovementControl();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ClassicController.prototype, "rightStick", {
                /**
                 * Right stick control (`MovementControl`) object of the Classic Controller.
                 * @property {nwf.input.control.MovementControl} [rightStick=nwf.input.control.MovementControl]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.MovementControl}
                 */
                get: function () {
                    return new nwf.input.control.MovementControl();
                },
                enumerable: true,
                configurable: true
            });
            return ClassicController;
        })(nwf.input.IController);
        input.ClassicController = ClassicController;
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/// <reference path="./Nunchuk.ts" />
/// <reference path="./ClassicController.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var WiiRemote = (function (_super) {
            __extends(WiiRemote, _super);
            /**
             * Container class representing the Wii Remote.
             *
             * ### Working with input controls:
             * The Nintendo Web Framework API maps the physical controls of a controller to simple, logical control classes.
             * From the controller class you can access the supported controls.
             *
             *      // Get instance of controller 0, which is Player 1 (controller array is zero-based)
             *      var player1 = nwf.input.WiiRemote.getController( nwf.input.WiiRemote.REMOTE_1 );
             *
             *      // Keep in mind that any given controller may or may not be connected, so always check
             *      if (!player1.connected) return;
             *
             *      // Listen for the A Button
             *      player1.buttons.addEventListener( nwf.events.ButtonControlEvent.PRESS, onRemotePress, this );
             *
             *      function onRemotePress( evt ) {
             *          console.log( "Raw button value: " + evt.button );
             *          if (evt.button === nwf.input.ControllerButton.WII_REMOTE_A) {
             *              console.log( "Player 1 pressed A!" );
             *         }
             *      }
             *
             *
             * The `WiiRemote` class dispatches the following events:
             *
             * - nwf.events.ControllerEvent.BATTERY_LEVEL_CHANGE
             * - nwf.events.ControllerEvent.CONTROLLER_CONNECTED
             * - nwf.events.ControllerEvent.CONTROLLER_DISCONNECTED
             * - nwf.events.ControllerEvent.EXTENSION_CONTROLLER_ADDED
             * - nwf.events.ControllerEvent.EXTENSION_CONTROLLER_REMOVED
             * - nwf.events.ControllerEvent.MPLS_ADDED
             * - nwf.events.ControllerEvent.MPLS_REMOVED
             *
             * @class nwf.input.WiiRemote
             * @extends nwf.input.IController
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            /**
             * @private
             * The `new` method is not used to get an instance of the `WiiRemote` singleton; use `#getController` instead.
             * @method constructor
             * @since 1.0
             */
            function WiiRemote() {
                _super.call(this);
            }
            Object.defineProperty(WiiRemote.prototype, "channel", {
                //---------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //---------------------------------------------------------------------
                //-----------------------------
                // Wii Remote
                //-----------------------------
                /**
                 * Wii Remote Channel (0-3);
                 * @property {int} [channel=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote.prototype, "mode", {
                /**
                 * Changes the data format mode of the Wii Remote.
                 *
                 * Based on the mode, data for specific controls will be enabled or disabled.
                 *
                 * Accessing a control that is incompatible with a mode value will throw a `WiiRemoteModeError`.
                 *
                 * @property {int} [mode=nwf.input.WiiRemote.MODE_LITE]
                 * @since 1.0
                 * @see nwf.input.WiiRemote.MODE_DPD
                 * @see nwf.input.WiiRemote.MODE_GYRO
                 * @see nwf.input.WiiRemote.MODE_LITE
                 * @see nwf.input.WiiRemote.MODE_FULL
                 */
                get: function () {
                    return nwf.input.WiiRemote.MODE_LITE;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote.prototype, "extensionController", {
                /**
                 * Peripheral controller plugged into the extension port of this Wii Remote.
                 * Depending on which peripheral controller is plugged in, the value of this property can be an instance of either `{@link nwf.input.Nunchuk}` or `{@link nwf.input.ClassicController}`.
                 * Only available if an `extensionController` is attached, otherwise returns `null`.
                 * @property {nwf.input.IController} [extensionController=null]
                 * @readonly
                 * @see nwf.input.ClassicController
                 * @see nwf.input.Nunchuk
                 * @see nwf.events.ControllerEvent.EXTENSION_CONTROLLER_ADDED
                 * @see nwf.events.ControllerEvent.EXTENSION_CONTROLLER_REMOVED
                 * @since 1.0
                 */
                get: function () {
                    return null; //Math.round(Math.random()) ? new nwf.input.Nunchuk(this) : new nwf.input.ClassicController(this);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote.prototype, "buttons", {
                //-----------------------------
                // Controls
                //-----------------------------
                /**
                 * Button control object of the Wii Remote. Add event listeners to this object, not the Wii Remote itself, in order to grab input values:
                 *
                 *      var player1 = nwf.input.WiiRemote.getController( nwf.input.WiiRemote.REMOTE_1 );
                 *      player1.buttons.addEventListener( nwf.events.ButtonControlEvent.PRESS, onRemotePress, this );
                 *
                 * @property {nwf.input.control.ButtonControl} [buttons]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.ButtonControl}
                 */
                get: function () {
                    return new nwf.input.control.ButtonControl();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote.prototype, "controlPad", {
                /**
                 * Access to the +Control Pad, the directional control object of the Wii Remote.
                 *
                 *      var player1 = nwf.input.WiiRemote.getController( nwf.input.WiiRemote.REMOTE_1 );
                 *      player1.controlPad.addEventListener( nwf.events.DirectionControlEvent.DIRECTION_CHANGE, onDirectionChange, this );
                 *
                 * @property {nwf.input.control.DirectionControl} [controlPad]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.DirectionControl}
                 */
                get: function () {
                    return new nwf.input.control.DirectionControl();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote.prototype, "cursor", {
                /**
                 * Pointer control (DPD) object of the Wii Remote. The controller's `#mode` property must be set to `#MODE_DPD` or `#MODE_FULL`:
    
                 *      var player1 = nwf.input.WiiRemote.getController( nwf.input.WiiRemote.REMOTE_1 );
                 *      // The cursor will only return valid values after DPD mode is set like so:
                 *      player1.mode = nwf.input.WiiRemote.MODE_DPD;
                 *      var remote1Cursor = player1.cursor;
                 *
                 * @property {nwf.input.control.DPDControl} [cursor]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.DPDControl}
                 */
                get: function () {
                    return new nwf.input.control.DPDControl();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote.prototype, "accelerometer", {
                /**
                 * Accelerometer control object of the Wii Remote.
                 *
                 *      var player1 = nwf.input.WiiRemote.getController( nwf.input.WiiRemote.REMOTE_1 );
                 *      player1.accelerometer.addEventListener( nwf.events.AccelerometerControlEvent.UPDATE, onAccelerometerUpdate, this );
                 *
                 * @property {nwf.input.control.AccelerometerControl} [accelerometer]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.AccelerometerControl}
                 */
                get: function () {
                    return new nwf.input.control.AccelerometerControl();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote.prototype, "gyroscope", {
                /**
                 * Gyroscope control object of the Wii Remote. Only available on MotionPlus Wii Remote controllers (either the attachment or built-in). And the controller's `#mode` property must be set to `#MODE_GYRO` or `#MODE_FULL`:
                 *
                 *      var player1 = nwf.input.WiiRemote.getController( nwf.input.WiiRemote.REMOTE_1 );
                 *      // The gyro will only return valid values after gyro mode is set like so:
                 *      player1.mode = nwf.input.WiiRemote.MODE_GYRO;
                 *      var remote1Gyro = player1.gyroscope;
                 *
                 * @property {nwf.input.control.GyroscopeControl} [gyroscope]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.GyroscopeControl}
                 */
                get: function () {
                    return new nwf.input.control.GyroscopeControl();
                },
                enumerable: true,
                configurable: true
            });
            //---------------------------------------------------------------------
            // PUBLIC METHODS
            //---------------------------------------------------------------------
            /**
             * Disconnects the controller.
             * <p class="note">Reconnecting of the controller is initiated by the user</p>
             * @since 1.0
             */
            WiiRemote.prototype.disconnect = function () {
                return null;
            };
            //-----------------------------
            //  Vibration motor
            //-----------------------------
            /**
             * Vibrates the Wii Remote.
             *
             * @param {uint16} [on=50]  Duration, in milliseconds, to rumble the motor. Max 5000.
             * @param {uint16} [off=50]     Duration, in milliseconds, to rest the motor. Max 5000.
             * @param {Boolean} [override=false]    If `true`, subsequent calls to `startVibrate` will clear the previous command and start a new rumble sequence, or if `false` subsequent calls to `startVibrate` will not rumble the controller unless the previous call is fully completed.
             * @since 1.0
             */
            WiiRemote.prototype.startVibrate = function (on, off, override) {
                return null;
            };
            /**
             * Unconditionally stops any occurring vibration.
             * @since 1.0
             */
            WiiRemote.prototype.stopVibrate = function () {
                return null;
            };
            Object.defineProperty(WiiRemote, "REMOTE_1", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Definition for Wii Remote 1.
                 * @static @constant
                 * @since 1.0
                 * @property {uint8} [REMOTE_1=0]
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote, "REMOTE_2", {
                /**
                 * Definition for Wii Remote 2.
                 * @static @constant
                 * @since 1.0
                 * @property {uint8} [REMOTE_2=1]
                 */
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote, "REMOTE_3", {
                /**
                 * Definition for Wii Remote 3.
                 * @static @constant
                 * @since 1.0
                 * @property {uint8} [REMOTE_3=2]
                 */
                get: function () {
                    return 2;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote, "REMOTE_4", {
                /**
                 * Definition for Wii Remote 4.
                 * @static @constant
                 * @since 1.0
                 * @property {uint8} [REMOTE_4=3]
                 */
                get: function () {
                    return 4;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote, "MODE_LITE", {
                /**
                 * Only Buttons, Accelerometer, accessories (when available) and +Control Pad controls are active.
                 *
                 * This is the default mode of the controller.
                 *
                 * The maximum data rate of any control is about 200Hz in this mode.
                 *
                 * @static @constant
                 * @since 1.0
                 * @property {uint8} [MODE_LITE=0]
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote, "MODE_NORMAL", {
                /**
                 * Buttons, +Control Pad, Accelerometer, accessories (when available) and Pointer controls are active.
                 *
                 * The maximum data rate of any control is about 100Hz in this mode.
                 *
                 * @static @constant
                 * @since 1.0
                 * @deprecated 1.6 Please use `#MODE_DPD` instead.
                 * @property {uint8} [MODE_NORMAL=1]
                 */
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote, "MODE_DPD", {
                /**
                * Buttons, +Control Pad, Accelerometer, accessories (when available) and Pointer controls are active.
                *
                * The maximum data rate of any control is about 100Hz in this mode.
                *
                * @static @constant
                * @since 1.6
                * @property {uint8} [MODE_DPD=1]
                */
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote, "MODE_GYRO", {
                /**
                * Buttons, +Control Pad, Accelerometer, accessories (when available) and Gyroscope controls are active.
                *
                * __Note:__ The Gyroscope is only available in MotionPlus attachments (or built-in for newer Wii Remote controllers, which show the "Wii MotionPlus INSIDE" label on the front and bottom of the device).
                *
                * The maximum data rate of any control is about 100Hz in this mode.
                *
                * @static @constant
                * @since 1.6
                * @property {uint8} [MODE_GYRO=2]
                */
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote, "MODE_FULL", {
                /**
                 * All Controls are active: Buttons, +Control Pad, accessories (when available), Pointer, Accelerometer, and Gyroscope are active.
                 *
                 * __Note:__ The Gyroscope is only available in MotionPlus attachments (or built-in for newer Wii Remote controllers, which show the "Wii MotionPlus INSIDE" label on the front and bottom of the device).
                 *
                 * The maximum data rate of any control is about 100Hz in this mode.
                 *
                 * @static @constant
                 * @since 1.0
                 * @property {uint8} [MODE_FULL=3]
                 */
                get: function () {
                    return 2;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote.prototype, "browserActionsEnabled", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Enables and disables all default controller actions for Wii Remote controllers.
                 *
                 * If `true`, all browser events (mouseEvents, scrollEvents, navEvents) are enabled. If `false`, they are not enabled.
                 * @property {Boolean} [browserActionsEnabled=true]
                 * @since 1.0
                 * @static
                 */
                // public static browserActionsEnabled: boolean =  true;
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote.prototype, "mouseEnabled", {
                /**
                 * Enables and disables default mouse functionality for Wii Remote controllers.
                 *
                 * This will render the default cursor to the TV display and dispatch DOM mouse events.
                 *
                 * If `true`, the mouse is controlled with the Wii Remote DPD. If `false`, it is not.
                 *
                 * @property {Boolean} [mouseEnabled=true]
                 * @since 1.0
                 * @static
                 */
                // public static mouseEnabled: boolean = true;
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote.prototype, "scrollEnabled", {
                /**
                 * Enables and disables default scrolling functionality for Wii Remote controllers.
                 *
                 * If `true`, the scroll bar is controlled with the +Control Pad. If `false`, it is not.
                 *
                 * @property {Boolean} [scrollEnabled=true]
                 * @since 1.0
                 * @static
                 * @deprecated 1.6
                 */
                // public static scrollEnabled: boolean = true;
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiRemote.prototype, "navigationEnabled", {
                /**
                 * Enables and disables default navigation functionality for Wii Remotes.
                 *
                 * If `true`, the browser's "back" and "forward" commands are mapped to the - Button and + Button, respectively. Additionally, pressing the 1 Button reloads the page but does not reflect changes to the source file, and pressing the 2 Button halts loading of the page. If `false`, this is not the case.
                 *
                 * @property {Boolean} [navigationEnabled=true]
                 * @since 1.0
                 * @static
                 * @removed 1.7.1
                 */
                // public static navigationEnabled: boolean = true;
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Creates a "pseudo-singleton" instance of a channel of the Wii Remote.
             *
             * Check the `#connected` property to verify the controller is connected before accessing properties or methods.
             * @method getController
             * @param {int} [remoteChannel=nwf.input.WiiRemote.REMOTE_1] Wii Remote channel (0-3).
             * @returns {nwf.input.WiiRemote} The `WiiRemote` singleton instance of a specific channel.
             * @since 1.0
             * @static
             */
            WiiRemote.getController = function (remoteChannel) {
                switch (remoteChannel) {
                    case 0:
                        if (!this.s_wiiRemote0) {
                            this.s_wiiRemote0 = new WiiRemote();
                        }
                        return this.s_wiiRemote0;
                    case 1:
                        if (!this.s_wiiRemote1) {
                            this.s_wiiRemote1 = new WiiRemote();
                        }
                        return this.s_wiiRemote1;
                    case 2:
                        if (!this.s_wiiRemote2) {
                            this.s_wiiRemote2 = new WiiRemote();
                        }
                        return this.s_wiiRemote2;
                    case 3:
                        if (!this.s_wiiRemote3) {
                            this.s_wiiRemote3 = new WiiRemote();
                        }
                        return this.s_wiiRemote3;
                    default:
                        //no channel param - default = REMOTE_1
                        if (!this.s_wiiRemote0) {
                            this.s_wiiRemote0 = new WiiRemote();
                        }
                        return this.s_wiiRemote0;
                }
            };
            /**
             * Method to test for class availability.
             * @method isSupported
             * @returns {Boolean} Returns `false` if the class is not supported, or `true` if the class is available.
             * @since 1.0
             * @static
             */
            WiiRemote.isSupported = function () {
                return false;
            };
            return WiiRemote;
        })(nwf.input.IController);
        input.WiiRemote = WiiRemote;
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
///<reference path='IController.ts'/>
///<reference path='control/AccelerometerControl.ts'/>
///<reference path='control/ButtonControl.ts'/>
///<reference path='control/DirectionControl.ts'/>
///<reference path='control/GyroscopeControl.ts'/>
///<reference path='control/TouchControl.ts'/>
///<reference path='../display/GamePadDisplay.ts'/>
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var WiiUGamePad = (function (_super) {
            __extends(WiiUGamePad, _super);
            /**
             * Container class representing the Wii U GamePad (sometimes referred to as the GamePad).
             *
             * ### Working with input controls:
             * The Nintendo Web Framework API maps the physical controls of a controller to simple, logical control classes.
             * From the controller class you can access the supported controls.
             *
             *      // Get instance
             *      var player1 = nwf.input.WiiUGamePad.getController();
             *
             *      // Keep in mind that any given controller may or may not be connected, so always check
             *      if (!player1.connected) return;
             *
             *      // Listen for the A Button
             *      player1.buttons.addEventListener( nwf.events.ButtonControlEvent.PRESS, onGamePadPress, this );
             *
             *      function onGamePadPress( evt ) {
             *          console.log( "Raw button value: " + evt.button );
             *          if (evt.button === nwf.input.ControllerButton.GAMEPAD_A) {
             *          console.log( "GamePad Player 1 pressed A!" );
             *          }
             *      }
             *
             * The `WiiUGamePad` class dispatches the following events:
             *
             * - nwf.events.ControllerEvent.BATTERY_LEVEL_CHANGE
             * - nwf.events.ControllerEvent.CONTROLLER_CONNECTED
             * - nwf.events.ControllerEvent.CONTROLLER_DISCONNECTED
             *
             * @class nwf.input.WiiUGamePad
             * @extends nwf.input.IController
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            /**
                * @private
                * The `new` method is not used to get an instance of the `WiiUGamePad` singleton; use `#getController` instead.
                * @method constructor
                * @since 1.0
                */
            function WiiUGamePad() {
                _super.call(this);
                this._buttons = new nwf.input.control.ButtonControl();
                this._controlPad = new nwf.input.control.DirectionControl();
                this._gyroscope = new nwf.input.control.GyroscopeControl();
                this._accelerometer = new nwf.input.control.AccelerometerControl();
                this._touchPanel = new nwf.input.control.TouchControl();
                this._rightStick = new nwf.input.control.MovementControl();
                this._leftStick = new nwf.input.control.MovementControl();
                //---------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //---------------------------------------------------------------------
                /**
                 * When set to `true`, the GamePad Sensor Bar LED is powered on, or when set to `false`, it is not. By default, the Sensor Bar LED is off (`false`).
                 * @property {Boolean} [sensorBarEnabled=false]
                 * @since 1.1
                 */
                this.sensorBarEnabled = false;
            }
            Object.defineProperty(WiiUGamePad.prototype, "channel", {
                //---------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //---------------------------------------------------------------------
                //-----------------------------
                // Wii U GamePad
                //-----------------------------
                /**
                 * Wii U GamePad Controller Channel (always 0).
                 * @property {int} [channel=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUGamePad.prototype, "isCharging", {
                /**
                 * Returns `true` if the Wii U GamePad is currently charging, or `false` if it is not.
                 * @property {Boolean} [isCharging=false]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUGamePad.prototype, "buttons", {
                //-----------------------------
                // Controls
                //-----------------------------
                /**
                 * Button control object of the Wii U GamePad. Add event listeners to this object, not the Wii U GamePad itself, in order to grab input values:
                 *
                 *      var player1 = nwf.input.WiiUGamePad.getController( nwf.input.WiiUGamePad.GAMEPAD_1 );
                 *      player1.buttons.addEventListener( nwf.events.ButtonControlEvent.PRESS, onRemotePress, this );
                 *
                 * @property {nwf.input.control.ButtonControl} [buttons]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.ButtonControl}
                 */
                get: function () {
                    return this._buttons;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUGamePad.prototype, "controlPad", {
                /**
                 * +Control Pad directional control object of the Wii U GamePad.
                 * @property {nwf.input.control.DirectionControl} [controlPad]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.DirectionControl}
                 */
                get: function () {
                    return this._controlPad;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUGamePad.prototype, "leftStick", {
                /**
                 * Left stick control (`MovementControl`) object of the Wii U GamePad.
                 * @property {nwf.input.control.MovementControl} [leftStick]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.MovementControl}
                 */
                get: function () {
                    return this._leftStick;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUGamePad.prototype, "rightStick", {
                /**
                 * Right stick control (`MovementControl`) object of the Wii U GamePad.
                 * @property {nwf.input.control.MovementControl} [rightStick]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.MovementControl}
                 */
                get: function () {
                    return this._rightStick;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUGamePad.prototype, "touchPanel", {
                /**
                 * Touch screen control object of the Wii U GamePad. This provides direct access to the touch screen properties which offer convenient methods as well as bypassing the DOM event system, making it faster to access. Note that the touch screen is a single-point-of-contact device with no further data, so DOM touch events are never fired.
                 * @property {nwf.input.control.TouchControl} [touchPanel]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.TouchControl}
                 */
                get: function () {
                    return this._touchPanel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUGamePad.prototype, "accelerometer", {
                /**
                 * Accelerometer control object of the Wii U GamePad.
                 * @property {nwf.input.control.AccelerometerControl} [accelerometer]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.AccelerometerControl}
                 */
                get: function () {
                    return this._accelerometer;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUGamePad.prototype, "gyroscope", {
                /**
                 * Gyroscope control object of the Wii U GamePad.
                 * @property {nwf.input.control.GyroscopeControl} [gyroscope]
                 * @readonly
                 * @since 1.0
                 * @see {@link nwf.input.control.GyroscopeControl}
                 */
                get: function () {
                    return this._gyroscope;
                },
                enumerable: true,
                configurable: true
            });
            //---------------------------------------------------------------------
            // PUBLIC METHODS
            //---------------------------------------------------------------------
            //-----------------------------
            //  Display and Camera
            //-----------------------------
            /**
             * Helper function to return the GamePad Display. Use this method to get access to the `{@link nwf.display.GamePadDisplay}` associated with this controller.
             *
             * @returns {nwf.display.GamePadDisplay} GamePad Display Object.
             * @since 1.0
             */
            WiiUGamePad.prototype.getDisplay = function () {
                return nwf.display.DisplayManager.getInstance().getGamePadDisplay();
            };
            /**
             * Reference to the GamePad Camera.
             *
             * @returns {nwf.media.Camera} `WIIUCamera` instance.
             * @since 1.0
             */
            WiiUGamePad.prototype.getCamera = function () {
                return nwf.media.Camera.getCamera(0);
            };
            /**
             * Reference to the GamePad Microphone.
             *
             * @returns {nwf.media.Microphone} `WIIUMicrophone` instance.
             * @since 1.5
             */
            WiiUGamePad.prototype.getMicrophone = function () {
                return nwf.media.Microphone.getMicrophone(0);
            };
            /**
             * Resets the origin point of the `#leftStick` and `#rightStick` controls.
             *
             * @since 1.7
             */
            WiiUGamePad.prototype.setStickOrigin = function () {
                return null;
            };
            //-----------------------------
            //  Vibration Motor
            //-----------------------------
            /**
             * Vibrates the Wii U GamePad.
             *
             * @param {uint16} [on=50]  Duration, in milliseconds, to rumble the motor. Max 5000.
             * @param {uint16} [off=50]     Duration, in milliseconds, to rest the motor. Max 5000.
             * @param {Boolean} [override=false]    If `true`, subsequent calls to `startVibrate` will clear the previous command and start a new rumble sequence, or if `false` subsequent calls to `startVibrate` will not rumble the controller unless the previous call is fully completed.
             * @since 1.0
             */
            WiiUGamePad.prototype.startVibrate = function (on, off, override) {
                return null;
            };
            /**
             * Unconditionally stops any occurring vibration.
             * @since 1.0
             */
            WiiUGamePad.prototype.stopVibrate = function () {
                return null;
            };
            Object.defineProperty(WiiUGamePad.prototype, "browserActionsEnabled", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Enables and disables all default controller actions for the GamePad.
                 *
                 * If `true`, all browser events (mouseEvents, scrollEvents, navEvents) are enabled. If `false`, they are not enabled.
                 * @property {Boolean} [browserActionsEnabled=true]
                 * @since 1.0
                 * @static
                 */
                // public static browserActionsEnabled: boolean =  true;
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUGamePad.prototype, "mouseEnabled", {
                /**
                 * Enables and disables default mouse functionality for the GamePad.
                 *
                 * If `true`, the mouse is simulated on the touch screen. If `false`, it is not.
                 *
                 * @property {Boolean} [mouseEnabled=true]
                 * @since 1.0
                 * @static
                 */
                // public static mouseEnabled: boolean = true;
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUGamePad.prototype, "scrollEnabled", {
                /**
                 * Enables and disables default scrolling functionality for the GamePad.
                 *
                 * If `true`, the position of the page (scrolling) is controlled with the Left Stick. If `false`, it is not.
                 *
                 * @property {Boolean} [scrollEnabled=true]
                 * @since 1.0
                 * @static
                 */
                // public static scrollEnabled: boolean = true;
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUGamePad.prototype, "navigationEnabled", {
                /**
                 * Enables and disables default navigation functionality for the GamePad. Additionally, pressing the X Button reloads the page but does not reflect changes to the source file, and pressing the Y Button halts loading of the page.
                 *
                 * If `true`, the Browser "back" and "forward" commands are mapped to the - Button and + Button, respectively. If `false`, they are not.
                 *
                 * @property {Boolean} [navigationEnabled=true]
                 * @since 1.0
                 * @static
                 * @removed 1.7.1
                 */
                // public static navigationEnabled: boolean = true;
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Creates a `singleton` instance of the `WiiUGamePad`.
             *
             * Check the `#connected` property to verify the controller is connected before accessing properties or methods.
             *
             * @method getController
             * @returns {nwf.input.WiiUGamePad} The `WiiUGamePad` singleton instance.
             * @since 1.0
             * @static
             */
            WiiUGamePad.getController = function () {
                return this.s_gp;
            };
            /**
             * Method to test for class availability.
             *
             * @method isSupported
             * @returns {Boolean} Returns `false` if the class is not supported, or `true` if the class is available.
             * @since 1.0
             * @static
             */
            WiiUGamePad.isSupported = function () {
                return false;
            };
            //-------------------------------------------------------------------------
            // STATIC PRIVATE PROPERTIES
            //-------------------------------------------------------------------------
            /** @ignore */
            WiiUGamePad.s_gp = new WiiUGamePad();
            return WiiUGamePad;
        })(nwf.input.IController);
        input.WiiUGamePad = WiiUGamePad;
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var WiiUProController = (function (_super) {
            __extends(WiiUProController, _super);
            /**
             * Container class representing the Wii U Pro Controller.
             *
             * ### Working with input controls:
             * The Nintendo Web Framework API maps the physical controls of a controller to simple, logical control classes.
             * From the controller class you can access the supported controls.
             *
             *      // Get instance
             *      var player1 = nwf.input.WiiUProController.getController(); // Defaults to channel 0, aka WII_U_PRO_CONTROLLER_1
             *      // Keep in mind that any given controller may or may not be connected, so always check
             *      if (!player1.connected) return;
             *      // Listen for the A Button
             *      player1.buttons.addEventListener( nwf.events.ButtonControlEvent.PRESS, onProControllerPress, this );
             *
             *      function onProControllerPress( evt ) {
             *          console.log( "Raw button value: " + evt.button );
             *          if (evt.button === nwf.input.ControllerButton.PRO_A) {
             *              console.log( "Pro Controller Player 1 pressed A!" );
             *          }
             *      }
             *
             * The `WiiUProController` class dispatches the following events:
             *
             * - nwf.events.ControllerEvent.BATTERY_LEVEL_CHANGE
             * - nwf.events.ControllerEvent.CONTROLLER_CONNECTED
             * - nwf.events.ControllerEvent.CONTROLLER_DISCONNECTED
             *
             * @class nwf.input.WiiUProController
             * @extends nwf.input.IController
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            /**
             * @private
             * The `new` method is not used to get an instance of the `WiiUProController` singleton; use `#getController` instead.
             * @method constructor
             * @since 1.0
             */
            function WiiUProController() {
                _super.call(this);
            }
            Object.defineProperty(WiiUProController.prototype, "channel", {
                //---------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //---------------------------------------------------------------------
                //-----------------------------
                // Wii U GamePad
                //-----------------------------
                /**
                 * Wii U Pro Controller Channel (0-3).
                 * @property {int} [channel=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUProController.prototype, "isCharging", {
                /**
                 * Returns `true` if the Wii U GamePad is currently charging, or `false` if it is not.
                 * @property {Boolean} [isCharging=false]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUProController.prototype, "buttons", {
                //-----------------------------
                // Controls
                //-----------------------------
                /**
                 * Button control object of the Wii U Pro Controller. Add event listeners to this object, not the Wii U Pro Controller itself, in order to grab input values:
                 *
                 *      var player1 = nwf.input.WiiUProController.getController( nwf.input.WiiUProController.WII_U_PRO_CONTROLLER_1 );
                 *      player1.buttons.addEventListener( nwf.events.ButtonControlEvent.PRESS, onProControllerPress, this );
                 *
                 * @property {nwf.input.control.ButtonControl} [buttons=nwf.input.control.ButtonControl]
                 * @readonly
                 * @see {@link nwf.input.control.ButtonControl}
                 * @since 1.4
                 */
                get: function () {
                    return new nwf.input.control.ButtonControl();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUProController.prototype, "controlPad", {
                /**
                 * +Control Pad directional control object of the Wii U Pro Controller.
                 * @property {nwf.input.control.DirectionControl} [controlPad=nwf.input.control.DirectionControl]
                 * @readonly
                 * @see {@link nwf.input.control.DirectionControl}
                 * @since 1.4
                 */
                get: function () {
                    return new nwf.input.control.DirectionControl();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUProController.prototype, "leftStick", {
                /**
                 * Left stick control (`MovementControl`) object of the Wii U Pro Controller.
                 * @property {nwf.input.control.MovementControl} [leftStick=nwf.input.control.MovementControl]
                 * @readonly
                 * @see {@link nwf.input.control.MovementControl}
                 * @since 1.4
                 */
                get: function () {
                    return new nwf.input.control.MovementControl();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUProController.prototype, "rightStick", {
                /**
                 * Right stick control (`MovementControl`) object of the Wii U Pro Controller.
                 * @property {nwf.input.control.MovementControl} [rightStick=nwf.input.control.MovementControl]
                 * @see {@link nwf.input.control.MovementControl}
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return new nwf.input.control.MovementControl();
                },
                enumerable: true,
                configurable: true
            });
            //-----------------------------
            //  Vibration Motor
            //-----------------------------
            /**
             * Vibrates the Wii U GamePad.
             *
             * @param {uint16} [on=50]  Duration, in milliseconds, to rumble the motor. Max 5000.
             * @param {uint16} [off=50]     Duration, in milliseconds, to rest the motor. Max 5000.
             * @param {Boolean} [override=false]    If `true`, subsequent calls to `startVibrate` will clear the previous command and start a new rumble sequence, or if `false` subsequent calls to `startVibrate` will not rumble the controller unless the previous call is fully completed.
             * @since 1.0
             */
            WiiUProController.prototype.startVibrate = function (on, off, override) {
                return null;
            };
            /**
             * Unconditionally stops any occurring vibration.
             * @since 1.0
             */
            WiiUProController.prototype.stopVibrate = function () {
                return null;
            };
            Object.defineProperty(WiiUProController.prototype, "WII_U_PRO_CONTROLLER_1", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Definition for Pro Controller 1.
                 * @static @constant
                 * @since 1.4
                 * @property {uint8} [WII_U_PRO_CONTROLLER_1=0]
                 */
                // public static WII_U_PRO_CONTROLLER_1: number = 0;
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUProController.prototype, "WII_U_PRO_CONTROLLER_2", {
                /**
                 * Definition for Pro Controller 2.
                 * @static @constant
                 * @since 1.4
                 * @property {uint8} [WII_U_PRO_CONTROLLER_2=1]
                 */
                // public static WII_U_PRO_CONTROLLER_2: number = 1;
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUProController.prototype, "WII_U_PRO_CONTROLLER_3", {
                /**
                 * Definition for Pro Controller 3.
                 * @static @constant
                 * @since 1.4
                 * @property {uint8} [WII_U_PRO_CONTROLLER_3=2]
                 */
                // public static WII_U_PRO_CONTROLLER_3: number = 2;
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUProController.prototype, "WII_U_PRO_CONTROLLER_4", {
                /**
                 * Definition for Pro Controller 4.
                 * @static @constant
                 * @since 1.4
                 * @property {uint8} [WII_U_PRO_CONTROLLER_4=3]
                 */
                // public static WII_U_PRO_CONTROLLER_4: number  = 3;
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // STATIC PUBLIC PROPERTIES
            //-------------------------------------------------------------------------
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Creates a "pseudo-singleton" instance of a channel of the `WiiUProController`.
             *
             * Check the `connected` property to verify the controller is connected before accessing properties or methods.
             *
             * @method getController
             * @param {int} [remoteChannel=WII_U_PRO_CONTROLLER_1] WiiU Pro Controller channel (0-3).
             * @returns {nwf.input.WiiUProController} The `WiiUProController` singleton instance of a specific channel. Defaults to the `WiiUProController` singleton instance of channel 0.
             * @since 1.4
             * @static
             */
            WiiUProController.getController = function (remoteChannel /* int */) {
                switch (remoteChannel) {
                    case 0:
                        if (!this.s_pro0) {
                            this.s_pro0 = new WiiUProController();
                        }
                        return this.s_pro0;
                    case 1:
                        if (!this.s_pro1) {
                            this.s_pro1 = new WiiUProController();
                        }
                        return this.s_pro1;
                    case 2:
                        if (!this.s_pro2) {
                            this.s_pro2 = new WiiUProController();
                        }
                        return this.s_pro2;
                    case 3:
                        if (!this.s_pro3) {
                            this.s_pro3 = new WiiUProController();
                        }
                        return this.s_pro3;
                    default:
                        //no channel param - default = WII_U_PRO_CONTROLLER_1
                        if (!this.s_pro0) {
                            this.s_pro0 = new WiiUProController();
                        }
                        return this.s_pro0;
                }
            };
            /**
             * Method to test for class availability.
             *
             * @method isSupported
             * @returns {Boolean} Returns `false` if the class is not supported, or `true` if the class is available.
             * @since 1.4
             * @static
             */
            WiiUProController.isSupported = function () {
                return false;
            };
            return WiiUProController;
        })(nwf.input.IController);
        input.WiiUProController = WiiUProController;
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var SoftwareKeyboardEvent = (function (_super) {
            __extends(SoftwareKeyboardEvent, _super);
            /**
             * Defines events dispatched by the `{@link nwf.input.SoftwareKeyboard}` class when Nintendo Web Framework generated notifications occur.
             *
             * @see {@link nwf.input.SoftwareKeyboard}
             * @class nwf.events.SoftwareKeyboardEvent
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function SoftwareKeyboardEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(SoftwareKeyboardEvent.prototype, "ANIMATION_START", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when the Software Keyboard opening or closing animation begins.
                 *
                 * @property {String} [ANIMATION_START='animationStart']
                 * @since 1.6
                 * @static @constant
                 */
                // public static ANIMATION_START: string = 'animationStart';
                get: function () {
                    return 'animationStart';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboardEvent.prototype, "ANIMATION_END", {
                /**
                 * Dispatched when the Software Keyboard opening or closing animation ends.
                 *
                 * @property {String} [ANIMATION_END='animationEnd']
                 * @since 1.6
                 * @static @constant
                 */
                // public static ANIMATION_END: string = 'animationEnd';
                get: function () {
                    return 'animationEnd';
                },
                enumerable: true,
                configurable: true
            });
            return SoftwareKeyboardEvent;
        })(events.Event);
        events.SoftwareKeyboardEvent = SoftwareKeyboardEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        /**
         * @enum nwf.input.SoftwareKeyboardInvalidChars
         * @author Cory O'Regan
         * @author Shawn Gates
         */
        input.SoftwareKeyboardInvalidChars = {
            /**
             * Constant for prohibiting the use of the `@` symbol.
             * @property {int}
             * @static @constant
             * @since 1.2
             */
            INVALID_CHAR_ATMARK: 4,
            /**
             * Constant for prohibiting the use of the `\` symbol.
             * @property {int}
             * @static @constant
             * @since 1.2
             */
            INVALID_CHAR_BACKSLASH: 32,
            /**
             * Constant for prohibiting the use of the `€` symbol.
             * @property {int}
             * @static @constant
             * @since 1.2
             */
            INVALID_CHAR_EUROMARK: 256,
            /**
             * Constant for prohibiting the use of the `heart` symbol.
             * @property {int}
             * @static @constant
             * @since 1.2
             */
            INVALID_CHAR_HEART: 128,
            /**
             * Constant for prohibiting the use of the `linefeed` button.
             * @property {int}
             * @static @constant
             * @since 1.2
             */
            INVALID_CHAR_LINEFEED: 1,
            /**
             * Constant for prohibiting the use of the `%` symbol.
             * @property {int}
             * @static @constant
             * @since 1.2
             */
            INVALID_CHAR_PERCENT: 8,
            /**
             * Constant for prohibiting the use of numeric keys.
             * @property {int}
             * @static @constant
             * @since 1.2
             */
            INVALID_CHAR_NUMERIC: 64,
            /**
             * Constant for prohibiting the use of the `/` symbol.
             * @property {int}
             * @static @constant
             * @since 1.2
             */
            INVALID_CHAR_SLASH: 16,
            /**
             * Constant for prohibiting the use of the `space` key.
             * @property {int}
             * @static @constant
             * @since 1.2
             */
            INVALID_CHAR_SPACE: 2,
        };
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        /**
         * Defines constants for input control types.
         *
         * @enum nwf.input.SoftwareKeyboardFlags
         * @author Cory O'Regan
         * @author Shawn Gates
         */
        input.SoftwareKeyboardFlags = {
            /**
             * Japanese QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_QWERTY_JP: 0x00000001,
            /**
             * US English QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_QWERTY_US_ENG: 0x00000002,
            /**
             * US French QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_QWERTY_US_FRA: 0x00000004,
            /**
             * US Spanish QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_QWERTY_US_SPA: 0x00000008,
            /**
             * US Portuguese QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_QWERTY_US_POR: 0x00000010,
            /**
             * EU English QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_QWERTY_EU_ENG: 0x00000020,
            /**
             * EU French QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_QWERTY_EU_FRA: 0x00000040,
            /**
             * EU German QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_QWERTY_EU_DEU: 0x00000080,
            /**
             * EU Italian QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_QWERTY_EU_ITA: 0x00000100,
            /**
             * EU Spanish QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_QWERTY_EU_SPA: 0x00000200,
            /**
             * EU Dutch QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_QWERTY_EU_NLD: 0x00000400,
            /**
             * EU Portuguese QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_QWERTY_EU_POR: 0x00000800,
            /**
             * EU Russian QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_QWERTY_EU_RUS: 0x00001000,
            /**
             * Japanese kana keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_50ON: 0x00002000,
            /**
             * Japanese cell phone keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_CELL_PHONE: 0x00004000,
            /**
             * Japanese hand-written input keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_HAND: 0x00008000,
            /**
             * Japanese symbol keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_SIGN_JP: 0x00010000,
            /**
             * Latin script keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_SIGN_LATIN: 0x00020000,
            /**
             * US/EU symbol keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_SIGN_US: 0x00040000,
            /**
             * All keyboards.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            FLAG_ALL: 0x0007ffff,
        };
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        /**
         * @enum nwf.input.SoftwareKeyboardType
         * @author Cory O'Regan
         * @author Shawn Gates
         */
        input.SoftwareKeyboardType = {
            /**
             * Japanese QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_QWERTY_JP: 0,
            /**
             * US English QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_QWERTY_US_ENG: 1,
            /**
             * US French QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_QWERTY_US_FRA: 2,
            /**
             * US Spanish QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_QWERTY_US_SPA: 3,
            /**
             * US Portuguese QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_QWERTY_US_POR: 4,
            /**
             * EU English QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_QWERTY_EU_ENG: 5,
            /**
             * EU French QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_QWERTY_EU_FRA: 6,
            /**
             * EU German QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_QWERTY_EU_DEU: 7,
            /**
             * EU Italian QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_QWERTY_EU_ITA: 8,
            /**
             * EU Spanish QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_QWERTY_EU_SPA: 9,
            /**
             * EU Dutch QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_QWERTY_EU_NLD: 10,
            /**
             * EU Portuguese QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_QWERTY_EU_POR: 11,
            /**
             * EU Russian QWERTY keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_QWERTY_EU_RUS: 12,
            /**
             * Japanese kana keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_50ON: 13,
            /**
             * Japanese cell phone keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_CELL_PHONE: 14,
            /**
             * Japanese hand-written input keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_HAND: 15,
            /**
             * Japanese symbol keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_SIGN_JP: 16,
            /**
             * Latin script keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_SIGN_LATIN: 17,
            /**
             * US/EU symbol keyboard.
             * @property {int}
             * @static @constant
             * @since 1.3
             */
            TYPE_SIGN_US: 18,
        };
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/// <reference path="../events/SoftwareKeyboardEvent.ts" />
/// <reference path="./SoftwareKeyboardInvalidChars.ts" />
/// <reference path="./SoftwareKeyboardFlags.ts" />
/// <reference path="./SoftwareKeyboardType.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var input;
    (function (input) {
        var SoftwareKeyboard = (function (_super) {
            __extends(SoftwareKeyboard, _super);
            /**
             * Class for invoking the Wii U Software Keyboard.
             *
             * The example below invokes the half-screen keyboard, with numbers only, on the GamePad display:
             *
             *      var keyboard = nwf.input.SoftwareKeyboard;
             *      var ops = {
             *          'display': nwf.input.SoftwareKeyboard.DISPLAY_GAMEPAD,
             *          'mode': nwf.input.SoftwareKeyboard.MODE_NUMERIC,
             *          'fullscreen': false
             *      };
             *
             *      // The SoftwareKeyboard class will throw an error if it is invoked again while it is already open
             *      // So it is best to wrap the invoke call in an error handler
             *      try{
             *          // The `onKeyPress` example function can be found below
             *          keyboard.invoke( onKeyPress, ops, onValidation );
             *      }catch(err){
             *          // Handle the error here
             *      }
             *
             * Below is a callback example for taking input from a half-screen keyboard:
             *
             *      function onKeyPress( options ) {
             *          // 'options' is an Object passed to this callback function by the software keyboard
             *          var txt = options.text; // options.text returns JS text, not HTML
             *
             *          var userSelected = options.user_select;
             *          switch (userSelected) {
             *              case keyboard.USER_OK:
             *                  // You should already be capturing input into a field every press,
             *                  // But perhaps you can do something rewarding for the user anyway
             *                  break;
             *
             *              case keyboard.USER_CANCEL:
             *                  txtArea.innerText = 'User canceled input.';
             *                  break;
             *
             *              case keyboard.USER_BACKSPACE:
             *                  var prev = txtArea.innerText;
             *                  txtArea.innerText = prev.slice(0, prev.length - 1); // Manual backspace
             *                  break;
             *
             *              case keyboard.USER_CHAR:
             *                  txtArea.innerText += txt;
             *                  break;
             *
             *              default:
             *                  console.error( "[keyCallback] Received unknown callback message: " + userSelected );
             *          }
             *      }
             *
             * Below is a validation callback example for checking input from a half-screen keyboard:
             *
             *      function onValidation( text ) {
             *          // the only valid text is "open sesame"
             *          if (text === "open sesame") {
             *              return true;
             *          }
             *          var options = {
             *              body: 'Invalid text',
             *              btn_1: 'Close',
             *              display: nwf.ui.Dialog.DISPLAY_GAMEPAD,
             *          };
             *          nwf.ui.Dialog.displayAlert(function(){}, options);
             *          return false;
             *      }
             *
             * @class nwf.input.SoftwareKeyboard
             * @singleton
             * @extends nwf.events.EventDispatcher
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function SoftwareKeyboard() {
                /**
                 * The `new` constructor is not used to create instances of the SoftwareKeyboard. Please use `#getInstance` instead.
                 * @private
                 * @constructor
                 */
                _super.call(this);
            }
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Invokes the Wii U Software Keyboard and displays it on the screen specified in the options object.
             * The results of the user input are passed in the arguments of the callback function as an Object when the user presses a key (when `fullscreen = false`) or when the user exits the keyboard (when `fullscreen = true`).
             *
             * __Notes:__
             *
             * - If invoking manually on a text field, be sure to call `event.preventDefault()` in the callback so that WebKit does not interfere.
             * - When using `#invoke` you will need to manually scroll the "cursor" on a `textField` or `div` element containing the resulting text.
             * - If the `#invoke` method is called when `SoftwareKeyboard` is already open then an error will be thrown.
             *
             * @static
             * @param {Function} callback When `fullscreen` is `true`, this function is called only when the user presses the <b>OK</b> or <b>Cancel</b> buttons to return to the screen. When `fullscreen` is `false`, this function is called _on each key press_, in addition to when <b>OK</b> or <b>Cancel</b> are pressed.
             * @param {Object} callback.output Object containg the input recieved through the software keyboard.
             * @param {String} callback.output.text String containing the text from user input.
             *
             *  __Note:__ _In fullscreen mode, returns with all input; otherwise, returns on every keypress with the one character._
             *
             * @param {String} callback.output.user_select The key that was pressed.
             *
             * __Note:__ _When in fullscreen mode this will be either `nwf.input.SoftwareKeyboard.USER_OK` or `nwf.input.SoftwareKeyboard.USER_CANCEL`.
             * Otherwise it can be `nwf.input.SoftwareKeyboard.USER_CHAR` or `nwf.input.SoftwareKeyboard.USER_BACKSPACE` as well._
             *
             * @param {Object} [options] Optional parameters to set up the software keyboard when it is invoked. Parameters set here will override the defaults listed.
             * @param {String} [options.text] The initial text to display in the keyboard when it is invoked. When using this option in half-screen keyboard mode, only set the text that will be in front of the cursor, not the entire string that is in the input field.
             * @param {Boolean} [options.fullscreen=false] When set to `true`, the keyboard opens in fullscreen. When set to `false`, the keyboard opens in half-screen. Defaults to the half-screen keyboard.
             * @param {Boolean} [options.prediction=false] When set to `true`, predictive text input is enabled. When set to `false`, it is disabled.
             * @param {Boolean} [options.pause_media=false] When set to `true`, currently-playing media will be paused while the keyboard is in use. When set to `false`, media continues to play while the keyboard is in use.
             * @param {Boolean} [options.pause_webkit=false] When set to `true`, the keyboard pauses WebKit upon opening. WebKit operations will resume when the keyboard is closed. When set to `false`, it does not. __Note:__ This option is only available when using `fullscreen` mode.
             * @param {Number} [options.mode=nwf.input.SoftwareKeyboard.MODE_FULL] The start mode of the keyboard.
             * @param {nwf.input.SoftwareKeyboardFlags} [options.flags=nwf.input.SoftwareKeyboardFlags.FLAG_ALL] If the keyboard mode is nwf.input.SoftwareKeyboard.MODE_FULL, this flag limits the layouts that can be specified. Specify multiple layouts using binary operators.
             *
             * Ex: flags =  nwf.input.SoftwareKeyboardFlags.FLAG_QWERTY_US_ENG | nwf.input.SoftwareKeyboardFlags.FLAG_QWERTY_US_SPA
             * @param {String} [options.guide_string=''] Specifies a guide string to be displayed at the top of the input form.
             * @param {Number} [options.form_type=nwf.input.SoftwareKeyboard.INPUT_FORM_TYPE_PROPORTIONAL] Sets the keyboard to use the proportional or monospace input form.
             * @param {nwf.input.SoftwareKeyboardInvalidChars} [options.invalid_chars=0] Specifies characters that cannot be used in the keyboard. Specify multiple characters using binary operators.
             *
             * Ex: invalid_chars =  nwf.input.SoftwareKeyboardInvalidChars.INVALID_CHAR_SLASH | nwf.input.SoftwareKeyboardInvalidChars.INVALID_CHAR_BACKSLASH
             * @param {Number} [options.password=nwf.input.SoftwareKeyboard.PASSWORD_DISABLE] The password mode of the keyboard.
             * @param {Number} [options.display=nwf.input.SoftwareKeyboard.DISPLAY_GAMEPAD] The screen to display the keyboard on.
             * @param {Number} [options.max_chars=-1] The maximum number of characters to allow as input. The default value, `-1`, means unlimited.
             * @param {String} [options.ok_string] The custom string to be displayed on the keyboard's OK button.
             * @param {nwf.input.SoftwareKeyboardType} [options.start_keyboard] The keyboard type that is displayed upon invocation. For instance, use this to start the keyboard in Spanish mode instead of the default English.
             * @param {Number} [options.start_tab] The keyboard tab that is displayed upon invocation. The tabs are at the bottom near the OK button and are defined as follows:
             *
             * When the tab number is -1, default tab numbers are used for each keyboard.
             *
             * For PC keyboards (Japanese): 0: Alphabetic, 1: Numeric, 2: ASCII symbols, 3: Latin characters
             *
             * For PC keyboards (Russian): 0: Alphabetic, 1: Numeric, 2: ASCII symbols, 3: Cyrillic characters
             *
             * For PC keyboards (other than Japanese or Russian): 0: Alphabetic, 1: Numeric, 2: ASCII symbols
             *
             * For Japanese kana keyboards: 0: Hiragana, 1: Katakana, 2: Uppercase alphabetic, 3: Lowercase alphabetic, 4: ASCII symbols
             *
             * For Japanese cell phone keyboards: 0: Hiragana, 1: Katakana, 2: Alphabetic, 3: Numeric
             *
             * For Japanese hand-written input keyboards: Tab numbers are invalid.
             *
             * For Japanese symbol keyboards, Latin script keyboards, and US/EU symbol keyboards: Tab number = Number of pages.
             *
             * @param {Function} [validationCallback] This function is called only when the user presses the <b>OK</b> button. If the return value of the function is true, the keyboard closes, otherwise the keyboard remains invoked.
             * @param {String} validationCallback.text String containing the text from user input.
             *
             * @async
             * @since 1.0
             */
            SoftwareKeyboard.prototype.invoke = function (callback, options, validationCallback) {
                return null;
            };
            /**
             * Dismisses the software keyboard.
             *
             * The <i>options</i> parameter specifies whether the keyboard dismissal will be treated as the user pressing <b>OK</b> or <b>Cancel</b>.
             *
             * @static
             * @param {int} [options=DISMISS_OK]
             * @since 1.0
             */
            SoftwareKeyboard.prototype.dismiss = function (options) {
                return null;
            };
            /**
             * Clears the software keyboard's internal text buffer. This is useful if the text area was cleared by some means other than using the software keyboard (such as if the innerText property of the text area is set to the empty string).
             *
             * Ex:
             *
             *      txtArea.innerText = '';
             *      nwf.input.SoftwareKeyboard.clearBuffer();
             *
             * @static
             * @return {Boolean} Returns `false` if the software keyboard is not in use, or returns `true` otherwise.
             * @since 1.5
             */
            SoftwareKeyboard.prototype.clearBuffer = function () {
                return false;
            };
            /**
             * Enables the default software keyboard that is displayed whenever the user selects a text field. This will enable the default software keyboard for the rest of the application's session lifetime.
             * @static
             * @return {Boolean} Returns `true` if the default software keyboard was previously enabled, or returns `false` otherwise.
             * @since 1.0
             */
            SoftwareKeyboard.prototype.enableDefault = function () {
                return false;
            };
            /**
             * Disables the default software keyboard that is displayed whenever the user selects a text field.
             * This will also disable the restriction that calling `focus()` before interacting with the page using the Touch Screen or Wii Remote will not bring up the default software keyboard.
             *
             * *IMPORTANT: This will disable the default software keyboard for the rest of the application's session lifetime.* Do not forget to call `nwf.input.SoftwareKeyboard.enableDefault()` if you want other parts of your application (e.g., different pages) to use the default software keyboard again.
             * @static
             * @return {Boolean} Returns `true` if the default software keyboard was previously enabled, or returns `false` otherwise.
             * @since 1.0
             */
            SoftwareKeyboard.prototype.disableDefault = function () {
                return false;
            };
            /**
             * Accesses an instance of the `Software Keyboard` singleton.
             *
             * @method getInstance
             * @returns {nwf.input.SoftwareKeyboard} The `SoftwareKeyboard` singleton instance.
             * @static
             * @since 1.4
             */
            SoftwareKeyboard.getInstance = function () {
                if (!this.s_instance) {
                    this.s_instance = new SoftwareKeyboard();
                }
                return this.s_instance;
            };
            Object.defineProperty(SoftwareKeyboard.prototype, "MODE_FULL", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC CONSTANTS
                //-------------------------------------------------------------------------
                /**
                 * Full keyboard. Includes all characters and language options.
                 * @property {int} [MODE_FULL=0]
                 * @static @constant
                 * @since 1.0
                 */
                // public static MODE_FULL: number =                      0,
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "MODE_NUMERIC", {
                /**
                 * Keypad version of the keyboard, with numbers and backspace keys available.
                 * @property {int} [MODE_NUMERIC=1]
                 * @static @constant
                 * @since 1.0
                 */
                // public static MODE_NUMERIC: number =                   1,
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "MODE_NNID", {
                /**
                * Keyboard used for typing in a Nintendo Network ID, which includes all alphanumeric keys plus the '-', '_', space bar, and backspace keys.
                * @property {int} [MODE_NNID=4]
                * @static @constant
                * @since 1.5
                */
                // public static MODE_NNID: number =                      4
                get: function () {
                    return 4;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "MODE_PASSWORD", {
                /**
                * Keyboard used for typing in a password.
                * @property {int} [MODE_PASSWORD=5]
                * @static @constant
                * @since 1.5
                */
                // public static MODE_PASSWORD: number =                  5
                get: function () {
                    return 5;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "PASSWORD_DISABLE", {
                /**
                 * Default mode for the keyboard. Will not hide input.
                 * @property {int} [PASSWORD_DISABLE=0]
                 * @static @constant
                 * @since 1.0
                 */
                // public static PASSWORD_DISABLE: number =               0
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "PASSWORD_IMMEDIATE", {
                /**
                 * Password Mode. Hides characters immediately after input. Note that this only affects the fullscreen keyboard, since developers have complete control of input (on each keypress) in the half-screen keyboard.
                 *
                 * In order to hide characters in an input field when using the half-screen keyboard, use the value `password` for the type attribute of the input element:
                 *  <input type="password">
                 * @property {int} [PASSWORD_IMMEDIATE=1]
                 * @static @constant
                 * @since 1.0
                 */
                // public static PASSWORD_IMMEDIATE: number =             1
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "PASSWORD_1SEC", {
                /**
                 * Password Mode. Hides input after waiting one second. Note that this only affects the fullscreen keyboard, since developers have complete control of input (on each keypress) in the half-screen keyboard.
                 *
                 * In order to hide characters in an input field when using the half-screen keyboard, use the value `password` for the type attribute of the input element:
                 *  <input type="password">
                 * @property {int} [PASSWORD_1SEC=2]
                 * @static @constant
                 * @since 1.0
                 */
                // public static PASSWORD_1SEC: number =                  2
                get: function () {
                    return 2;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "DISPLAY_TV", {
                /**
                 * Constant for displaying the keyboard on the TV Display.
                 * @property {int} [DISPLAY_TV=0]
                 * @static @constant
                 * @since 1.0
                 */
                // public static DISPLAY_TV: number =                     0
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "DISPLAY_GAMEPAD", {
                /**
                 * Constant for displaying the keyboard on the GamePad Display.
                 * @property {int} [DISPLAY_GAMEPAD=1]
                 * @static @constant
                 * @since 1.0
                 */
                // public static DISPLAY_GAMEPAD: number =                    1
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "INPUT_FORM_TYPE_PROPORTIONAL", {
                /**
                 * Constant for displaying the keyboard with a proportional input form.
                 *
                 *  __Note:__ This only affects the fullscreen keyboard.
                 * @property {int} [INPUT_FORM_TYPE_PROPORTIONAL=1]
                 * @static @constant
                 * @since 1.2
                 */
                // public static INPUT_FORM_TYPE_PROPORTIONAL: number =                   1
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "INPUT_FORM_TYPE_MONOSPACE", {
                /**
                 * Constant for displaying the keyboard with a monospace input form.
                 *
                 * __Note:__ This only affects the fullscreen keyboard.
                 * @property {int} [INPUT_FORM_TYPE_MONOSPACE=0]
                 * @static @constant
                 * @since 1.2
                 */
                // public static INPUT_FORM_TYPE_MONOSPACE: number =                  0
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "INVALID_CHAR_ATMARK", {
                /**
                 * Constant for prohibiting the use of the `@` symbol.
                 * @deprecated 1.3 Use nwf.input.SoftwareKeyboardInvalidChars.INVALID_CHAR_ATMARK instead.
                 * @property {int} [INVALID_CHAR_ATMARK=4]
                 * @static @constant
                 * @since 1.2
                 */
                // public static INVALID_CHAR_ATMARK: number =                    4
                get: function () {
                    return 4;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "INVALID_CHAR_BACKSLASH", {
                /**
                 * Constant for prohibiting the use of the `\` symbol.
                 * @deprecated 1.3 Use nwf.input.SoftwareKeyboardInvalidChars.INVALID_CHAR_BACKSLASH instead.
                 * @property {int} [INVALID_CHAR_BACKSLASH=32]
                 * @static @constant
                 * @since 1.2
                 */
                // public static INVALID_CHAR_BACKSLASH: number =                 32
                get: function () {
                    return 32;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "INVALID_CHAR_EUROMARK", {
                /**
                 * Constant for prohibiting the use of the `€` symbol.
                 * @deprecated 1.3 Use nwf.input.SoftwareKeyboardInvalidChars.INVALID_CHAR_EUROMARK instead.
                 * @property {int} [INVALID_CHAR_EUROMARK=256]
                 * @static @constant
                 * @since 1.2
                 */
                // public static INVALID_CHAR_EUROMARK: number =                  256
                get: function () {
                    return 256;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "INVALID_CHAR_HEART", {
                /**
                 * Constant for prohibiting the use of the `heart` symbol.
                 * @deprecated 1.3 Use nwf.input.SoftwareKeyboardInvalidChars.INVALID_CHAR_HEART instead.
                 * @property {int} [INVALID_CHAR_HEART=128]
                 * @static @constant
                 * @since 1.2
                 */
                // public static INVALID_CHAR_HEART: number =                 128
                get: function () {
                    return 128;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "INVALID_CHAR_LINEFEED", {
                /**
                 * Constant for prohibiting the use of the `linefeed` button.
                 * @deprecated 1.3 Use nwf.input.SoftwareKeyboardInvalidChars.INVALID_CHAR_LINEFEED instead.
                 * @property {int} [INVALID_CHAR_LINEFEED=1]
                 * @static @constant
                 * @since 1.2
                 */
                // public static INVALID_CHAR_LINEFEED: number =                  1
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "INVALID_CHAR_PERCENT", {
                /**
                 * Constant for prohibiting the use of the `%` symbol.
                 * @deprecated 1.3 Use nwf.input.SoftwareKeyboardInvalidChars.INVALID_CHAR_PERCENT instead.
                 * @property {int} [INVALID_CHAR_PERCENT=8]
                 * @static @constant
                 * @since 1.2
                 */
                // public static INVALID_CHAR_PERCENT: number =                   8
                get: function () {
                    return 8;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "INVALID_CHAR_NUMERIC", {
                /**
                 * Constant for prohibiting the use of numeric keys.
                 * @deprecated 1.3 Use nwf.input.SoftwareKeyboardInvalidChars.INVALID_CHAR_NUMERIC instead.
                 * @property {int} [INVALID_CHAR_NUMERIC=64]
                 * @static @constant
                 * @since 1.2
                 */
                // public static INVALID_CHAR_NUMERIC: number =                   64
                get: function () {
                    return 64;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "INVALID_CHAR_SLASH", {
                /**
                 * Constant for prohibiting the use of the `/` symbol.
                 * @deprecated 1.3 Use nwf.input.SoftwareKeyboardInvalidChars.INVALID_CHAR_SLASH instead.
                 * @property {int} [INVALID_CHAR_SLASH=16]
                 * @static @constant
                 * @since 1.2
                 */
                // public static INVALID_CHAR_SLASH: number =                 16
                get: function () {
                    return 16;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "INVALID_CHAR_SPACE", {
                /**
                 * Constant for prohibiting the use of the `space` key.
                 * @deprecated 1.3 Use nwf.input.SoftwareKeyboardInvalidChars.INVALID_CHAR_SPACE instead.
                 * @property {int} [INVALID_CHAR_SPACE=2]
                 * @static @constant
                 * @since 1.2
                 */
                // public static INVALID_CHAR_SPACE: number =                 2
                get: function () {
                    return 2;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "USER_OK", {
                /**
                 * Constant returned in the callback object when the user selects OK.
                 * @property {String} [USER_OK='ok']
                 * @static @constant
                 * @since 1.0
                 */
                // public static USER_OK: string =                        "ok"
                get: function () {
                    return "ok";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "USER_CANCEL", {
                /**
                 * Constant returned in the callback object when the user selects Cancel.
                 * @property {String} [USER_CANCEL='cancel']
                 * @static @constant
                 * @since 1.0
                 */
                // public static USER_CANCEL: string =                    "cancel"
                get: function () {
                    return "cancel";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "USER_BACKSPACE", {
                /**
                 * Constant returned in the callback object when the user presses the backspace key (non-fullscreen keyboard only).
                 * @property {String} [USER_BACKSPACE='backspace']
                 * @static @constant
                 * @since 1.0
                 */
                // public static USER_BACKSPACE: string =                 "backspace"
                get: function () {
                    return "backspace";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "USER_CHAR", {
                /**
                 * Constant returned in the callback object when the user presses any printable character (non-fullscreen keyboard only).
                 * @property {String} [USER_CHAR='char']
                 * @static @constant
                 * @since 1.0
                 */
                // public static USER_CHAR: string = "char"
                get: function () {
                    return "char";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "DISMISS_OK", {
                /**
                 * Constant passed into the dismiss method to tell the keyboard to act as if OK was pressed when it is dismissed.
                 * @property {int} [DISMISS_OK=0]
                 * @static @constant
                 * @since 1.0
                 */
                // public static DISMISS_OK: number = 0
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SoftwareKeyboard.prototype, "DISMISS_CANCEL", {
                /**
                 * Constant passed into the dismiss method to tell the keyboard to act as if Cancel was pressed when it is dismissed.
                 * @property {int} [DISMISS_CANCEL=1]
                 * @static @constant
                 * @since 1.0
                 */
                // public static DISMISS_CANCEL: number = 1
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            return SoftwareKeyboard;
        })(nwf.events.EventDispatcher);
        input.SoftwareKeyboard = SoftwareKeyboard;
    })(input = nwf.input || (nwf.input = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var io;
    (function (io) {
        /**
         * `IOError` constants for File and Directory method return values and the {@link nwf.events.IOEvent#errorID errorID} property of an {@link nwf.events.IOEvent IOEvent}.
         *
         * @enum nwf.io.IOError
         * @author Ryan Lynd
         * @author Shawn Gates
         */
        io.IOError = {
            /**
             * Command Successful.
             * @type int
             * @since 1.0
             * @static @constant */
            ERROR_NONE: 0,
            /**
             * Bad file descriptor.
             * This may have been a file operation performed on a directory or a directory operation performed on a file.
             * @type int
             * @since 1.0
             * @static @constant */
            ERROR_BADF: 1,
            /**
             * One of the parameters passed to the method was invalid.
             * @type int
             * @since 1.0
             * @static @constant */
            ERROR_INVALIDPARAM: 2,
            /**
             * The file or directory already exists.
             * @type int
             * @since 1.0
             * @static @constant */
            ERROR_EXISTS: 3,
            /**
             * The process already has the maximum number of files open.
             * @type int
             * @since 1.0
             * @static @constant */
            ERROR_MAXFILES: 4,
            /**
             * The caller does not have proper access permission. This includes read-only permissions.
             * @type int
             * @since 1.0
             * @static @constant */
            ERROR_ACCESS: 5,
            /**
             * File not found.
             * @type int
             * @since 1.0
             * @static @constant */
            ERROR_NOTFOUND: 6,
            /**
             * The device does not have enough available space for the file.
             * @type int
             * @since 1.0
             * @static @constant */
            ERROR_NOSPACE: 7,
            /**
             * The file is too large to be opened or saved.
             * @type int
             * @since 1.0
             * @static @constant */
            ERROR_OVERFLOW: 8,
            /**
             * The method is unsupported.
             * @type int
             * @since 1.0
             * @static @constant */
            ERROR_UNSUPPORTED: 9,
            /**
             * Unknown error.
             * @type int
             * @since 1.0
             * @static @constant */
            ERROR_UNKNOWN: 10,
            /**
             * A `{@link nwf.events.IOEvent#READ_COMPLETE READ_COMPLETE}` event has not been added to this object.
             * @type int
             * @since 1.7
             * @static @constant */
            ERROR_NOLISTENER: 11
        };
    })(io = nwf.io || (nwf.io = {}));
})(nwf || (nwf = {}));
/// <reference path="./IOError.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var io;
    (function (io) {
        var Directory = (function () {
            /**
             * The `Directory` class object provides functions for interacting with directories on the Wii U file system.
             *
             *     // Get reference to application root directory
             *     var appDir = nwf.io.Directory.appRootDirectory;
             *
             *     // List all files in the directory relative to the main HTML file (e.g., index.html)
             *     console.log( appDir.listFiles() );
             *
             * Use the `{@link nwf.io.Directory#constructor new nwf.io.Directory}(directoryPath)` constructor to get an object for a specific directory.
             *
             * ### Working with the Wii U File System during debug
             *
             * When working on a CAT-DEV, the Wii U file system is emulated on the PC to make debugging easier.
             * Because of this, file read/write speeds will be slower and directory locations will be different than when the application is running on a production system.
             *
             * PC file system mappings _(Assumes $CAFE_BOOT_MODE=PCFS)_
             *
             * -   The #volAppDirectory --> `%Project Location%/app/`
             * -   The #appTempDirectory --> `%Project Location%/save/common/temp/`
             * -   The #appCommonSaveDirectory --> `%Project Location%/save/common/`
             * -   The #appAccountSaveDirectory --> `%Project Location%/save/800000xx/` _(where xx is an account slot index)_
             * -   The AOC Directory (obtainable via {@link nwf.aoc.AOCTitle#getDirectory getDirectory()} method on an AOC Title) --> `%Project Location%/aoc/1234567/` _(example of a title with a Unique ID: 0x12345 and Variation: 67)_
             *
             * __Note:__ The File I/O feature must be enabled in the Features page of Project Settings for the feature to work and for `nwf.io` to be defined.
             *
             * @class nwf.io.Directory
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            function Directory(directoryPath) {
                /**
                 * Creates a new Directory object with the specified path.
                 *
                 * @since 1.0
                 * @method constructor
                 * @param {String} [directoryPath=nwf.io.Directory.appRootDirectory]
                 * The path to the desired directory. The directory must already exist. If this parameter is not specified, the new object will default to the root directory of the application.
                 */
                return null;
            }
            Object.defineProperty(Directory.prototype, "directoryName", {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Name of the directory
                 * @property {String} [directoryName='']
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    // return path.split('/')[path.split('/')-1] ? path.split('/')[path.split('/')-1] : path.split('/')[path.split('/')-2] || path.split('/')[0];
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Directory.prototype, "readonly", {
                /**
                 * Returns `true` if the directory is read-only, or `false` if it is not.
                 * @property {Boolean} [readonly=false]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Directory.prototype, "parentDirectory", {
                /**
                 * Returns the directory that this directory resides in.
                 * @property {nwf.io.Directory} [parentDirectory]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return null; // Set by getDirectory();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Directory.prototype, "systemPath", {
                /**
                 * Full system path of this directory.
                 * @property {String} [systemPath='']
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    // return path.slice(0,5) == 'file:' ? path : ''; // Set by getDirectory();
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Creates a subdirectory with the specified name. Returns a reference to the new directory. As a result, directory creation can be chained.
             * @param {string} newDirectoryName The name for the new directory.
             * @since 1.0
             * @returns {nwf.io.Directory}
             */
            Directory.prototype.create = function (newDirectoryName) {
                return '[Directory]';
            };
            /**
             * Renames the directory.
             * @param {string} newDirectoryName The new name for the directory.
             * @since 1.0
             */
            Directory.prototype.rename = function (newDirectoryName) {
                return null;
            };
            /**
             * Removes a sub-directory or File.
             * @param {String} name The name of the directory or file to remove. For files, the name must include the extension.
             * @since 1.0
             */
            Directory.prototype.remove = function (name) {
                return null; //async
            };
            /**
             * Returns a list of files in this directory.
             * @returns {nwf.io.File[]}
             * @since 1.0
             */
            Directory.prototype.listFiles = function () {
                // return [nwf.io.File.createTempFile(),nwf.io.File.createTempFile()];
                return [];
            };
            /**
             * Returns a list of directories in this directory.
             * @returns {nwf.io.Directory[]}
             * @since 1.0
             */
            Directory.prototype.listSubDirectories = function () {
                // return [self.getDirectory('testDir'), self.getDirectory('testDir2')]};
                return [];
            };
            Object.defineProperty(Directory.prototype, "appRootDirectory", {
                //-------------------------------------------------------------------------
                // STATIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Application directory. This is the root directory of the application.
                 *
                 * Note: This differs from `#volAppDirectory`, as the path of this directory is relative to the main HTML file executed by Nintendo Web Framework.
                 * The `#volAppDirectory` is the topmost directory on the main volume.
                 * @since 1.0
                 * @static
                 * @readonly
                 * @property {nwf.io.Directory} [appRootDirectory]
                 */
                // public static appRootDirectory = new nwf.io.Directory("/vol/content/app/");
                get: function () {
                    return new Directory("/vol/content/app/");
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Directory.prototype, "volAppDirectory", {
                /**
                 * Root directory of the content volume. This is the root directory of all content accessible in Nintendo Web Framework.
                 *
                 * __Note:__ This maps to _`%Project Location%/content/app/`_.
                 * @since 1.0
                 * @static
                 * @readonly
                 * @property {nwf.io.Directory} [volAppDirectory]
                 */
                // public static volAppDirectory = new nwf.io.Directory("/vol/content/app/");
                get: function () {
                    return new Directory("/vol/content/app/");
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Directory.prototype, "appTempDirectory", {
                /**
                 * Temporary directory. The contents of this directory are deleted between application sessions.
                 *
                 * __Note:__ This maps to _`%Project Location%/save/common/temp/`_.
                 * @since 1.0
                 * @readonly
                 * @static
                 * @property {nwf.io.Directory} [appTempDirectory]
                 */
                // public static appTempDirectory = new nwf.io.Directory("/vol/save/common/temp/");
                get: function () {
                    return new Directory("/vol/save/common/temp/");
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Directory.prototype, "appCommonSaveDirectory", {
                /**
                 * Common save directory. The contents of this directory are visible from all of the console's accounts.
                 *
                 * __Note:__ This maps to _`%Project Location%/save/common/`_.
                 * @since 1.0
                 * @readonly
                 * @static
                 * @property {nwf.io.Directory} [appCommonSaveDirectory]
                 */
                // public static appCommonSaveDirectory = new nwf.io.Directory("/vol/save/common/");
                get: function () {
                    return new Directory("/vol/save/common/");
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Directory.prototype, "appAccountSaveDirectory", {
                /**
                 * Account save directory. The contents of this directory are visible only from the account that is currently logged in.
                 *
                 * __Note:__ This maps to _`%Project Location%/save/account/`_.
                 * @since 1.0
                 * @readonly
                 * @static
                 * @property {nwf.io.Directory} [appAccountSaveDirectory]
                 */
                // public static appAccountSaveDirectory = new nwf.io.Directory("/vol/save/");
                get: function () {
                    return new Directory("/vol/save/");
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // STATIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Removes a directory and all of its contents.
             *
             * @method removeDirectory
             * @static
             * @param {String} directoryPath The full path to the directory to be removed.
             * @since 1.0
             */
            Directory.removeDirectory = function (directoryPath) {
                return null;
            };
            return Directory;
        })();
        io.Directory = Directory;
    })(io = nwf.io || (nwf.io = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var IOEvent = (function (_super) {
            __extends(IOEvent, _super);
            /**
             * An `IOEvent` object is triggered when an asynchronous method is called from the Nintendo Web Framework IO API.
             *
             * @see {@link nwf.io.File}
             * @class nwf.events.IOEvent
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function IOEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(IOEvent.prototype, "data", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * Data contents of the file. This will be a `Blob` when `{@link nwf.io.File#read read}` was called or an `Array` when `{@link nwf.io.File#readAsTextureBundle readAsTextureBundle}` was called. Only set when a file read is complete (when `#READ_COMPLETE` is fired). Otherwise this value is {@link null}.
                 * @property {Blob | Array} [data=null]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IOEvent.prototype, "errorID", {
                /**
                 * Integer value of the error that triggered the event.
                 * @property {int} [errorID=IOError.ERROR_NONE]
                 * @readonly
                 * @since 1.0
                 * @see nwf.io.IOError.ERROR_NONE
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IOEvent.prototype, "READ_COMPLETE", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when a file read is successful. Triggered by [nwf.io.File.read](#!/api/nwf.io.File-method-read).
                 * This event will add the `#data` property to the event object.
                 * @property {string} [READ_COMPLETE='readComplete']
                 * @since 1.0
                 * @static @constant
                 */
                get: function () {
                    return 'readComplete';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IOEvent.prototype, "SAVE_COMPLETE", {
                // public static READ_COMPLETE: string = 'readComplete';
                /**
                 * Dispatched when a file save is successful. Triggered by [nwf.io.File.save](#!/api/nwf.io.File-method-save).
                 * @property {string} [SAVE_COMPLETE='saveComplete']
                 * @since 1.0
                 * @static @constant
                 */
                get: function () {
                    return 'saveComplete';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(IOEvent.prototype, "ERROR", {
                // public static SAVE_COMPLETE: string = 'saveComplete';
                /**
                 * Dispatched when an error occurs during any file operations.
                 * @property {string} [ERROR='error']
                 * @since 1.0
                 * @static @constant
                 */
                get: function () {
                    return 'error';
                },
                enumerable: true,
                configurable: true
            });
            return IOEvent;
        })(events.Event);
        events.IOEvent = IOEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/// <reference path="./IOError.ts" />
/// <reference path="../events/IOEvent.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var io;
    (function (io) {
        var File = (function (_super) {
            __extends(File, _super);
            /**
             * The `File` class object provides functions for interacting with files on the file system.
             *
             * The `File` class dispatches the following events:
             *
             * - nwf.events.IOEvent.ERROR
             * - nwf.events.IOEvent.READ_COMPLETE
             * - nwf.events.IOEvent.SAVE_COMPLETE
             *
             * Use the `{@link nwf.io.File#constructor new nwf.io.File}(fileString, dirObj)` constructor to get an object for a specific file.
             *
             * __Note:__ The File I/O feature must be enabled in the Features page of Project Settings for the feature to work and for `nwf.io` to be defined.
             *
             * @class nwf.io.File
             * @extends nwf.events.EventDispatcher
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            function File() {
                /**
                 * Creates a new `File` object with the specified name and directory.
                 *
                 * @since 1.0
                 * @method constructor
                 * @param {String} fileName
                 * The name of the desired file, including extension.
                 * @param {nwf.io.Directory} dirObj
                 * A nwf.io.Directory object corresponding to the desired directory.
                 */
                _super.call(this);
            }
            Object.defineProperty(File.prototype, "fileName", {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Name of the file.
                 * @property {String} [fileName='']
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    // return path.split('.')[0];
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(File.prototype, "fileExtension", {
                /**
                 * Extension of the file.
                 * @property {String} [fileExtension='']
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    // return path.split('.')[path.split('.').length-1];
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(File.prototype, "dateCreated", {
                /**
                 * File creation date.
                 * @property {Date} [dateCreated]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return new Date();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(File.prototype, "dateModified", {
                /**
                 * File modification date.
                 * @property {Date} [dateModified]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return new Date();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(File.prototype, "readonly", {
                /**
                 * Returns `true` if the file is read-only, or `false` if it is not.
                 * @property {Boolean} [readonly=false]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(File.prototype, "exists", {
                /**
                 * Whether the file exists or not.
                 * Returns `true` if the path exists and points to a file, or `false` otherwise.
                 * @property {Boolean} [exists=false]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(File.prototype, "size", {
                /**
                 * File size in bytes.
                 * @property {uint32} [size=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(File.prototype, "parentDirectory", {
                /**
                 * The directory that this file resides in.
                 * @property {nwf.io.Directory} [parentDirectory]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    // return baseDirectory ? baseDirectory : nwf.io.Directory.appRootDirectory; // Not accurate with expected behavior
                    return {};
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(File.prototype, "systemPath", {
                /**
                 * Full system path of this file.
                 * @property {String} [systemPath='']
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    // return path == self.parentDirectory.systemPath ? path : self.parentDirectory.systemPath + path; // Debug note: need to validate and convert path param...
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Rename the file
             * @param {string} newFileName The new name for the file including the file extension.
             * @returns {Number} An error code defined by `nwf.io.IOError enum`.
             * @since 1.0
             */
            File.prototype.rename = function (newFileName) {
                return 0;
            };
            /**
             * Removes the File from the filesystem.
             * @returns {Number} An error code defined by `nwf.io.IOError enum`.
             * @since 1.0
             */
            File.prototype.remove = function () {
                return 0; //async
            };
            /**
             * Initializes a `Read` of the contents of the file.
             * The contents of the file will be returned as a `Blob` in a `{@link nwf.events.IOEvent#READ_COMPLETE READ_COMPLETE}` event.
             * If a listener for the `{@link nwf.events.IOEvent#READ_COMPLETE READ_COMPLETE}` event has not been added to the target before calling this method, `{@link nwf.io.IOError#ERROR_NOLISTENER ERROR_NOLISTENER}` will be returned.
             *
             * **Note** It is not recommended to read more than ten files at once. Doing so may cause the application to run out of memory.
             *
             * @param {Object} [options] Object specifiying what options (if any) to use when reading the file.
             * @param {String} [options.type] String that specifies the `MIME` type of the data. This will be used to determine which memory heap the data should use. This value will be passed to the `type` property of the `Blob` returned with the `{@link nwf.events.IOEvent#READ_COMPLETE READ_COMPLETE}` event.
             * @param {String} [options.encoding] A string specifing the type of encoding to use when decompressing a compressed file. Currently the only supported encoding is '`gzip`'.
             * @returns {Number} An error code defined by nwf.io.IOError enum.
             * @since 1.1
             */
            File.prototype.read = function (options) {
                return 0; //async
            };
            /**
            * Initializes a `Read` of the contents of the file and assumes it is an array of textures. This can save memory use by decoding the data straight into an array rather than using an intermediate `Blob` like the `#read` method.
            * The contents of the file will be returned as an `Array` in a `{@link nwf.events.IOEvent#READ_COMPLETE READ_COMPLETE}` event.
            * If a listener for the `{@link nwf.events.IOEvent#READ_COMPLETE READ_COMPLETE}` event has not been added to the target before calling this method, `{@link nwf.io.IOError#ERROR_NOLISTENER ERROR_NOLISTENER}` will be returned.
            * @param {Object} [options] Object specifiying what options (if any) to use when reading the file.
            * @param {String} [options.encoding] A string specifing the type of encoding to use when decompressing a compressed file. Currently the only supported encoding is '`gzip`'.
            * @returns {Number} An error code defined by nwf.io.IOError enum.
            * @since 1.8.2
            */
            File.prototype.readAsTextureBundle = function (options) {
                return 0; //async
            };
            /**
             * Saves the contents of the specified {@link Blob} data to the file.
             * @param {Blob} data The data to save to the file.
             * @returns {Number} An error code defined by `nwf.io.IOError enum`.
             * @since 1.1
             */
            File.prototype.save = function (data) {
                return 0; //async
            };
            // Old APIs
            /** @removed 1.1 Removed from API. Use nwf.io.File.read instead.*/
            File.prototype.readAsUint8Array = function () {
                return 0; //async
            };
            /** @removed 1.1 Removed from API. Use nwf.io.File.save instead.*/
            File.prototype.saveAsUint8Array = function (data) {
                return 0; //async
            };
            //-------------------------------------------------------------------------
            // STATIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Removes a File from the file-system.
             *
             * @method removeFile
             * @param {String} filePath The full path to the file to be removed.
             * @returns {Number} An error code defined by `nwf.io.IOError enum`.
             * @since 1.0
             * @static
             */
            File.removeFile = function (filePath) {
                return 0;
            };
            return File;
        })(nwf.events.EventDispatcher);
        io.File = File;
    })(io = nwf.io || (nwf.io = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var CameraEvent = (function (_super) {
            __extends(CameraEvent, _super);
            /**
             * Defines events dispatched by the `Camera` class.
             *
             * @class nwf.events.CameraEvent
             * @see {@link nwf.media.Camera}
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function CameraEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(CameraEvent.prototype, "READY", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when the camera is initialized and ready to stream video to the surface.
                 * @property {String} [READY='ready']
                 * @static @constant
                 * @since 1.0
                 */
                // public static READY: string = 'ready';
                get: function () {
                    return 'ready';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CameraEvent.prototype, "OPEN", {
                /**
                 * Dispatched when the camera stream is open and streaming video to the surface.
                 * @property {String} [OPEN='open']
                 * @static @constant
                 * @since 1.0
                 */
                // public static OPEN: string = 'open';
                get: function () {
                    return 'open';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CameraEvent.prototype, "CLOSE", {
                /**
                 * Dispatched when the camera stream is closed and the surface is no longer updated.
                 * @property {String} [CLOSE='close']
                 * @static @constant
                 * @since 1.0
                 */
                // public static CLOSE: string = 'close';
                get: function () {
                    return 'close';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CameraEvent.prototype, "EXIT", {
                /**
                 * Dispatched when the camera is exited and de-initialized.
                 * @property {String} [EXIT='exit']
                 * @static @constant
                 * @since 1.0
                 */
                // public static EXIT: string = 'exit';
                get: function () {
                    return 'exit';
                },
                enumerable: true,
                configurable: true
            });
            return CameraEvent;
        })(events.Event);
        events.CameraEvent = CameraEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/// <reference path="../events/CameraEvent.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var media;
    (function (media) {
        var Camera = (function (_super) {
            __extends(Camera, _super);
            /**
             * Class for working with a camera image stream. Currently the only supported camera is the camera available on the Wii U GamePad.
             *
             * __Note:__ The Camera feature must be enabled in the Features page of Project Settings for the feature to work and for `nwf.media.Camera` to be defined.
             *
             *      // Get the canvas context to draw to.
             *      var ctx = document.getElementById('canvas').getContext('2d');
             *
             *      // Set up the GamePad's Camera.
             *      gpCamera = nwf.media.Camera.getCamera(0);
             *      var camCapabilities = gpCamera.capabilities;
             *      var frameRates = camCapabilities.frameRates;
             *      var camDimensions = camCapabilities.resolutions[0];
             *
             *      // Set camera ready event handler.
             *      gpCamera.addEventListener(nwf.events.CameraEvent.READY, function(evt) {
             *          gpCamera.open();
             *      }, this);
             *
             *      // Set camera open event handler.
             *      gpCamera.addEventListener(nwf.events.CameraEvent.OPEN, function(evt) {
             *          webkitRequestAnimationFrame(draw); // Start the animation loop.
             *      }, this);
             *
             *      // Now that the event listeners are defined initialize the camera
             *      gpCamera.initialize(frameRates[frameRates.length - 1]);
             *
             *      function draw() {
             *          // drawImageStream is a Nintendo Web Framework only method that allows us to draw the stream easily.
             *          ctx.drawImageStream(gpCamera.imageStream, 0, 0, camDimensions.width, camDimensions.height);
             *          webkitRequestAnimationFrame(draw);
             *      }
             * See `#imageStream` and [drawImageStream](#!/api/CanvasRenderingContext2D-method-drawImageStream) for details.
             *
             * The `Camera` class dispatches the following events:
             *
             * - nwf.events.CameraEvent.CLOSE
             * - nwf.events.CameraEvent.EXIT
             * - nwf.events.CameraEvent.OPEN
             * - nwf.events.CameraEvent.READY
             *
             * @class nwf.media.Camera
             * @extends nwf.events.EventDispatcher
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            /**
             * @private
             * The `new` method is not used to get an instance of a `Camera` object; use `#getCamera` instead.
             * @since 1.0
             * @method constructor
             */
            function Camera() {
                _super.call(this);
            }
            Object.defineProperty(Camera.prototype, "id", {
                //---------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //---------------------------------------------------------------------
                //-----------------------------
                // Wii Remote
                //-----------------------------
                /**
                 * The reference ID of the camera.
                 * @property {int} [id=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Camera.prototype, "name", {
                /**
                 * The name of the current camera, as returned by the camera hardware.
                 * @property {String} [name='CAMERA_0']
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 'CAMERA_0';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Camera.prototype, "currentFPS", {
                /**
                 * The current frame rate of the camera ( 15 | 30 ), set when initializing the camera.
                 * @property {int} [currentFPS=15]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 15;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Camera.prototype, "capabilities", {
                /**
                 * The capabilities object of the camera.
                 *
                 * Capabilities Object:
                 *
                 *     Capabilities = {
                 *      frameRates:[15, 30],        // Array of supported capture frame rates.
                 *      resolutions:[               // A list of supported resolutions as {width, height} objects.
                 *          {width:640, height:480} // The width and height of the camera resolution in pixels.
                 *      ]
                 *     };
                 * @property {Object} [capabilities={ frameRates:[15,30], resolutions:[{width:640, height:480}] }]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return { frameRates: [15, 30], resolutions: [{ width: 640, height: 480 }] };
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Camera.prototype, "imageStream", {
                /**
                 * Pointer (ID) to the live image stream. Use [drawImageStream](#!/api/CanvasRenderingContext2D-method-drawImageStream) to render to the canvas element.
                 * @property {uint32} [imageStream=null]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Camera.prototype, "isReady", {
                /**
                 * Returns `true` if the camera is initialized and ready to begin streaming captured video; returns `false` otherwise.
                 * @property {Boolean} [isReady=false]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            //---------------------------------------------------------------------
            // PUBLIC METHODS
            //---------------------------------------------------------------------
            /**
             * Initializes the camera and prepares it for video capture.
             * @param {int} [frameRate=15] The capture frame rate.
             * @since 1.0
             */
            Camera.prototype.initialize = function (frameRate) {
                return null;
            };
            /**
             * Starts the video stream and begins writing to the <code>ImageData</code> buffer.
             * @since 1.0
             */
            Camera.prototype.open = function () {
                return null;
            };
            /**
             * Resumes updating the <code>ImageData</code> buffer.
             * @since 1.0
             */
            Camera.prototype.play = function () {
                return null;
            };
            /**
             * Stops updating the <code>ImageData</code> buffer, pausing the image.
             * @since 1.0
             */
            Camera.prototype.pause = function () {
                return null;
            };
            /**
             * Stops the video stream. The <code>ImageData</code> buffer will no longer be updated.
             * @since 1.0
             */
            Camera.prototype.close = function () {
                return null;
            };
            /**
             * Calling this function de-initializes the video decode hardware and frees the `Camera` instance.
             * @since 1.0
             */
            Camera.prototype.exit = function () {
                return null;
            };
            /**
             * Converts `Camera` instance to `{@link String}`.
             * @since 1.0
             * @returns {String}
             */
            Camera.prototype.toString = function () {
                return '[Camera CAMERA_0]';
            };
            /**
             * Returns value of `Camera` instance as a `{@link String}`.
             * @since 1.0
             * @returns {String}
             */
            Camera.prototype.valueOf = function () {
                return '[Camera CAMERA_0]';
            };
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Returns a reference to a <code>Camera</code> object for capturing video. Returns the <code>Camera</code> singleton instance of camera 0 by default.
             *
             * Use <code>#getAvailableCameras()</code> to get a list of supported cameras.
             * @method getCamera
             * @param {Number} [id=0] Only supported value.
             * @returns {nwf.media.Camera} The <code>Camera</code> singleton instance of a specific camera.
             * @since 1.0
             * @static
             */
            Camera.getCamera = function (id) {
                return new this.s_camera;
            };
            /**
             * Method to test for class availability.
             * @method isSupported
             * @returns {Boolean} Returns `false` if the class is not supported, or `true` if the class is available.
             * @since 1.0
             * @static
             */
            Camera.isSupported = function () {
                return false;
            };
            /**
             * Returns an Array of available `Camera` objects.
             * @method getAvailableCameras
             * @returns {Array} List of available cameras.
             * @since 1.0
             * @static
             */
            Camera.getAvailableCameras = function () {
                return [new this.s_camera];
            };
            //-------------------------------------------------------------------------
            // STATIC PRIVATE PROPERTIES
            //-------------------------------------------------------------------------
            /** @ignore */
            Camera.s_camera = Camera;
            return Camera;
        })(nwf.events.EventDispatcher);
        media.Camera = Camera;
    })(media = nwf.media || (nwf.media = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var MicrophoneEvent = (function (_super) {
            __extends(MicrophoneEvent, _super);
            /**
             * Defines events dispatched by the `Microphone` class.
             *
             * @see {@link nwf.media.Microphone}
             * @class nwf.events.MicrophoneEvent
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function MicrophoneEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(MicrophoneEvent.prototype, "READY", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when the microphone is initialized and ready to `{@link nwf.media.Microphone#open open()}` the audio buffer.
                 * @property {String} [READY='ready']
                 * @static @constant
                 * @since 1.2
                 */
                get: function () {
                    return 'ready';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MicrophoneEvent.prototype, "OPEN", {
                // public static READY: string = 'ready';
                /**
                 * Dispatched when the microphone is open and streaming audio to the audio buffer.
                 * @property {String} [OPEN='open']
                 * @static @constant
                 * @since 1.2
                 */
                get: function () {
                    return 'open';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MicrophoneEvent.prototype, "CLOSE", {
                // public static OPEN: string = 'open';
                /**
                 * Dispatched when the microphone is closed and the audio buffer is no longer updated.
                 * @property {String} [CLOSE='close']
                 * @static @constant
                 * @since 1.2
                 */
                get: function () {
                    return 'close';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MicrophoneEvent.prototype, "EXIT", {
                // public static CLOSE: string = 'close';
                /**
                 * Dispatched when the microphone is exited and de-initialized.
                 * @property {String} [EXIT='exit']
                 * @static @constant
                 * @since 1.2
                 */
                get: function () {
                    return 'exit';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MicrophoneEvent.prototype, "CONNECTED", {
                // public static EXIT: string = 'exit';
                /**
                 * Dispatched when a microphone is connected to the Wii U.
                 *
                 * @property {String} [CONNECTED='connected']
                 * @since 1.2
                 * @static @constant
                 */
                get: function () {
                    return 'connected';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MicrophoneEvent.prototype, "DISCONNECTED", {
                // public static CONNECTED: string = 'connected';
                /**
                 * Dispatched when a microphone is disconnected from the Wii U.
                 *
                 * @property {String} [DISCONNECTED='disconnected']
                 * @since 1.2
                 * @static @constant
                 */
                get: function () {
                    return 'disconnected';
                },
                enumerable: true,
                configurable: true
            });
            return MicrophoneEvent;
        })(events.Event);
        events.MicrophoneEvent = MicrophoneEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var media;
    (function (media) {
        /**
         * `MicrophoneType` constants.
         *
         * @enum nwf.media.MicrophoneType
         * @author Ryan Lynd
         * @author Shawn Gates
         */
        media.MicrophoneType = {
            /**
             *
             * @type String
             * @since 1.2
             * @static @constant */
            GAMEPAD: 'gamepad',
            /**
             *
             * @type String
             * @since 1.2
             * @static @constant */
            USB: 'usb'
        };
    })(media = nwf.media || (nwf.media = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var media;
    (function (media) {
        /**
         * `MicrophoneError` constants for `Microphone` method return values and the `errorID` property of a `MicrophoneEvent`.
         *
         * @enum nwf.media.MicrophoneError
         * @author Ryan Lynd
         * @author Shawn Gates
         */
        media.MicrophoneError = {
            /**
             * No error occurred performing the requested function.
             * @property {int} [=0]
             * @since 1.2
             * @static @constant */
            NONE: 0,
            /**
             * This code is returned in the context of setting or getting state. It means that the requested sub-function is not supported. It is an indication of a program error.
             * @property {int} [=-1]
             * @since 1.2
             * @static @constant */
            NOT_SUP: -1,
            /**
             * This code is returned whenever an invalid argument is provided in a microphone API call. It is an indication of a program error.
             * @property {int} [=-2]
             * @since 1.2
             * @static @constant */
            INV_ARG: -2,
            /**
             * This code is returned whenever the internal driver state does not permit the requested function to be performed. It is an indication of a program error.
             * @property {int} [=-3]
             * @since 1.2
             * @static @constant */
            INV_STATE: -3,
            /**
             * Internal error, not returned by any API.
             * @property {int} [=-4]
             * @since 1.2
             * @static @constant */
            NO_MEM: -4,
            /**
             * This error code is returned when a function such as `nwf.media.Microphone#open()` is called more than once without closing it first. This logic also applies to `nwf.media.Microphone#initialize()`. It is an indication of a program error.
             * @property {int} [=-5]
             * @since 1.2
             * @static @constant */
            ALREADY_OPEN: -5,
            /**
             * This error code is returned when a USB microphone API is called out of sequence. It is an indication of a program error.
             * @property {int} [=-6]
             * @since 1.2
             * @static @constant */
            NOT_OPEN: -6,
            /**
             * Similar to #NOT_OPEN, but indicating that the driver stack is not yet initialized. It is an indication of a program error.
             * @property {int} [=-7]
             * @since 1.2
             * @static @constant */
            NOT_INIT: -7,
            /**
             * This error code indicates that the connection with the GamePad has been lost.
             * @property {int} [=-8]
             * @since 1.2
             * @static @constant */
            NOT_CONNECTED: -8,
            /**
             * Not typically returned. It is returned if the provided ring buffer is too small.
             * @property {int} [=-85]
             * @since 1.2
             * @static @constant */
            INIT_BUFF_SIZE: -85,
        };
    })(media = nwf.media || (nwf.media = {}));
})(nwf || (nwf = {}));
/// <reference path="../events/MicrophoneEvent.ts" />
/// <reference path="./MicrophoneType.ts" />
/// <reference path="./MicrophoneError.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var media;
    (function (media) {
        var Microphone = (function (_super) {
            __extends(Microphone, _super);
            /**
             * Class for working with the audio input from a Microphone.
             *
             * __Note:__ The Microphone feature must be enabled in the Features page of Project Settings for the feature to work and for `nwf.media.Microphone` to be defined.
             *
             * The `Microphone` class dispatches the following events:
             *
             * - nwf.events.MicrophoneEvent.CLOSE
             * - nwf.events.MicrophoneEvent.EXIT
             * - nwf.events.MicrophoneEvent.OPEN
             * - nwf.events.MicrophoneEvent.READY
             * - nwf.events.MicrophoneEvent.CONNECTED
             * - nwf.events.MicrophoneEvent.DISCONNECTED
             *
             * @class nwf.media.Microphone
             * @extends nwf.events.EventDispatcher
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            /**
             * @private
             * The `new` method is not used to get an instance of a `Microphone` object; use `#getMicrophone` instead.
             * @method constructor
             * @since 1.0
             */
            function Microphone() {
                _super.call(this);
            }
            Object.defineProperty(Microphone.prototype, "id", {
                //---------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //---------------------------------------------------------------------
                /**
                 * The reference ID of the microphone.
                 * @property {int} [id=0]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return 0; // 0 based index
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Microphone.prototype, "type", {
                /**
                 * The type of microphone object.
                 * @see {@link nwf.media.MicrophoneType}
                 * @property {String} [type=nwf.media.MicrophoneType.GAMEPAD]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return nwf.media.MicrophoneType.GAMEPAD;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Microphone.prototype, "name", {
                /**
                 * The name of the current microphone, as returned by the microphone hardware.
                 * @property {String} [name='']
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return ''; //E.G. "gamepad_0 or usb_[pid]"
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Microphone.prototype, "isReady", {
                /**
                 * Returns `true` once the microphone is initialized and ready to begin streaming captured audio; returns `false` otherwise.
                 * @property {Boolean} [isReady=false]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Microphone.prototype, "gain", {
                /**
                 * The current Gain value of the Microphone hardware in dB.
                 * @readonly
                 * @property {Number} [gain=10]
                 * @since 1.2
                 */
                get: function () {
                    return 10;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Microphone.prototype, "minGain", {
                /**
                 * Minimum Gain value supported by the Microphone hardware in dB.
                 * @readonly
                 * @property {Number} [minGain=0]
                 * @since 1.2
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Microphone.prototype, "maxGain", {
                /**
                 * Maximum Gain value supported by the Microphone hardware in dB.
                 * @readonly
                 * @property {Number} [maxGain=25]
                 * @since 1.2
                 */
                get: function () {
                    return 25;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Microphone.prototype, "echoCancellation", {
                /**
                 * Returns `true` if the Microphone's echo cancellation is on, or `false` if it is off.
                 *
                 * __Note:__ Currently only supported on the GamePad Microphone. A Microphone that does not support this feature will always return `false`.
                 * @readonly
                 * @property {Boolean} [echoCancellation=false]
                 * @since 1.2
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            //---------------------------------------------------------------------
            // PUBLIC METHODS
            //---------------------------------------------------------------------
            /**
             * Initializes the microphone and prepares it for audio capture.
             * @since 1.2
             */
            Microphone.prototype.initialize = function () {
                return null;
            };
            /**
             * Starts the audio stream and begins writing to the internal ring buffer.
             *
             * _CAUTION: Microphone must be initialized before calling this function._
             *
             * @returns {int} Error status code.
             * @see {@link nwf.media.MicrophoneError}
             * @since 1.2
             */
            Microphone.prototype.open = function () {
                return 0;
            };
            /**
             * Creates a Web Audio source node to be used in audio routing with the Web Audio API.
             *
             * __CAUTION:__ _Microphone must be opened before calling this function._
             *
             * @param {AudioContext} audioContext The AudioContext (Web Audio API) to associate the source node with.
             * @returns {AudioSourceNode} Web Audio source node.
             * @see [AudioContext](http://www.w3.org/TR/webaudio/#AudioContext-section)
             * @see [AudioSourceNode](http://www.w3.org/TR/webaudio/#AudioSourceNode-section)
             * @since 1.2
             */
            Microphone.prototype.createAudioSource = function (audioContext) {
                return null;
            };
            /**
             * Stops the audio stream. The internal ring buffer will no longer be updated.
             *
             * __CAUTION:__ _Microphone must be initialized before calling this function._
             * @returns {int} Error status code.
             * @see {@link nwf.media.MicrophoneError}
             * @since 1.2
             */
            Microphone.prototype.close = function () {
                return 0;
            };
            /**
             * Calling this function will de-initialize the microphone hardware and free the memory used by the internal drivers.
             * @returns {int} Error status code.
             * @see {@link nwf.media.MicrophoneError}
             * @since 1.2
             */
            Microphone.prototype.exit = function () {
                return 0;
            };
            /**
             * Sets the programmable options of the Microphone.
             *
             * _This function operates in a separate thread and the applied options may take a few milliseconds to be applied. Reading the value of `#gain` or `#echoCancellation` immediately after calling this function will not necessarily reflect the supplied gain value._
             *
             * __CAUTION:__ _Microphone must be opened before calling this function._
             *
             * @param {Object} options Object containing values to set the configurable options of the Microphone hardware.
             * @param {Number} [options.gain] Microphone gain value in units of dB.
             * @param {Boolean} [options.echoCancellation=false] When set to `true`, echo cancellation on the microphone is enabled. When set to `false`, it is disabled.
             * @returns {int} Error status code.
             * @see {@link nwf.media.MicrophoneError}
             * @since 1.2
             */
            Microphone.prototype.registerState = function (options) {
                return 0;
            };
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Method to test for class availability.
             *
             * @method isSupported
             * @returns {Boolean} Returns `false` if the class is not supported, or `true` if the class is available.
             * @since 1.2
             * @static
             */
            Microphone.isSupported = function () {
                return false;
            };
            /**
             * Returns an Array of available `Microphone` objects.
             *
             * @method getAvailableMicrophones
             * @returns {nwf.media.Microphone[]} List of all available microphones.
             * @since 1.2
             * @static
             */
            Microphone.getAvailableMicrophones = function () {
                return [new this.s_microphone];
            };
            /**
             * Returns a `Microphone` instance based on either a Microphone's ID or the type of `Microphone` object requested.
             * @method getMicrophone
             * @see {@link nwf.media.MicrophoneType}
             * @see {@link nwf.media.Microphone#id nwf.media.Microphone.id}
             * @param  {Number|String} [id_or_type=0] the ID or type of a `Microphone` object to return. __Note:__ if more than one Microphone of the type is available only the first in the list is returned.
             * @returns {nwf.media.Microphone}
             * @static
             */
            Microphone.getMicrophone = function (id_or_type) {
                return new this.s_microphone;
            };
            //-------------------------------------------------------------------------
            // STATIC PRIVATE PROPERTIES
            //-------------------------------------------------------------------------
            /** @ignore */
            Microphone.s_microphone = Microphone;
            return Microphone;
        })(nwf.events.EventDispatcher);
        media.Microphone = Microphone;
    })(media = nwf.media || (nwf.media = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var MiiverseEvent = (function (_super) {
            __extends(MiiverseEvent, _super);
            /**
             * Events dispatched by the `Miiverse` class.
             *
             * @see {@link nwf.mv.Miiverse}
             * @class nwf.events.MiiverseEvent
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function MiiverseEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(MiiverseEvent.prototype, "comments", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * The list of `{@link nwf.mv.MiiverseDownloadedComment comments}` returned from the server after a successful query.
                 * Only set when `nwf.events.MiiverseEvent.DOWNLOAD_COMMENT_SUCCESS` is dispatched.
                 * @property {Array} [comments=[]]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    // return [new nwf.mv.MiiverseDownloadedComment()];
                    return [];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "posts", {
                /**
                 * The list of `{@link nwf.mv.MiiverseDownloadedPost posts}` returned from the server after a successful query.
                 * Only set when `nwf.events.MiiverseEvent.DOWNLOAD_POST_SUCCESS` is dispatched.
                 * @property {Array} [posts=[]]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    // return [new nwf.mv.MiiverseDownloadedPost()];
                    return [];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "postID", {
                /**
                 * The `{@link nwf.mv.MiiverseDownloadedPost#id postID}` of the uploaded post.
                 * Only set when `nwf.events.MiiverseEvent.UPLOAD_POST_SUCCESS` is dispatched.
                 * @property {String} [postID='']
                 * @readonly
                 * @since 1.6
                 */
                get: function () {
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "communities", {
                /**
                 * The list of `{@link nwf.mv.MiiverseDownloadedCommunity communities }` returned from the server after a successful query.
                 * Only set when `nwf.events.MiiverseEvent.DOWNLOAD_COMMUNITY_SUCCESS` is dispatched.
                 * @property {Array} [communities=[]]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    // return [new nwf.mv.MiiverseDownloadedCommunity()];
                    return [];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "errorCode", {
                /**
                 * Error code that is set on a fail event. Helps tie the failed event to a nwf.events.SystemErrorEvent.
                 * @property {uint32} [errorCode=null]
                 * @readonly
                 * @since 1.3
                 * @see nwf.system.SystemErrorCode
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "uploadResult", {
                /**
                 * The `{@link nwf.mv.MiiverseUploadedPost MiiverseUploadedPost}` or `{@link nwf.mv.MiiverseUploadedComment MiiverseUploadedComment}` object of the post that was sent to the server.
                 * Only set when `nwf.events.MiiverseEvent.UPLOAD_POST_SUCCESS` or `nwf.events.MiiverseEvent.UPLOAD_COMMENT_SUCCESS` is dispatched.
                 * @property {nwf.mv.MiiverseUploadedPost|nwf.mv.MiiverseUploadedComment} [uploadResult=null]
                 * @readonly
                 * @since 1.7
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "users", {
                /**
                * An array of `nwf.mv.MiiverseDownloadedUserData` objects matching the result of the user data search.
                * Only set when `nwf.events.MiiverseEvent.DOWNLOAD_USER_DATA_LIST_SUCCESS` is dispatched.
                * @property {nwf.mv.MiiverseDownloadedUserData[]} [users=null]
                * @readonly
                * @since 1.8.1
                */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "DOWNLOAD_POST_SUCCESS", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#getPostList getPostList} of the {@link nwf.mv.Miiverse Miiverse} class is successful.
                 * @property {String} [DOWNLOAD_POST_SUCCESS='miiverseDownloadPostSuccess']
                 * @static @constant
                 * @since 1.0
                 */
                // public static DOWNLOAD_POST_SUCCESS: string = 'miiverseDownloadPostSuccess';
                get: function () {
                    return 'miiverseDownloadPostSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "DOWNLOAD_POST_FAILED", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#getPostList getPostList} of the {@link nwf.mv.Miiverse Miiverse} class fails.
                 * @property {String} [DOWNLOAD_POST_FAILED='miiverseDownloadPostFailed']
                 * @static @constant
                 * @since 1.0
                 */
                // public static DOWNLOAD_POST_FAILED: string = 'miiverseDownloadPostFailed';
                get: function () {
                    return 'miiverseDownloadPostFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "DOWNLOAD_COMMUNITY_SUCCESS", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#getCommunityList getCommunityList} of the {@link nwf.mv.Miiverse Miiverse} class is successful.
                 * @property {String} [DOWNLOAD_COMMUNITY_SUCCESS='miiverseDownloadCommunitySuccess']
                 * @static @constant
                 * @since 1.2
                 */
                // public static DOWNLOAD_COMMUNITY_SUCCESS: string = 'miiverseDownloadCommunitySuccess';
                get: function () {
                    return 'miiverseDownloadCommunitySuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "DOWNLOAD_COMMUNITY_FAILED", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#getCommunityList getCommunityList} of the {@link nwf.mv.Miiverse Miiverse} class fails.
                 * @property {String} [DOWNLOAD_COMMUNITY_FAILED='miiverseDownloadCommunityFailed']
                 * @static @constant
                 * @since 1.2
                 */
                // public static DOWNLOAD_COMMUNITY_FAILED: string = 'miiverseDownloadCommunityFailed';
                get: function () {
                    return 'miiverseDownloadCommunityFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "INITIALIZATION_SUCCESS", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#initialize initialize} of the {@link nwf.mv.Miiverse Miiverse} class is successful.
                 * @property {String} [INITIALIZATION_SUCCESS='miiverseInitializationSuccess']
                 * @static @constant
                 * @since 1.0
                 */
                // public static INITIALIZATION_SUCCESS: string = 'miiverseInitializationSuccess';
                get: function () {
                    return 'miiverseInitializationSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "INITIALIZATION_FAILED", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#initialize initialize} of the {@link nwf.mv.Miiverse Miiverse} class fails.
                 * @property {String} [INITIALIZATION_FAILED='miiverseInitializationFailed']
                 * @static @constant
                 * @since 1.0
                 */
                // public static INITIALIZATION_FAILED: string = 'miiverseInitializationFailed';
                get: function () {
                    return 'miiverseInitializationFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "UPLOAD_POST_SUCCESS", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#sendPost sendPost} of the {@link nwf.mv.Miiverse Miiverse} class is successful.
                 * @property {String} [UPLOAD_POST_SUCCESS='miiverseUploadPostSuccess']
                 * @static @constant
                 * @since 1.0
                 */
                // public static UPLOAD_POST_SUCCESS: string = 'miiverseUploadPostSuccess';
                get: function () {
                    return 'miiverseUploadPostSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "UPLOAD_POST_FAILED", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#sendPost sendPost} of the {@link nwf.mv.Miiverse Miiverse} class fails.
                 * @property {String} [UPLOAD_POST_FAILED='miiverseUploadPostFailed']
                 * @static @constant
                 * @since 1.0
                 */
                // public static UPLOAD_POST_FAILED: string = 'miiverseUploadPostFailed';
                get: function () {
                    return 'miiverseUploadPostFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "UPLOAD_COMMENT_SUCCESS", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#sendComment sendComment} of the {@link nwf.mv.Miiverse Miiverse} class is successful.
                 * @property {String} [UPLOAD_COMMENT_SUCCESS='miiverseUploadCommentSuccess']
                 * @static @constant
                 * @since 1.4
                 */
                // public static UPLOAD_COMMENT_SUCCESS: string = 'miiverseUploadCommentSuccess';
                get: function () {
                    return 'miiverseUploadCommentSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "UPLOAD_COMMENT_FAILED", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#sendComment sendComment} of the {@link nwf.mv.Miiverse Miiverse} class fails.
                 * @property {String} [UPLOAD_COMMENT_FAILED='miiverseUploadCommentFailed']
                 * @static @constant
                 * @since 1.4
                 */
                // public static UPLOAD_COMMENT_FAILED: string = 'miiverseUploadCommentFailed';
                get: function () {
                    return 'miiverseUploadCommentFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "DOWNLOAD_COMMENT_SUCCESS", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#getCommentList getCommentList} of the {@link nwf.mv.Miiverse Miiverse} class is successful.
                 * @property {String} [DOWNLOAD_COMMENT_SUCCESS='miiverseDownloadPostSuccess']
                 * @static @constant
                 * @since 1.4
                 */
                // public static DOWNLOAD_COMMENT_SUCCESS: string = 'miiverseDownloadCommentSuccess';
                get: function () {
                    return 'miiverseDownloadCommentSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "DOWNLOAD_COMMENT_FAILED", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#getCommentList getCommentList} of the {@link nwf.mv.Miiverse Miiverse} class fails.
                 * @property {String} [DOWNLOAD_COMMENT_FAILED='miiverseDownloadCommentFailed']
                 * @static @constant
                 * @since 1.4
                 */
                // public static DOWNLOAD_COMMENT_FAILED: string = 'miiverseDownloadCommentFailed';
                get: function () {
                    return 'miiverseDownloadCommentFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "DELETE_POST_SUCCESS", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#deletePost deletePost} of the {@link nwf.mv.Miiverse Miiverse} class is successful.
                 * @property {String} [DELETE_POST_SUCCESS='miiverseDeletePostSuccess']
                 * @static @constant
                 * @since 1.4.5
                 */
                // public static DELETE_POST_SUCCESS: string = 'miiverseDeletePostSuccess';
                get: function () {
                    return 'miiverseDeletePostSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "DELETE_POST_FAILED", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#deletePost deletePost} of the {@link nwf.mv.Miiverse Miiverse} class fails.
                 * @property {String} [DELETE_POST_FAILED='miiverseDeletePostFailed']
                 * @static @constant
                 * @since 1.4.5
                 */
                // public static DELETE_POST_FAILED: string = 'miiverseDeletePostFailed';
                get: function () {
                    return 'miiverseDeletePostFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "ADD_EMPATHY_SUCCESS", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#addEmpathy addEmpathy} of the {@link nwf.mv.Miiverse Miiverse} class is successful.
                 * @property {String} [ADD_EMPATHY_SUCCESS='miiverseAddEmpathySuccess']
                 * @static @constant
                 * @since 1.7
                 */
                // public static ADD_EMPATHY_SUCCESS: string = 'miiverseAddEmpathySuccess';
                get: function () {
                    return 'miiverseAddEmpathySuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "ADD_EMPATHY_FAILED", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#addEmpathy addEmpathy} of the {@link nwf.mv.Miiverse Miiverse} class fails.
                 * @property {String} [ADD_EMPATHY_FAILED='miiverseAddEmpathyFailed']
                 * @static @constant
                 * @since 1.7
                 */
                // public static ADD_EMPATHY_FAILED: string = 'miiverseAddEmpathyFailed';
                get: function () {
                    return 'miiverseAddEmpathyFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "REMOVE_EMPATHY_SUCCESS", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#removeEmpathy removeEmpathy} of the {@link nwf.mv.Miiverse Miiverse} class is successful.
                 * @property {String} [REMOVE_EMPATHY_SUCCESS='miiverseRemoveEmpathySuccess']
                 * @static @constant
                 * @since 1.7
                 */
                // public static REMOVE_EMPATHY_SUCCESS: string = 'miiverseRemoveEmpathySuccess';
                get: function () {
                    return 'miiverseRemoveEmpathySuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "REMOVE_EMPATHY_FAILED", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#removeEmpathy removeEmpathy} of the {@link nwf.mv.Miiverse Miiverse} class fails.
                 * @property {String} [REMOVE_EMPATHY_FAILED='miiverseRemoveEmpathyFailed']
                 * @static @constant
                 * @since 1.7
                 */
                // public static REMOVE_EMPATHY_FAILED: string = 'miiverseRemoveEmpathyFailed';
                get: function () {
                    return 'miiverseRemoveEmpathyFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "FOLLOW_USER_SUCCESS", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#followUser followUser} of the {@link nwf.mv.Miiverse Miiverse} class is successful.
                 * @property {String} [FOLLOW_USER_SUCCESS='miiverseFollowUserSuccess']
                 * @static @constant
                 * @since 1.7
                 */
                // public static FOLLOW_USER_SUCCESS: string = 'miiverseFollowUserSuccess';
                get: function () {
                    return 'miiverseFollowUserSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "FOLLOW_USER_FAILED", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#followUser followUser} of the {@link nwf.mv.Miiverse Miiverse} class fails.
                 * @property {String} [FOLLOW_USER_FAILED='miiverseFollowUserFailed']
                 * @static @constant
                 * @since 1.7
                 */
                // public static FOLLOW_USER_FAILED: string = 'miiverseFollowUserFailed';
                get: function () {
                    return 'miiverseFollowUserFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "UNFOLLOW_USER_SUCCESS", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#unfollowUser unfollowUser} of the {@link nwf.mv.Miiverse Miiverse} class is successful.
                 * @property {String} [UNFOLLOW_USER_SUCCESS='miiverseUnfollowUserSuccess']
                 * @static @constant
                 * @since 1.7
                 */
                // public static UNFOLLOW_USER_SUCCESS: string = 'miiverseUnfollowUserSuccess';
                get: function () {
                    return 'miiverseUnfollowUserSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "UNFOLLOW_USER_FAILED", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#unfollowUser unfollowUser} of the {@link nwf.mv.Miiverse Miiverse} class fails.
                 * @property {String} [UNFOLLOW_USER_FAILED='miiverseUnfollowUserFailed']
                 * @static @constant
                 * @since 1.7
                 */
                // public static UNFOLLOW_USER_FAILED: string = 'miiverseUnfollowUserFailed';
                get: function () {
                    return 'miiverseUnfollowUserFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "DOWNLOAD_USER_DATA_LIST_SUCCESS", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#downloadUserData downloadUserData} of the {@link nwf.mv.Miiverse Miiverse} class is successful.
                 * The `event` object returned with this event will contain a `#users` property with the results.
                 * @property {String} [DOWNLOAD_USER_DATA_LIST_SUCCESS='miiverseDownloadUserDataListSuccess']
                 * @static @constant
                 * @since 1.8.1
                 */
                // public static DOWNLOAD_USER_DATA_LIST_SUCCESS: string = 'miiverseDownloadUserDataListSuccess';
                get: function () {
                    return 'miiverseDownloadUserDataListSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseEvent.prototype, "DOWNLOAD_USER_DATA_LIST_FAILED", {
                /**
                 * Dispatched when a call made to {@link nwf.mv.Miiverse#downloadUserData downloadUserData} of the {@link nwf.mv.Miiverse Miiverse} class fails.
                 * @property {String} [DOWNLOAD_USER_DATA_LIST_FAILED='miiverseDownloadUserDataListFailed']
                 * @static @constant
                 * @since 1.8.1
                 */
                // public static DOWNLOAD_USER_DATA_LIST_FAILED: string = 'miiverseDownloadUserDataListFailed';
                get: function () {
                    return 'miiverseDownloadUserDataListFailed';
                },
                enumerable: true,
                configurable: true
            });
            return MiiverseEvent;
        })(events.Event);
        events.MiiverseEvent = MiiverseEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        var MiiverseSearchParam = (function () {
            /**
             * Class contains the structure of a Miiverse search query.
             *
             * @class nwf.mv.MiiverseSearchParam
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            //---------------------------------------------------------------------
            // CONSTRUCTOR
            //---------------------------------------------------------------------
            /**
             * Creates a new `MiiverseSearchParam` object.
             * @method constructor
             * @since 1.0
             */
            function MiiverseSearchParam() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                //---------------------------------
                // Post Details
                //---------------------------------
                /**
                 * Community ID.
                 *
                 * __Note:__ _If this is left as default, then the default community for the application is searched._
                 * @property {uint32} [communityID=0]
                 * @since 1.0
                 */
                this.communityID = 0;
                /**
                 * Filters what kind of posts the search will return.
                 * Combine different filters using binary operators. Ex: `search.filter = FILTER_FROM_FRIEND | FILTER_BODY_MEMO`
                 *
                 * This property can be manipulated directly, or it can be set by changing the `#empathyAdded`, `#from`, `#getMiiData`, `#hasSpoiler`, and `#distinctPID` properties. Example:
                 *
                 *     var searchParam = new nwf.mv.MiiverseSearchParam();
                 *     // This adds the value of the `nwf.mv.MiiverseSearchParam.FILTER_WITH_EMPATHY` flag to `searchParam.filter`
                 *     searchParam.empathyAdded = true;
                 *     // This adds the value of the `nwf.mv.MiiverseSearchParam.FILTER_FROM_FRIEND` flag to `searchParam.filter`
                 *     searchParam.from = nwf.mv.MiiverseSearchParam.FROM_FRIEND;
                 *     // The following line is true. This value could also be set by using the flags from `nwf.mv.MiiverseSearchParam`.
                 *     searchParam.filter === nwf.mv.MiiverseSearchParam.FILTER_WITH_EMPATHY | nwf.mv.MiiverseSearchParam.FILTER_FROM_FRIEND;
                 *
                 * __Note:__ _Not all of the flags that can be set on the `filter` property have an associated property._
                 * @property {uint32} [filter=nwf.mv.MiiverseSearchParam.FILTER_NONE]
                 * @since 1.0
                 */
                this.filter = nwf.mv.MiiverseSearchParam.FILTER_NONE;
                /**
                * Filters whose posts the search will return.
                * Setting this property to one of the `nwf.mv.MiiverseSearchParam.FROM_` constants changes the value of the `#filter` property by adding the value of the flag corresponding to the set value; setting it to `false` subtracts the flag's value.
                * @property {String} [from=nwf.mv.MiiverseSearchParam.FROM_DEFAULT]
                * @since 1.0
                */
                this.from = nwf.mv.MiiverseSearchParam.FROM_DEFAULT;
                /**
                * Filters what kind of posts the search will return.
                * @property {nwf.mv.MiiversePostType} [postType=nwf.mv.MiiversePostType.TEXT]
                * @since 1.0
                */
                this.postType = nwf.mv.MiiversePostType.TEXT;
                /**
                * Determines whether the returned posts have Mii data. When set to `false`, no Mii data is attached. When set to `true`, Mii data is attached.
                * @property {Boolean} [hasMiiData=false]
                * @since 1.0
                * @deprecated 1.5 Use nwf.mv.MiiverseSearchParam.getMiiData instead.
                */
                this.hasMiiData = false;
                /**
                * Determines whether the the returned posts have Mii data. When set to `false`, no Mii data is attached. When set to `true`, Mii data is attached.
                * Setting this property to `true` changes the value of the `#filter` property by adding the value of the `nwf.mv.MiiverseSearchParam.FILTER_WITH_MII_DATA` flag; setting it to `false` subtracts the flag's value.
                * @property {Boolean} [getMiiData=false]
                * @since 1.5
                */
                this.getMiiData = false;
                /**
                * When set to `true`, only posts that are marked as spoilers are returned. When set to `false`, this is not the case.
                * Setting this property to `true` changes the value of the `#filter` property by adding the value of the `nwf.mv.MiiverseSearchParam.FILTER_WITH_SPOILER` flag; setting it to `false` subtracts the flag's value.
                * @property {Boolean} [hasSpoiler=false]
                * @since 1.0
                */
                this.hasSpoiler = false;
                /**
                * When set to `true`, the returned posts' `{@link nwf.mv.MiiverseDownloadedPost#empathyAdded empathyAdded}` property will indicate if the posts have had empathy added by the Active `{@link nwf.act.NintendoAccount Account}`. When set to `false`, the posts' `{@link nwf.mv.MiiverseDownloadedPost#empathyAdded empathyAdded}` property will always return `false` regardless of whether empathy has been added or not.
                *
                * Setting this property to `true` changes the value of the `#filter` property by adding the value of the `nwf.mv.MiiverseSearchParam.FILTER_WITH_EMPATHY` flag; setting it to `false` subtracts the flag's value.
                * @property {Boolean} [empathyAdded=false]
                * @since 1.0
                */
                this.empathyAdded = false;
                /**
                * When set to `true`, a single post is returned from each poster. When set to `false`, multiple posts are returned from each poster.
                * Setting this property to `true` changes the value of the `#filter` property by adding the value of the `nwf.mv.MiiverseSearchParam.FILTER_DISTINCT_PID` flag; setting it to `false` subtracts the flag's value.
                * @property {Boolean} [distinctPID=false]
                * @since 1.0
                */
                this.distinctPID = false;
                /**
                 * The language of the posts to be retrieved.
                 *
                 * This can be set to `nwf.system.WiiULanguageCode.ALL` to retrieve posts from all languages or `nwf.system.WiiULanguageCode.SYSTEM` to retrieve posts in the language that the Wii U console is set to.
                 *
                 * __Note:__ After setting it to `nwf.system.WiiULanguageCode.SYSTEM` this property will return the value of the current console language and not `nwf.system.WiiULanguageCode.SYSTEM`.
                 *
                 * @property {uint8} [languageID=nwf.system.WiiULanguageCode.SYSTEM]
                 * @see nwf.system.WiiULanguageCode
                 * @since 1.0
                 */
                this.languageID = nwf.system.WiiULanguageCode.SYSTEM;
                /**
                * The personal ID of a specific user to search for.
                * Incompatable with `#FILTER_FROM_FRIEND` and `#FILTER_FROM_FOLLOW`.
                * @property {uint8} [pID=0]
                * @since 1.0
                */
                this.pID = 0;
                /**
                 * Maximum number of items to get.
                 * `nwf.mv.MiiverseSearchParam.MAXIMUM_POST_COUNT` value can be changed by `{@link nwf.mv.Miiverse#initialize nwf.mv.Miiverse.getInstance().initialize()}`.
                 * A `MiiverseSearchParam` created before `initialize` has completed successfully may have a default property greater than `{@link nwf.mv.Miiverse#getPostList nwf.mv.Miiverse.getInstance().getPostList()}` will accept.
                 * @since 1.0
                 * @property {uint32} [=nwf.mv.MiiverseSearchParam.MAXIMUM_POST_COUNT]
                 */
                this.maxNum = nwf.mv.MiiverseSearchParam.MAXIMUM_POST_COUNT;
                /**
                 * Only posts with the specified string set in their `{@link nwf.mv.MiiverseUploadPost#searchKey searchKey}` property is returned by the search.
                 * @property {String} [searchKey='']
                 * @since 1.0
                 */
                this.searchKey = '';
                /**
                 * Only search for posts that have the specified `{@link nwf.mv.MiiverseDownloadedPost#id ids}`.
                 * @see nwf.mv.MiiverseDownloadedPost.id
                 * @property {Array} [postIDs=[]]
                 * @since 1.7
                 */
                this.postIDs = [];
                /**
                 * Sets whether the fetched posts will have their `{@link nwf.mv.MiiverseDownloadedPost#appData appData}` as a `Blob` or  a `string`. When set to `true`, the `{@link nwf.mv.MiiverseDownloadedPost#appData appData}` will be a `string`. When set to `false`, it will be a `Blob`.
                 *
                 * __Note:__ This should be set to correspond to the type of `{@link nwf.mv.MiiverseUploadPost#appData appData}` the `{@link nwf.mv.MiiverseUploadPost posts}` were uploaded with. The `{@link nwf.mv.MiiverseUploadPost#appData appData}` may not be correct in returned search results otherwise.
                 *
                 * @property {Boolean} [appDataAsString=false]
                 * @since 1.8.2
                 */
                this.appDataAsString = false;
            }
            Object.defineProperty(MiiverseSearchParam.prototype, "FILTER_NONE", {
                //-------------------------------------------------------------------------
                // STATIC PROPERTIES
                //-------------------------------------------------------------------------
                // FROM
                /**
                 * Default (get without distinction).
                 * @since 1.0
                 * @static @constant
                 * @property {Number} [FILTER_NONE=0]
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseSearchParam.prototype, "FILTER_FROM_FRIEND", {
                /**
                 * Get from friends.
                 * @since 1.0
                 * @static @constant
                 * @property {Number} [FILTER_FROM_FRIEND=1]
                 */
                // public static FILTER_FROM_FRIEND: number = 1;
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseSearchParam.prototype, "FILTER_FROM_FOLLOW", {
                /**
                 * Get from favorites.
                 * @since 1.0
                 * @static @constant
                 * @property {Number} [FILTER_FROM_FOLLOW=2]
                 */
                // public static FILTER_FROM_FOLLOW: number = 2;
                get: function () {
                    return 2;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Get posts made by the current user.
             * @since 1.0
             * @static @constant
             * @property {Number} [FILTER_FROM_SELF=4]
             */
            // public get FILTER_FROM_SELF: number = 4;
            MiiverseSearchParam.FILTER_FROM_SELF = function () {
                return 4;
            };
            Object.defineProperty(MiiverseSearchParam.prototype, "FILTER_BODY_TEXT", {
                /**
                 * Get posts with text.
                 * @since 1.0
                 * @static @constant
                 * @property {Number} [FILTER_BODY_TEXT=8]
                 */
                // public static FILTER_BODY_TEXT: number = 8;
                get: function () {
                    return 8;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseSearchParam.prototype, "FILTER_BODY_MEMO", {
                /**
                 * Get posts with a drawn memo.
                 * @since 1.0
                 * @static @constant
                 * @property {Number} [FILTER_BODY_MEMO=16]
                 */
                // public static FILTER_BODY_MEMO: number = 16;
                get: function () {
                    return 16;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseSearchParam.prototype, "FILTER_DISTINCT_PID", {
                /**
                * Get posts from a specific user.
                * @since 1.0
                * @static @constant
                * @property {Number} [FILTER_DISTINCT_PID=32]
                */
                // public static FILTER_DISTINCT_PID: number = 32;
                get: function () {
                    return 32;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseSearchParam.prototype, "FILTER_WITH_MII_DATA", {
                /**
                * Get posts with Mii data attached.
                * @since 1.0
                * @static @constant
                * @property {Number} [FILTER_WITH_MII_DATA=64]
                */
                // public static FILTER_WITH_MII_DATA: number = 64;
                get: function () {
                    return 64;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseSearchParam.prototype, "FILTER_WITH_EMPATHY", {
                /**
                * Get posts that have empathy. (Yeah!)
                * @since 1.0
                * @static @constant
                * @property {Number} [FILTER_WITH_EMPATHY=128]
                */
                // public static FILTER_WITH_EMPATHY: number = 128;
                get: function () {
                    return 128;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseSearchParam.prototype, "FILTER_WITH_SPOILER", {
                /**
                * Get posts that are marked as spoilers.
                * @since 1.0
                * @static @constant
                * @property {Number} [FILTER_WITH_SPOILER=256]
                */
                // public static FILTER_WITH_SPOILER: number = 256;
                get: function () {
                    return 256;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseSearchParam.prototype, "FROM_DEFAULT", {
                /**
                * Get posts from everyone.
                * @since 1.0
                * @static @constant
                * @property {String} [FROM_DEFAULT='fromDefault']
                */
                get: function () {
                    return "fromDefault";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseSearchParam.prototype, "FROM_FAVORITE", {
                /**
                * Get posts from the users that are followed by the current user.
                * @since 1.0
                * @static @constant
                * @property {String} [FROM_FAVORITE='fromFavorite']
                */
                // public static FROM_FAVORITE: string = "fromFavorite";
                get: function () {
                    return "fromFavorite";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseSearchParam.prototype, "FROM_FRIEND", {
                /**
                * Get posts from the current user's friends.
                * @since 1.0
                * @static @constant
                * @property {String} [FROM_FRIEND='fromFriend']
                */
                // public static FROM_FRIEND: string = "fromFriend";
                get: function () {
                    return "fromFriend";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseSearchParam.prototype, "FROM_SELF", {
                /**
                * Get posts from the current user.
                * @since 1.0
                * @static @constant
                * @property {String} [FROM_SELF='fromSelf']
                */
                // public static FROM_SELF: string = "fromSelf";
                get: function () {
                    return "fromSelf";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseSearchParam.prototype, "MAXIMUM_POST_COUNT", {
                /**
                * The maximum number of posts that can be requested from one call of `{@link nwf.mv.Miiverse#getPostList getPostList}`.
                * This value can be changed by `{@link nwf.mv.Miiverse#initialize nwf.mv.Miiverse.getInstance().initialize()}`.
                * @since 1.0
                * @static @readonly
                * @property {Number} [MAXIMUM_POST_COUNT=30]
                */
                get: function () {
                    return 30;
                },
                enumerable: true,
                configurable: true
            });
            MiiverseSearchParam.FILTER_NONE = 0;
            MiiverseSearchParam.FROM_DEFAULT = "fromDefault";
            MiiverseSearchParam.MAXIMUM_POST_COUNT = 30;
            return MiiverseSearchParam;
        })();
        mv.MiiverseSearchParam = MiiverseSearchParam;
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        var MiiverseUploadComment = (function () {
            /**
             * Class contains the structure of an uploadable Miiverse post comment.
             *
             * @class nwf.mv.MiiverseUploadComment
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Creates a new MiiverseUploadComment object.
             * @method constructor
             * @since 1.4
             */
            function MiiverseUploadComment() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                //---------------------------------
                // Post Details
                //---------------------------------
                /**
                * Type of post that will be uploaded.
                * This only affects posts made through the post application.
                * Combine different types using binary operators.
                *
                * Ex: `post.type = nwf.mv.MiiverseUploadPostType.FLAG_SPOILER | nwf.mv.MiiverseUploadPostType.FLAG_TEXT_ONLY`
                * @since 1.4
                * @property {nwf.mv.MiiverseUploadPostType} [type=nwf.mv.MiiverseUploadPostType.FLAG_NONE]
                */
                this.type = nwf.mv.MiiverseUploadPostType.FLAG_NONE;
                /**
                * If set to `true`, the post can only be a memo. If set to `false`, the post can be either a memo or text.
                * Setting this property to `true` changes the value of the `#type` property by adding the value of the `nwf.mv.MiiverseUploadPostType.FLAG_MEMO_ONLY` flag; setting it to `false` subtracts the flag's value.
                * This only affects posts made through the post application.
                * @property {Boolean} [memoOnly=false]
                * @since 1.4
                */
                this.memoOnly = false;
                /**
                * If set to `true`, the post can only be text. If set to `false`, the post can be either a memo or text.
                * Setting this property to `true` changes the value of the `#type` property by adding the value of the `nwf.mv.MiiverseUploadPostType.FLAG_TEXT_ONLY` flag; setting it to `false` subtracts the flag's value.
                * This only affects posts made through the post application.
                * @property {Boolean} [textOnly=false]
                * @since 1.4
                */
                this.textOnly = false;
                /**
                * If set to `true`, the post could contain a spoiler. If set to `false`, it cannot.
                * Setting this property to `true` changes the value of the `#type` property by adding the value of the `nwf.mv.MiiverseUploadPostType.FLAG_SPOILER` flag; setting it to `false` subtracts the flag's value.
                * This only affects posts made through the post application.
                * @property {Boolean} [isSpoiler=false]
                * @since 1.4
                */
                this.isSpoiler = false;
                //---------------------------------
                // IDs
                //---------------------------------
                /**
                * Specifies the post to respond to by `{@link nwf.mv.MiiverseDownloadedPost#id ID}`.
                * @property {String} [postID='']
                * @since 1.4
                */
                this.postID = "";
                //---------------------------------
                // Post Content
                //---------------------------------
                /**
                * The body text of the post.
                * This string cannot be greater than 200 characters in length.
                * @property {String} [body='']
                * @since 1.4
                */
                this.body = "";
                /**
                * The maximum length of body text of the post.
                * @property {Number} [bodyMaxSize=0]
                * @since 1.4
                */
                this.bodyMaxSize = 0;
                /**
                * Post memo (image) of size 320×120.
                * @since 1.4
                * @property {HTMLImageElement} [memo=undefined]
                */
                this.memo = undefined;
                /**
                * A JPEG of size 800x450.
                * If `Image.complete` is not `true` or the image is not of the correct dimensions, this thows an error.
                * @since 1.4
                * @property {HTMLImageElement} [screenshot=undefined]
                */
                this.screenshot = undefined;
                /**
                * A `{@link Blob Blob}` of up to 1024 bytes that will be saved with the post. `appData` can be set to either a `{@link String String}` or a `{@link Blob Blob}`.
                * @property {null | Blob | String} [appData=null]
                * @since 1.4
                */
                this.appData = null;
                /**
                 * Can be set to an array of stamp images, as `HTMLImageElement` objects. The dimensions of the images must be either 100x100 or 200x200. These images will become available in the post application as stamps that can be added to the `#memo`.
                 * Be sure that the Miiverse has successfully initialized before setting this property.
                 *
                 * __Note:__ _The images must be fully loaded before they are set to this property or an error will be thrown._
                 *
                 * @since 1.8.1
                 * @see nwf.mv.MiiverseUploadPost.stamps
                 * @see nwf.mv.Miiverse.initialize
                 * @see nwf.events.MiiverseEvent.INITIALIZATION_SUCCESS
                 * @property {Array} [stamps=null]
                 */
                this.stamps = null;
                /**
                 * Expression of the Mii character on the post; also called the `feelingID`.  This is the face set on the Mii that will be shown with the post in the Miiverse application.
                 * @property {Number} [miiExpression = nwf.mv.MiiverseFeelingType.FEELING_NORMAL]
                 * @see nwf.mv.MiiverseFeelingType
                 * @since 1.8.1
                 */
                this.miiExpression = nwf.mv.MiiverseFeelingType.FEELING_NORMAL;
                return new nwf.mv.MiiverseUploadComment();
            }
            return MiiverseUploadComment;
        })();
        mv.MiiverseUploadComment = MiiverseUploadComment;
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        var MiiverseUploadPost = (function () {
            /**
             * Class contains the structure of an uploadable Miiverse post.
             *
             * @class nwf.mv.MiiverseUploadPost
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Creates a new MiiverseUploadPost object.
             * @method constructor
             * @since 1.0
             */
            function MiiverseUploadPost() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                //---------------------------------
                // Post Details
                //---------------------------------
                /**
                * Type of post that will be uploaded.
                * This only affects posts made through the post application.
                * Combine different types using binary operators.
                * Ex: `post.type = nwf.mv.MiiverseUploadPostType.FLAG_SPOILER | nwf.mv.MiiverseUploadPostType.FLAG_TEXT_ONLY`
                *
                * This property can be manipulated directly, or it can be set by changing the `#isSpoiler`, `#memoOnly`, and `#textOnly` properties. Example:
                *
                *     var mvUploadPost = new nwf.mv.MiiverseUploadPost();
                *     // This adds the value of the `nwf.mv.MiiverseUploadPostType.FLAG_SPOILER` flag to `mvUploadPost.type`
                *     mvUploadPost.isSpoiler = true;
                *     // This adds the value of the `nwf.mv.MiiverseUploadPostType.FLAG_TEXT_ONLY` flag to `mvUploadPost.type`
                *     mvUploadPost.textOnly = true;
                *     // The following line is true. This value could also be set by using the flags in `nwf.mv.MiiverseUploadPostType`.
                *     mvUploadPost.type === nwf.mv.MiiverseUploadPostType.FLAG_SPOILER | nwf.mv.MiiverseUploadPostType.FLAG_TEXT_ONLY;
                *
                * @type nwf.mv.MiiverseUploadPostType
                * @since 1.0
                * @property {nwf.mv.MiiverseUploadPostType} [=nwf.mv.MiiverseUploadPostType.FLAG_NONE]
                */
                this.type = nwf.mv.MiiverseUploadPostType.FLAG_NONE;
                /**
                * If set to `true`, the post can only be a memo. If set to `false`, the post can be either a memo or text.
                * Setting this property to `true` changes the value of the `#type` property by adding the value of the `nwf.mv.MiiverseUploadPostType.FLAG_MEMO_ONLY` flag; setting it to `false` subtracts the flag's value.
                * This only affects posts made through the post application.
                * @property {Boolean} [memoOnly=false]
                * @since 1.0
                */
                this.memoOnly = false;
                /**
                * If set to `true`, the post can only be text. If set to `false`, the post can be either a memo or text.
                * Setting this property to `true` changes the value of the `#type` property by adding the value of the `nwf.mv.MiiverseUploadPostType.FLAG_TEXT_ONLY` flag; setting it to `false` subtracts the flag's value.
                * This only affects posts made through the post application.
                * @property {Boolean} [textOnly=false]
                * @since 1.0
                */
                this.textOnly = false;
                /**
                * If set to `true`, the post could contain a spoiler. If set to `false`, it cannot.
                * Setting this property to `true` changes the value of the `#type` property by adding the value of the `nwf.mv.MiiverseUploadPostType.FLAG_SPOILER` flag; setting it to `false` subtracts the flag's value.
                * This only affects posts made through the post application.
                * @property {Boolean} [isSpoiler=false]
                * @since 1.0
                */
                this.isSpoiler = false;
                /**
                 * Specifies an external URL to attach to the post.
                 * @property {String} [dataURL='']
                 * @since 1.0
                 */
                this.dataURL = "";
                //---------------------------------
                // IDs
                //---------------------------------
                /**
                * Specifies the community to post to.
                * @property {uint32} [communityID=0]
                * @since 1.0
                */
                this.communityID = 0;
                //---------------------------------
                // Post Content
                //---------------------------------
                /**
                * The body text of the post.
                * This string cannot be greater than 200 characters in length.
                * @property {String} [body='']
                * @since 1.0
                */
                this.body = "";
                /**
                * The maximum length of body text of the post.
                * @property {Number} [bodyMaxSize=0]
                * @since 1.0
                */
                this.bodyMaxSize = 0;
                /**
                * Post memo (image) of size 320×120.
                * @since 1.0
                * @property {HTMLImageElement} [memo=undefined]
                */
                this.memo = undefined;
                /**
                * A JPEG of size 800x450.
                * If `Image.complete` is not `true` or the image is not of the correct dimensions, this will throw an error.
                * @since 1.0
                * @property {HTMLImageElement} [screenshot=undefined]
                */
                this.screenshot = undefined;
                /**
                 * A string that tags the post with a specified topic.
                 * @property {String} [tag='']
                 * @since 1.0
                 */
                this.tag = '';
                /**
                * An array of strings that can index the post for searches. A maximum of 5 keys are allowed.
                * @see {@link nwf.mv.MiiverseSearchParam#searchKey}
                * @property {Array} [searchKey=['']]
                * @since 1.0
                */
                this.searchKey = [''];
                /**
                * A `{@link Blob Blob}` of up to 1024 bytes that will be saved with the post. `appData` can be set to either a `{@link String String}` or a `{@link Blob Blob}`.
                * @property {null | Blob | String} [appData=null]
                * @since 1.0
                */
                this.appData = null;
                /**
                 * A string of up to 1024 characters that will be saved with the post.
                 * @property {String} [appDataString='']
                 * @deprecated 1.4 Use nwf.mv.MiiverseUploadPost.appData instead.
                 * @since 1.0
                 */
                this.appDataString = '';
                /**
                * Can be set to an array of stamp images, as `HTMLImageElement` objects. The dimensions of the images must be either 100x100 or 200x200. These images will become available in the post application as stamps that can be added to the `#memo`.
                * Be sure that the Miiverse has successfully initialized before setting this property.
                *
                * __Note:__ _The images must be fully loaded before they are set to this property or an error will be thrown._
                *
                *       // get instance of the miiverse and an upload post
                *       var miiverse = nwf.mv.Miiverse.getInstance();
                *       var uploadPost = new nwf.mv.MiiverseUploadPost();
                *
                *       // create an array to store the stamps in once they are loaded
                *       var stampArray = [];
                *
                *       // Miiverse stamps are HTMLImageElements
                *       var stamp1 = new Image();
                *       var stamp2 = new Image();
                *
                *       // add listeners for the Miiverse class
                *       miiverse.addEventListener(nwf.events.MiiverseEvent.INITIALIZATION_SUCCESS, onInit);
                *       miiverse.addEventListener(nwf.events.MiiverseEvent.UPLOAD_POST_SUCCESS, onPostUpload);
                *
                *       // function to call when the Miiverse intilization is complete
                *       function onInit(evt){
                *               // listen for the stamp images to load and then set them to the stampArray
                *               stamp1.addEventListener('load', function(evt){
                *                   stampArray.push(stamp1);
                *                   stamp2.src = 'assets/stamp2.png';
                *               });
                *               stamp2.addEventListener('load', function(evt){
                *                   stampArray.push(stamp2);
                *                   // once all the stamps are loaded, set them to the post
                *                   uploadPost.stamps = stampArray;
                *                   // send the post to the Miiverse using the post application
                *                   miiverse.sendPost(uploadPost, true);
                *               });
                *               // begin loading the stamp images
                *               stamp1.src = 'assets/stamp1.png';
                *       }
                *
                *       // function to call when the post is uploaded
                *       function onPostUpload(evt){
                *           console.log(evt);
                *       }
                *
                *       // initilize Miiverse to start the event chain
                *       miiverse.initialize();
                *
                * @since 1.7
                * @see nwf.mv.Miiverse.initialize
                * @see nwf.events.MiiverseEvent.INITIALIZATION_SUCCESS
                * @property {Array} [stamps=null]
                */
                this.stamps = null;
                /**
                 * Expression of the Mii character on the post; also called the `feelingID`.  This is the face set on the Mii that will be shown with the post in the Miiverse application.
                 *
                 * @property {Number} [miiExpression = nwf.mv.MiiverseFeelingType.FEELING_NORMAL]
                 * @see nwf.mv.MiiverseFeelingType
                 * @since 1.8.1
                 */
                this.miiExpression = nwf.mv.MiiverseFeelingType.FEELING_NORMAL;
                /**
                * Determines whether this post can be used to launch the application from Miiverse. If `true`, then this post will be able to launch the application. If `false`, it will not.
                *
                * If this post is used to launch the application, the `{@link nwf.mv.Miiverse#appParams appParams}` property of `nwf.mv.Miiverse` will return a valid object.
                *
                * @property {Boolean} [isAppStartable=false]
                * @since 1.8.2
                */
                this.isAppStartable = false;
                return new nwf.mv.MiiverseUploadPost();
            }
            return MiiverseUploadPost;
        })();
        mv.MiiverseUploadPost = MiiverseUploadPost;
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        var MiiverseUserDataSearchParam = (function () {
            /**
             * `MiiverseUserDataSearchParams` are used to define the results returned when calling `{@link nwf.mv.Miiverse#downloadUserData downloadUserData}`.
             * In order for the download to be successful, one of the ID properties (`#communityID`, `#postID`, or `#principalID`) below must be set.
             *
             * @class nwf.mv.MiiverseUserDataSearchParam
             * @author Aaron Ward
             * @author Shawn Gates
             */
            //---------------------------------------------------------------------
            // CONSTRUCTOR
            //---------------------------------------------------------------------
            /**
             * Creates a new `MiiverseUserDataSearchParam` object.
             * @method constructor
             * @since 1.8.1
             */
            function MiiverseUserDataSearchParam() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                //---------------------------------
                // Post Details
                //---------------------------------
                /**
                 * The ID of a Community that the users have favorited.
                 * This property is incompatible with `#principalID` and `#postID`; whichever is set __last__ will be used in the search.
                 *
                 * @property {Number} [communityID = 0]
                 * @since 1.8.1
                 */
                this.communityID = 0;
                /**
                * Determines whether the returned users have Mii data.
                * When set to `false`, no Mii data is attached. When set to `true`, Mii data is attached.
                * @property {Boolean} [hasMiiData = false]
                * @since 1.8.1
                */
                this.hasMiiData = false;
                /**
                * When set to `true`, users that are friends with the user specified by the `#principalID` property will be searched for.
                * If a `#principalID` is not specified, this property will remain `false`.
                * This property is incompatible with `#followerSearch`; setting this property to `true` will automatically set `#followerSearch` to `false`.
                *
                * @property {Boolean} [friendSearch = false]
                * @since 1.8.1
                */
                this.friendSearch = false;
                /**
                * When set to `true`, users that are followers of the user specified by the `#principalID` property will be searched for.
                * If a `#principalID` is not specified, this property will remain `false`.
                * This property is incompatible with `#friendSearch`; setting this property to `true` will automatically set `#friendSearch` to `false`.
                *
                * @property {Boolean} [followerSearch = false]
                * @since 1.8.1
                */
                this.followerSearch = false;
                /**
                * The `principalID` of a specific user to search for.
                * If searching by `principalID` then either `#friendSearch` or `#followerSearch` must be set to `true` or the search will fail.
                * This property is incompatible with `#communityID` and `#postID`; whichever is set __last__ will be used in the search.
                *
                * @property {Number} [principalID = 0]
                * @since 1.8.1
                */
                this.principalID = 0;
                /**
                 * Maximum number of users to get.
                 * This will default to the value of `nwf.mv.MiiverseSearchParam.MAXIMUM_POST_COUNT`.
                 * A `MiiverseUserDataSearchParam` created before `{@link nwf.mv.Miiverse#initialize initialize}` has completed successfully may have this property set to a greater value than `{@link nwf.mv.Miiverse#downloadUserData nwf.mv.Miiverse.downloadUserData()}` will accept.
                 *
                 * @since 1.8.1
                 * @property {Number} [maxNum = nwf.mv.MiiverseSearchParam.MAXIMUM_POST_COUNT]
                 */
                this.maxNum = nwf.mv.MiiverseSearchParam.MAXIMUM_POST_COUNT;
                /**
                 * Find users who have favorited the provided `{@link nwf.mv.MiiverseDownloadedPost#id postID}`.
                 * This property is incompatible with `#principalID` and `#communityID`; whichever is set __last__ will be used in the search.
                 *
                 * @property {String} [postID = '']
                 * @see nwf.mv.MiiverseDownloadedPost.id
                 * @since 1.8.1
                 */
                this.postID = '';
            }
            return MiiverseUserDataSearchParam;
        })();
        mv.MiiverseUserDataSearchParam = MiiverseUserDataSearchParam;
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        var MiiverseCommunitySearchParam = (function () {
            /**
             * Class contains the structure of a Miiverse community search query.
             *
             * @class nwf.mv.MiiverseCommunitySearchParam
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            //---------------------------------------------------------------------
            // CONSTRUCTOR
            //---------------------------------------------------------------------
            /**
             * Creates a new `MiiverseCommunitySearchParam` object.
             * @method constructor
             * @since 1.2
             */
            function MiiverseCommunitySearchParam() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                //---------------------------------
                // Community Details
                //---------------------------------
                /**
                 * Community ID.
                 * @property {uint32} [communityID=0]
                 * @since 1.2
                 */
                this.communityID = 0;
                /**
                  * Filters what kind of communities the search will return.
                  * @property {uint32} [filter=nwf.mv.MiiverseCommunitySearchParam.FLAG_FILTER_BY_OFFICIAL]
                  * @since 1.2
                  */
                this.filter = nwf.mv.MiiverseCommunitySearchParam.FLAG_FILTER_BY_OFFICIAL;
                /**
                 * Maximum number of items to get.
                 * `nwf.mv.MiiverseCommunitySearchParam.MAXIMUM_POST_COUNT` value can be changed by `nwf.mv.Miiverse.initialize()`.
                 * A `MiiverseCommunitySearchParam` created before `initialize` has completed successfully may have a default property greater than `nwf.mv.Miiverse.getCommentList()` will accept.
                 * @since 1.4
                 * @property {uint32} [maxNum=nwf.mv.MiiverseCommunitySearchParam.MAXIMUM_POST_COUNT]
                 */
                this.maxNum = nwf.mv.MiiverseSearchParam.MAXIMUM_POST_COUNT;
            }
            Object.defineProperty(MiiverseCommunitySearchParam.prototype, "FLAG_FILTER_BY_FAVORITE", {
                //-------------------------------------------------------------------------
                // STATIC PROPERTIES
                //-------------------------------------------------------------------------
                // FROM
                /**
                 * Get from favorite users.
                 * @since 1.2
                 * @static @constant
                 * @property {Number} [FLAG_FILTER_BY_FAVORITE=1]
                 */
                // public static FLAG_FILTER_BY_FAVORITE: number = 1;
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseCommunitySearchParam.prototype, "FLAG_FILTER_BY_OFFICIAL", {
                /**
                 * Get official communities created by application developers.
                 * @since 1.2
                 * @static @constant
                 * @property {Number} [FLAG_FILTER_BY_OFFICIAL=2]
                 */
                get: function () {
                    return 2;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseCommunitySearchParam.prototype, "FLAG_FILTER_BY_SELF", {
                /**
                 * Get communities made by the current user.
                 * @since 1.2
                 * @static @constant
                 * @property {Number} [FLAG_FILTER_BY_SELF=4]
                 */
                // public static FLAG_FILTER_BY_SELF: number = 4;
                get: function () {
                    return 4;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseCommunitySearchParam.prototype, "MAXIMUM_COMMUNITY_COUNT", {
                /**
                * The maximum number of posts that can be requested from one call of `{@link nwf.mv.Miiverse#getCommunityList getCommunityList}`.
                *
                * Equal to 1/2 of `nwf.mv.MiiverseSearchParam.MAXIMUM_POST_COUNT` because `{@link nwf.mv.MiiverseDownloadedCommunity MiiverseDownloadedCommunity}` instances require more memory.
                * @since 1.2
                * @static @readonly
                * @property {Number} [MAXIMUM_COMMUNITY_COUNT=15]
                */
                // public static MAXIMUM_COMMUNITY_COUNT: number = 15;
                get: function () {
                    return 15;
                },
                enumerable: true,
                configurable: true
            });
            MiiverseCommunitySearchParam.FLAG_FILTER_BY_OFFICIAL = 2;
            return MiiverseCommunitySearchParam;
        })();
        mv.MiiverseCommunitySearchParam = MiiverseCommunitySearchParam;
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        var MiiverseCommentSearchParam = (function () {
            /**
             * Class contains the structure of a Miiverse comment search query.
             *
             * @class nwf.mv.MiiverseCommentSearchParam
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            //---------------------------------------------------------------------
            // CONSTRUCTOR
            //---------------------------------------------------------------------
            /**
             * Creates a new `MiiverseCommentSearchParam` object.
             * @method constructor
             * @since 1.4
             */
            function MiiverseCommentSearchParam() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                //---------------------------------
                // Post Details
                //---------------------------------
                /**
                 * Filters what kind of comments the search will return.
                 * Combine different filters using binary operators. Ex: `search.filter = FILTER_FROM_FRIEND | FILTER_BODY_MEMO`
                 * This property can be manipulated directly, or it can be set by changing the `#from`, `#getMiiData`, `#hasSpoiler`, and `#distinctPID` properties. Example:
                 *
                 *     var searchParam = new nwf.mv.MiiverseCommentSearchParam();
                 *     // This adds the value of the `nwf.mv.MiiverseCommentSearchParam.FILTER_WITH_EMPATHY` flag to `searchParam.filter`
                 *     searchParam.empathyAdded = true;
                 *     // This adds the value of the `nwf.mv.MiiverseCommentSearchParam.FILTER_FROM_FRIEND` flag to `searchParam.filter`
                 *     searchParam.from = nwf.mv.MiiverseCommentSearchParam.FROM_FRIEND;
                 *     // The following line is true. This value could also be set by using the flags from `nwf.mv.MiiverseCommentSearchParam`.
                 *     searchParam.filter === nwf.mv.MiiverseCommentSearchParam.FILTER_WITH_EMPATHY | nwf.mv.MiiverseCommentSearchParam.FILTER_FROM_FRIEND;
                 *
                 * __Note:__ _Not all of the flags that can be set on the `filter` property have an associated property._
                 * @property {uint32} [filter=nwf.mv.MiiverseCommentSearchParam.FILTER_NONE]
                 * @since 1.4
                 */
                this.filter = nwf.mv.MiiverseCommentSearchParam.FILTER_NONE;
                /**
                * Filters whose comments the search will return.
                * Setting this property to one of the `nwf.mv.MiiverseCommentSearchParam.FROM_` constants changes the value of the `#filter` property by adding the value of the flag corresponding to the set value; setting it to `false` subtracts the flag's value.
                * @property {String} [from=nwf.mv.MiiverseCommentSearchParam.FROM_DEFAULT]
                * @since 1.4
                */
                this.from = nwf.mv.MiiverseCommentSearchParam.FROM_DEFAULT;
                /**
                * Filters what kind of comments the search will return.
                * @property {nwf.mv.MiiversePostType} [postType=nwf.mv.MiiversePostType.TEXT]
                * @since 1.4
                */
                this.postType = nwf.mv.MiiversePostType.TEXT;
                /**
                * Determines whether the the returned comments have Mii data. When set to `false`, no Mii data is attached. When set to `true`, Mii data is attached.
                * @property {Boolean} [hasMiiData=false]
                * @since 1.4
                * @deprecated 1.5 Use nwf.mv.MiiverseCommentSearchParam.getMiiData instead.
                */
                this.hasMiiData = false;
                /**
                * Determines whether the the returned comments have Mii data. When set to `false`, no Mii data is attached. When set to `true`, Mii data is attached.
                * Setting this property to `true` changes the value of the `#filter` property by adding the value of the `nwf.mv.MiiverseCommentSearchParam.FILTER_WITH_MII_DATA` flag; setting it to `false` subtracts the flag's value.
                * @property {Boolean} [getMiiData=false]
                * @since 1.5
                */
                this.getMiiData = false;
                /**
                * When set to `true`, only comments that are marked as spoilers are returned. When set to `false`, this is not the case.
                * Setting this property to `true` changes the value of the `#filter` property by adding the value of the `nwf.mv.MiiverseCommentSearchParam.FILTER_WITH_SPOILER` flag; setting it to `false` subtracts the flag's value.
                * @property {Boolean} [hasSpoiler=false]
                * @since 1.4
                */
                this.hasSpoiler = false;
                /**
                * When set to `true`, a single comment is returned from each poster. When set to `false`, multiple comments are returned from each poster.
                * Setting this property to `true` changes the value of the `#filter` property by adding the value of the `nwf.mv.MiiverseCommentSearchParam.FILTER_DISTINCT_PID` flag; setting it to `false` subtracts the flag's value.
                * @property {Boolean} [distinctPID=false]
                * @since 1.4
                */
                this.distinctPID = false;
                /**
                * The post `{@link nwf.mv.MiiverseDownloadedPost#id ID}` to retrieve comments for.
                * @property {String} [postID='']
                * @since 1.4
                */
                this.postID = '';
                /**
                 * Maximum number of items to get.
                 * `nwf.mv.MiiverseCommentSearchParam.MAXIMUM_POST_COUNT` value can be changed by `nwf.mv.Miiverse.initialize()`.
                 * A `MiiverseCommentSearchParam` created before `initialize` has completed successfully may have a default property greater than `nwf.mv.Miiverse.getCommentList()` will accept.
                 * @since 1.4
                 * @property {uint32} [=nwf.mv.MiiverseCommentSearchParam.MAXIMUM_POST_COUNT]
                 */
                this.maxNum = nwf.mv.MiiverseSearchParam.MAXIMUM_POST_COUNT;
                /**
                 * The language of the comments to be retrieved.
                 *
                 * This can be set to `nwf.system.WiiULanguageCode.ALL` to retrieve comments from all languages or `nwf.system.WiiULanguageCode.SYSTEM` to retrieve comments in the language that the Wii U console is set to.
                 *
                 * __Note:__ After setting it to `nwf.system.WiiULanguageCode.SYSTEM` this property will return the value of the current console language and not `nwf.system.WiiULanguageCode.SYSTEM`.
                 *
                 * @property {uint8} [languageID=nwf.system.WiiULanguageCode.SYSTEM]
                 * @see nwf.system.WiiULanguageCode
                 * @since 1.7
                 */
                this.languageID = nwf.system.WiiULanguageCode.SYSTEM;
                /**
                 * Sets whether the fetched comments will have their `{@link nwf.mv.MiiverseDownloadedComment#appData appData}` as a `Blob` or  a `string`. When set to `true`, the `{@link nwf.mv.MiiverseDownloadedComment#appData appData}` will be a `string`. When set to `false`, it will be a `Blob`.
                 *
                 * __Note:__ This should be set to correspond to the type of `{@link nwf.mv.MiiverseUploadComment#appData appData}` the `{@link nwf.mv.MiiverseUploadComment comments}` were uploaded with. The `{@link nwf.mv.MiiverseUploadComment#appData appData}` may not be correct in returned search results otherwise.
                 *
                 * @property {Boolean} [appDataAsString=false]
                 * @since 1.8.2
                 */
                this.appDataAsString = false;
            }
            Object.defineProperty(MiiverseCommentSearchParam.prototype, "FILTER_NONE", {
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseCommentSearchParam.prototype, "FILTER_FROM_FRIEND", {
                /**
                 * Get from friends.
                 * @since 1.0
                 * @static @constant
                 * @property {Number} [FILTER_FROM_FRIEND=1]
                 */
                // public static FILTER_FROM_FRIEND: number = 1;
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseCommentSearchParam.prototype, "FILTER_FROM_FOLLOW", {
                /**
                 * Get from favorites.
                 * @since 1.0
                 * @static @constant
                 * @property {Number} [FILTER_FROM_FOLLOW=2]
                 */
                // public static FILTER_FROM_FOLLOW: number = 2;
                get: function () {
                    return 2;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Get posts made by the current user.
             * @since 1.0
             * @static @constant
             * @property {Number} [FILTER_FROM_SELF=4]
             */
            // public get FILTER_FROM_SELF: number = 4;
            MiiverseCommentSearchParam.FILTER_FROM_SELF = function () {
                return 4;
            };
            Object.defineProperty(MiiverseCommentSearchParam.prototype, "FILTER_BODY_TEXT", {
                /**
                 * Get posts with text.
                 * @since 1.0
                 * @static @constant
                 * @property {Number} [FILTER_BODY_TEXT=8]
                 */
                // public static FILTER_BODY_TEXT: number = 8;
                get: function () {
                    return 8;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseCommentSearchParam.prototype, "FILTER_BODY_MEMO", {
                /**
                 * Get posts with a drawn memo.
                 * @since 1.0
                 * @static @constant
                 * @property {Number} [FILTER_BODY_MEMO=16]
                 */
                // public static FILTER_BODY_MEMO: number = 16;
                get: function () {
                    return 16;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseCommentSearchParam.prototype, "FILTER_DISTINCT_PID", {
                /**
                * Get posts from a specific user.
                * @since 1.0
                * @static @constant
                * @property {Number} [FILTER_DISTINCT_PID=32]
                */
                // public static FILTER_DISTINCT_PID: number = 32;
                get: function () {
                    return 32;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseCommentSearchParam.prototype, "FILTER_WITH_MII_DATA", {
                /**
                * Get posts with Mii data attached.
                * @since 1.0
                * @static @constant
                * @property {Number} [FILTER_WITH_MII_DATA=64]
                */
                // public static FILTER_WITH_MII_DATA: number = 64;
                get: function () {
                    return 64;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseCommentSearchParam.prototype, "FILTER_WITH_SPOILER", {
                /**
                * Get posts that are marked as spoilers.
                * @since 1.0
                * @static @constant
                * @property {Number} [FILTER_WITH_SPOILER=256]
                */
                // public static FILTER_WITH_SPOILER: number = 256;
                get: function () {
                    return 256;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseCommentSearchParam.prototype, "FROM_DEFAULT", {
                get: function () {
                    return "fromDefault";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseCommentSearchParam.prototype, "FROM_FAVORITE", {
                /**
                * Get posts from the users that are followed by the current user.
                * @since 1.0
                * @static @constant
                * @property {String} [FROM_FAVORITE='fromFavorite']
                */
                // public static FROM_FAVORITE: string = "fromFavorite";
                get: function () {
                    return "fromFavorite";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseCommentSearchParam.prototype, "FROM_FRIEND", {
                /**
                * Get posts from the current user's friends.
                * @since 1.0
                * @static @constant
                * @property {String} [FROM_FRIEND='fromFriend']
                */
                // public static FROM_FRIEND: string = "fromFriend";
                get: function () {
                    return "fromFriend";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseCommentSearchParam.prototype, "FROM_SELF", {
                /**
                * Get posts from the current user.
                * @since 1.0
                * @static @constant
                * @property {String} [FROM_SELF='fromSelf']
                */
                // public static FROM_SELF: string = "fromSelf";
                get: function () {
                    return "fromSelf";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseCommentSearchParam.prototype, "MAXIMUM_POST_COUNT", {
                get: function () {
                    return 30;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // STATIC PROPERTIES
            //-------------------------------------------------------------------------
            // FROM
            /**
             * Default (get without distinction).
             * @since 1.0
             * @static @constant
             * @property {Number} [FILTER_NONE=0]
             */
            MiiverseCommentSearchParam.FILTER_NONE = 0;
            /**
            * Get posts from everyone.
            * @since 1.0
            * @static @constant
            * @property {String} [FROM_DEFAULT='fromDefault']
            */
            MiiverseCommentSearchParam.FROM_DEFAULT = "fromDefault";
            /**
            * The maximum number of posts that can be requested from one call of `{@link nwf.mv.Miiverse#getPostList getPostList}`.
            * This value can be changed by `{@link nwf.mv.Miiverse#initialize nwf.mv.Miiverse.getInstance().initialize()}`.
            * @since 1.0
            * @static @readonly
            * @property {Number} [MAXIMUM_POST_COUNT=30]
            */
            MiiverseCommentSearchParam.MAXIMUM_POST_COUNT = 30;
            return MiiverseCommentSearchParam;
        })();
        mv.MiiverseCommentSearchParam = MiiverseCommentSearchParam;
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        var MiiverseUploadedPost = (function () {
            function MiiverseUploadedPost() {
            }
            Object.defineProperty(MiiverseUploadedPost.prototype, "hasBodyText", {
                /**
                 * Class containing the structure of an uploaded Miiverse post.
                 * This is returned as the `{@link nwf.events.MiiverseEvent#uploadResult uploadResult}` property of an event object when the `{@link nwf.mv.Miiverse#sendPost sendPost}` method succeeds.
                 *
                 * @class nwf.mv.MiiverseUploadedPost
                 * @author Ryan Lynd
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                //---------------------------------
                // Post Details
                //---------------------------------
                /**
                * If set to `true`, the post has `#body` text attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasBodyText=false]
                * @readonly
                * @since 1.7
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedPost.prototype, "hasAppData", {
                /**
                * If set to `true`, the post has `#appData` attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasAppData=false]
                * @readonly
                * @since 1.7
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedPost.prototype, "hasMemo", {
                /**
                * If set to `true`, the post has a `#memo` attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasMemo=false]
                * @readonly
                * @since 1.7
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedPost.prototype, "id", {
                //---------------------------------
                // IDs
                //---------------------------------
                /**
                 * Post ID.
                 * @property {String} [id='']
                 * @since 1.7
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedPost.prototype, "body", {
                //---------------------------------
                // Post Content
                //---------------------------------
                /**
                 * Body of post.
                 * @property {String} [body='']
                 * @since 1.7
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedPost.prototype, "memo", {
                /**
                 * Post memo (image).
                 * @property {HTMLImageElement} [memo=new Image]
                 * @since 1.7
                 * @readonly
                 */
                get: function () {
                    return new Image();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedPost.prototype, "appData", {
                /**
                 * A `{@link Blob Blob}` or `{@link String String}` of up to 1024 bytes that is saved with the post. This will be the same type as the `{@link nwf.mv.MiiverseUploadPost#appData appData}` that was set on the `{@link nwf.mv.MiiverseUploadPost MiiverseUploadPost}`. This returns `null` if no `appData` exists for this post.
                 * @property {null | Blob | String} [appData=null]
                 * @since 1.7
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedPost.prototype, "type", {
                /**
                 * Type of post.
                 * The value returned by this property corresponds to a bit flag.
                 *
                 * @property {Number} [type=nwf.mv.MiiverseUploadedPostType.FLAG_NONE]
                 * @see nwf.mv.MiiverseUploadedPostType
                 * @readonly
                 * @since 1.7
                 */
                get: function () {
                    return nwf.mv.MiiverseUploadedPostType.FLAG_NONE;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedPost.prototype, "miiExpression", {
                //---------------------------------
                // Mii Data
                //---------------------------------
                /**
                 * Expression of the Mii character on the post; also called the `feelingID`.
                 * This is the face set on the Mii that will be shown with the post in the Miiverse application.
                 * @property {Number} [miiExpression = nwf.mv.MiiverseFeelingType.FEELING_NORMAL]
                 * @see nwf.mv.MiiverseFeelingType
                 * @since 1.7
                 * @readonly
                 */
                get: function () {
                    return nwf.mv.MiiverseFeelingType.FEELING_NORMAL;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedPost.prototype, "miiName", {
                /**
                 * The user's Mii Name.
                 * @property {String} [miiName='']
                 * @since 1.8.2
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Draws the attached memo directly into a provided canvas.
             * The canvas must have dimensions of 320x120 or an error will be thrown.
             * @param {HTMLCanvasElement} targetCanvas The canvas that the memo will be drawn in to.
             * @since 1.7
             * @see nwf.mv.MiiverseUploadedPost.memo
             */
            MiiverseUploadedPost.prototype.renderMemo = function (targetCanvas) {
                return null;
            };
            return MiiverseUploadedPost;
        })();
        mv.MiiverseUploadedPost = MiiverseUploadedPost;
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        var MiiverseUploadedComment = (function () {
            function MiiverseUploadedComment() {
            }
            Object.defineProperty(MiiverseUploadedComment.prototype, "hasMemo", {
                /**
                 * Class containing the structure of an uploaded Miiverse comment.
                 * This is returned as the `{@link nwf.events.MiiverseEvent#uploadResult uploadResult}` property of an event object when the `{@link nwf.mv.Miiverse#sendComment sendComment}` method succeeds.
                 *
                 * @class nwf.mv.MiiverseUploadedComment
                 * @author Ryan Lynd
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                //---------------------------------
                // Comment Details
                //---------------------------------
                /**
                 * If set to `true`, the comment has a `#memo` attached.
                 * If set to `false`, it does not.
                 * @property {Boolean} [hasMemo=false]
                 * @readonly
                 * @since 1.7
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedComment.prototype, "hasBodyText", {
                /**
                * If set to `true`, the comment has `#body` text attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasBodyText=false]
                * @readonly
                * @since 1.7
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedComment.prototype, "hasAppData", {
                /**
                * If set to `true`, the comment has `#appData` attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasAppData=false]
                * @readonly
                * @since 1.7
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedComment.prototype, "isSpoiler", {
                /**
                 * If set to `true`, the post could contain a spoiler.
                 * If set to `false`, it does not.
                 * @property {Boolean} [isSpoiler=false]
                 * @readonly
                 * @since 1.7
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedComment.prototype, "id", {
                //---------------------------------
                // IDs
                //---------------------------------
                /**
                 * Post ID.
                 * @property {String} [id='']
                 * @since 1.7
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedComment.prototype, "body", {
                //---------------------------------
                // Post Content
                //---------------------------------
                /**
                 * Body of comment.
                 * @property {String} [body='']
                 * @since 1.7
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedComment.prototype, "memo", {
                /**
                 * Post memo (image).
                 * @property {HTMLImageElement} [memo=new Image]
                 * @since 1.7
                 * @readonly
                 */
                get: function () {
                    return new Image();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedComment.prototype, "appData", {
                /**
                * A `{@link Blob Blob}` or `{@link String String}` of up to 1024 bytes that is saved with the comment. This will be the same type as the `{@link nwf.mv.MiiverseUploadComment#appData appData}` that was set on the `{@link nwf.mv.MiiverseUploadComment MiiverseUploadComment}`. This returns `null` if no `appData` exists for this comment.
                * @property {null | Blob | String} [appData=null]
                * @since 1.7
                */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedComment.prototype, "type", {
                /**
                 * Type of comment.
                 * The value returned by this property corresponds to a bit flag.
                 *
                 * @property {Number} [type=nwf.mv.MiiverseUploadedPostType.FLAG_NONE]
                 * @see nwf.mv.MiiverseUploadedPostType
                 * @readonly
                 * @since 1.7
                 */
                get: function () {
                    return nwf.mv.MiiverseUploadedPostType.FLAG_NONE;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedComment.prototype, "miiExpression", {
                //---------------------------------
                // Mii Data
                //---------------------------------
                /**
                 * Expression of the Mii character on the comment; also called the `feelingID`.
                 * This is the face set on the Mii that will be shown with the comment in the Miiverse application.
                 * @property {Number} [miiExpression = nwf.mv.MiiverseFeelingType.FEELING_NORMAL]
                 * @see nwf.mv.MiiverseFeelingType
                 * @since 1.7
                 * @readonly
                 */
                get: function () {
                    return nwf.mv.MiiverseFeelingType.FEELING_NORMAL;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseUploadedComment.prototype, "miiName", {
                /**
                 * The user's Mii Name.
                 * @property {String} [miiName='']
                 * @since 1.8.2
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             *
             * Draws the attached memo directly into a provided canvas.
             * The canvas must have dimensions of 320x120 or an error will be thrown.
             * @param {HTMLCanvasElement} targetCanvas The canvas that the memo will be drawn in to.
             * @since 1.7
             * @see nwf.mv.MiiverseUploadedComment.memo
             */
            MiiverseUploadedComment.prototype.renderMemo = function (targetCanvas) {
                return null;
            };
            return MiiverseUploadedComment;
        })();
        mv.MiiverseUploadedComment = MiiverseUploadedComment;
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        var MiiverseDownloadedComment = (function () {
            function MiiverseDownloadedComment() {
            }
            Object.defineProperty(MiiverseDownloadedComment.prototype, "type", {
                /**
                 * Class contains the structure of a downloaded Miiverse comment.
                 *
                 * @class nwf.mv.MiiverseDownloadedComment
                 * @author Ryan Lynd
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                //---------------------------------
                // Post Details
                //---------------------------------
                /**
                 * Type of post.
                 * @property {nwf.mv.MiiverseDownloadedPostType} [type=nwf.mv.MiiverseDownloadedPostType.FLAG_NONE]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return nwf.mv.MiiverseDownloadedPostType.FLAG_NONE;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "dateCreated", {
                /**
                 * Date the post was created.
                 * @property {Date} [dateCreated=new Date()]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return new Date();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "hasMemo", {
                /**
                 * If set to `true`, the post has a `#memo` attached.
                 * If set to `false`, it does not.
                 * @property {Boolean} [hasMemo=false]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "hasBodyText", {
                /**
                * If set to `true`, the post has `#body` text attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasBodyText=false]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "hasMiiData", {
                /**
                * If set to `true`, the post has Mii data attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasMiiData=false]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "hasScreenshot", {
                /**
                * If set to `true`, the post has a `#screenshot` image attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasScreenshot=false]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "hasExternalURL", {
                /**
                * If set to `true`, the post has an external `#dataURL` link attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasExternalURL=false]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "hasAppData", {
                /**
                * If set to `true`, the post has `#appData` attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasAppData=false]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "isSpoiler", {
                /**
                 * If set to `true`, the post could contain a spoiler.
                 * If set to `false`, it does not.
                 * @property {Boolean} [isSpoiler=false]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "dataURL", {
                /**
                 * The external URL that is attached to the post.
                 * @property {String} [dataURL='']
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "id", {
                //---------------------------------
                // IDs
                //---------------------------------
                /**
                 * Post ID.
                 * @property {String} [id='']
                 * @since 1.4
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "posterID", {
                /**
                 * The `{@link nwf.act.NintendoAccount#principalID principalID}` of the user that added the comment.
                 * @property {Number} [posterID=0]
                 * @since 1.4
                 * @readonly
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "countryID", {
                /**
                 * Country Code of the post.
                 * @readonly
                 * @property {Number} [countryID=0]
                 * @since 1.4
                 * @see nwf.system.WiiUCountryCode
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "languageID", {
                /**
                 * Language Code of the post.
                 * @readonly
                 * @property {Number} [languageID=0]
                 * @since 1.4
                 * @see nwf.system.WiiULanguageCode
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "regionID", {
                /**
                 * Region Code of the post.
                 * @readonly
                 * @property {Number} [regionID=0]
                 * @since 1.4
                 * @see nwf.system.WiiURegionCode
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "body", {
                //---------------------------------
                // Post Content
                //---------------------------------
                /**
                 * Body of post.
                 * @property {String} [body='']
                 * @since 1.4
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "memo", {
                /**
                 * Post memo (image).
                 * @property {HTMLImageElement} [memo=new Image]
                 * @since 1.4
                 * @readonly
                 */
                get: function () {
                    return new Image();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "screenshot", {
                /**
                 * Screenshot from game.
                 * `#downloadExternalImageData` must be called before this will return a valid value.
                 * @property {HTMLImageElement} [screenshot=new Image]
                 * @since 1.4
                 * @readonly
                 */
                get: function () {
                    return new Image();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "tag", {
                /**
                 * The tag attched to the post.
                 * @property {String} [tag='']
                 * @since 1.4
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "appData", {
                /**
                * A `{@link Blob Blob}` or `{@link String String}` of up to 1024 bytes that is saved with the comment. Whether this is a `{@link Blob Blob}` or `{@link String String}` is determined by the `{@link nwf.mv.MiiverseCommentSearchParam#appDataAsString appDataAsString}` property of `{@link nwf.mv.MiiverseCommentSearchParam MiiverseCommentSearchParam}`. This returns `null` if no `appData` exists for this comment.
                * @property {null | Blob | String} [appData=null]
                * @since 1.4
                */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "isMyPost", {
                /**
                 * If set to `true`, the comment was created by the current user.
                 * If set to `false`, it was not.
                 *
                 * @property {Boolean} [isMyPost=false]
                 * @since 1.8.2
                 * @readonly
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "miiExpression", {
                //---------------------------------
                // Mii Data
                //---------------------------------
                /**
                 * Expression of the Mii character on the post; also called the `feelingID`.
                 * This is the face set on the Mii that will be shown with the post in the Miiverse application.
                 * @property {Number} [miiExpression = nwf.mv.MiiverseFeelingType.FEELING_NORMAL]
                 * @see nwf.mv.MiiverseFeelingType
                 * @since 1.1
                 * @readonly
                 */
                get: function () {
                    return nwf.mv.MiiverseFeelingType.FEELING_NORMAL;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedComment.prototype, "miiName", {
                /**
                 * Mii Screen Name (nickName).
                 * @property {String} [miiName='']
                 * @since 1.4
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
            *
            * Downloads the external image.
            * @param {Function} callback The callback that will be called when the download is complete.
            * @param {Object} callback.event An `Event` object with an additional status property.
            * @param {Number} callback.event.status The status property is 0 on success or an `nwf.system.SystemErrorCode` value on failure.
            * @since 1.4
            * @async
            * @returns {Boolean} Returns `true` if the download started correctly, or `false` if it did not.
            */
            MiiverseDownloadedComment.prototype.downloadExternalImageData = function (callback) {
                return true;
            };
            /**
             *
             * Draws the attached memo directly into a provided canvas.
             * The canvas must have dimensions of 320x120 or it will throw an error.
             * @param {HTMLCanvasElement} targetCanvas The canvas that the memo will be drawn in to.
             * @since 1.4.5
             * @see nwf.mv.MiiverseDownloadedComment.memo
             */
            MiiverseDownloadedComment.prototype.renderMemo = function (targetCanvas) {
                return null;
            };
            return MiiverseDownloadedComment;
        })();
        mv.MiiverseDownloadedComment = MiiverseDownloadedComment;
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        var MiiverseDownloadedCommunity = (function () {
            function MiiverseDownloadedCommunity() {
            }
            Object.defineProperty(MiiverseDownloadedCommunity.prototype, "hasTitle", {
                /**
                 * Class contains the structure of a downloaded Miiverse community.
                 *
                 * @class nwf.mv.MiiverseDownloadedCommunity
                 * @author Ryan Lynd
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                //---------------------------------
                // Community Details
                //---------------------------------
                /**
                * If set to `true`, the community has a title attached. If set to `false`, it does not.
                * @property {Boolean} [hasTitle=false]
                * @readonly
                * @since 1.2
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedCommunity.prototype, "hasDescription", {
                /**
                * If set to `true`, the community has a description attached. If set to `false`, it does not.
                * @property {Boolean} [hasDescription=false]
                * @readonly
                * @since 1.2
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedCommunity.prototype, "hasIcon", {
                /**
                * If set to `true`, the community has an icon attached. If set to `false`, it does not.
                * @property {Boolean} [hasIcon=false]
                * @readonly
                * @since 1.2
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedCommunity.prototype, "hasAppData", {
                /**
                * If set to `true`, the community has `#appData` attached. If set to `false`, it does not.
                * @property {Boolean} [hasAppData=false]
                * @readonly
                * @since 1.2
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedCommunity.prototype, "ownerPid", {
                //---------------------------------
                // IDs
                //---------------------------------
                /**
                 * The poster ID of the creating user.
                 * @property {uint64} [ownerPid=0]
                 * @since 1.2
                 * @readonly
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedCommunity.prototype, "communityID", {
                /**
                 * Community ID.
                 * @property {uint32} [communityID=0]
                 * @since 1.2
                 * @readonly
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedCommunity.prototype, "communityCode", {
                /**
                 * A unique code for the community.
                 * @readonly
                 * @property {String} [communityCode='']
                 * @since 1.2
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedCommunity.prototype, "description", {
                //---------------------------------
                // Community Content
                //---------------------------------
                /**
                 * Description of the community.
                 * @property {String} [description='']
                 * @since 1.2
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedCommunity.prototype, "icon", {
                /**
                 * The icon representing the community.
                 * @property {HTMLImageElement} [icon= new Image]
                 * @since 1.2
                 * @readonly
                 */
                get: function () {
                    return new Image();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedCommunity.prototype, "title", {
                /**
                 * The title attached to the community.
                 * @property {String} [title='']
                 * @since 1.2
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedCommunity.prototype, "appData", {
                /**
                * A `{@link Blob Blob}` of up to 1024 bytes that are saved with the community. This returns `null` if no `appData` exists for this community.
                * @property {Blob} [appData={}]
                * @since 1.5
                */
                get: function () {
                    return {};
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedCommunity.prototype, "appDataString", {
                /**
                * A string of up to 1024 characters that are saved with the community. This returns `null` if no `appDataString` exists.
                * @property {String} [appDataString='']
                * @since 1.2
                * @readonly
                * @deprecated 1.5 Use `#appData` instead.
                */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            return MiiverseDownloadedCommunity;
        })();
        mv.MiiverseDownloadedCommunity = MiiverseDownloadedCommunity;
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        var MiiverseDownloadedPost = (function () {
            function MiiverseDownloadedPost() {
            }
            Object.defineProperty(MiiverseDownloadedPost.prototype, "type", {
                /**
                 * Class contains the structure of a downloaded Miiverse post.
                 *
                 * @class nwf.mv.MiiverseDownloadedPost
                 * @author Ryan Lynd
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                //---------------------------------
                // Post Details
                //---------------------------------
                /**
                 * Type of post.
                 * @property {nwf.mv.MiiverseDownloadedPostType} [type=nwf.mv.MiiverseDownloadedPostType.FLAG_NONE]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return nwf.mv.MiiverseDownloadedPostType.FLAG_NONE;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "dateCreated", {
                /**
                 * Date the post was created.
                 * @property {Date} [dateCreated=new Date()]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return new Date();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "hasMemo", {
                /**
                 * If set to `true`, the post has a `#memo` attached.
                 * If set to `false`, it does not.
                 * @property {Boolean} [hasMemo=false]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "hasBodyText", {
                /**
                * If set to `true`, the post has `#body` text attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasBodyText=false]
                * @readonly
                * @since 1.0
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "hasMiiData", {
                /**
                * If set to `true`, the post has Mii data attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasMiiData=false]
                * @readonly
                * @since 1.0
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "hasScreenshot", {
                /**
                * If set to `true`, the post has a `#screenshot` image attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasScreenshot=false]
                * @readonly
                * @since 1.0
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "hasExternalURL", {
                /**
                * If set to `true`, the post has an external `#dataURL` link attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasExternalURL=false]
                * @readonly
                * @since 1.0
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "hasAppData", {
                /**
                * If set to `true`, the post has `#appData` attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasAppData=false]
                * @readonly
                * @since 1.0
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "hasAppDataString", {
                /**
                * If set to `true`, the post has an `AppData` string attached.
                * If set to `false`, it does not.
                * @property {Boolean} [hasAppDataString=false]
                * @readonly
                * @deprecated 1.4 Use nwf.mv.MiiverseDownloadedPost.hasAppData instead.
                * @since 1.0
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "empathyAdded", {
                /**
                * If set to `true`, the post has been given a Yeah by the Active `{@link nwf.act.NintendoAccount Account}`.
                * If set to `false`, it has not.
                *
                * __Note:__ _This will always return `false` unless `nwf.mv.MiiverseSearchParam.empathyAdded` was set to `true` when this post was fetched with `nwf.mv.Miiverse.getPostList`._
                * @property {Boolean} [empathyAdded=false]
                * @readonly
                * @since 1.0
                */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "isSpoiler", {
                /**
                 * If set to `true`, the post could contain a spoiler.
                 * If set to `false`, it does not.
                 * @property {Boolean} [isSpoiler=false]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "dataURL", {
                /**
                 * The external URL that is attached to the post.
                 * @property {String} [dataURL='']
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "replyCount", {
                /**
                 * Number or replies.
                 * @property {Number} [replyCount=0]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "empathyCount", {
                /**
                * Number of Yeah!(s) for this post.
                * @property {Number} [empathyCount=0]
                * @readonly
                * @since 1.0
                */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "id", {
                //---------------------------------
                // IDs
                //---------------------------------
                /**
                 * Post ID.
                 * @property {String} [id='']
                 * @since 1.0
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "posterID", {
                /**
                 * The `{@link nwf.act.NintendoAccount#principalID principalID}` of the user that uploaded the post.
                 * @property {Number} [posterID=0]
                 * @since 1.0
                 * @readonly
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "communityID", {
                /**
                 * Community ID.
                 * @property {Number} [communityID=0]
                 * @since 1.0
                 * @readonly
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "countryID", {
                /**
                 * Country Code of the post.
                 * @readonly
                 * @property {uint8} [countryID=0]
                 * @since 1.0
                 * @see nwf.system.WiiUCountryCode
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "languageID", {
                /**
                 * Language Code of the post.
                 * @readonly
                 * @property {uint8} [languageID=0]
                 * @since 1.0
                 * @see nwf.system.WiiULanguageCode
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "regionID", {
                /**
                 * Region Code of the post.
                 * @readonly
                 * @property {Number} [regionID=0]
                 * @since 1.0
                 * @see nwf.system.WiiURegionCode
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "body", {
                //---------------------------------
                // Post Content
                //---------------------------------
                /**
                 * Body of post.
                 * @property {String} [body='']
                 * @since 1.0
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "memo", {
                /**
                 * Post memo (image).
                 * @property {HTMLImageElement} [memo=new Image]
                 * @since 1.0
                 * @readonly
                 */
                get: function () {
                    return new Image();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "screenshot", {
                /**
                 * Screenshot from game.
                 * `#downloadExternalImageData` must be called before this will return a valid value.
                 * @property {HTMLImageElement} [screenshot=new Image]
                 * @since 1.0
                 * @readonly
                 */
                get: function () {
                    return new Image();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "tag", {
                /**
                 * The tag attched to the post.
                 * @property {String} [tag='']
                 * @since 1.0
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "appData", {
                /**
                * A `{@link Blob Blob}` of up to 1024 bytes that are saved with the post. Whether this is a `{@link Blob Blob}` or `{@link String String}` is determined by `{@link nwf.mv.MiiverseSearchParam#appDataAsString appDataAsString}` property of `{@link nwf.mv.MiiverseSearchParam MiiverseSearchParam}`. This returns `null` if no `appData` exists for this post.
                * @property {null | Blob | String} [appData=null]
                * @since 1.0
                */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "appDataString", {
                /**
                * A string of up to 1024 characters that are saved with the post.
                * This returns `null` if no `appDataString` exists.
                * @property {String} [appDataString='']
                * @since 1.0
                * @readonly
                * @deprecated 1.4 Use nwf.mv.MiiverseDownloadedPost.appData instead.
                */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "isMyPost", {
                /**
                 * If set to `true`, the post was created by the current user.
                 * If set to `false`, it was not.
                 *
                 * @property {Boolean} [isMyPost=false]
                 * @since 1.8.2
                 * @readonly
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "miiExpression", {
                //---------------------------------
                // Mii Data
                //---------------------------------
                /**
                 * Expression of the Mii character on the post; also called the `feelingID`.
                 * This is the face set on the Mii that will be shown with the post in the Miiverse application.
                 * @property {Number} [miiExpression = nwf.mv.MiiverseFeelingType.FEELING_NORMAL]
                 * @see nwf.mv.MiiverseFeelingType
                 * @since 1.1
                 * @readonly
                 */
                get: function () {
                    return nwf.mv.MiiverseFeelingType.FEELING_NORMAL;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedPost.prototype, "miiName", {
                /**
                 * Mii Screen Name (nickName).
                 * @property {String} [miiName='']
                 * @since 1.0
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Adds empathy (Yeah!) to the post from the current user.
             * @param {Function} callback The callback that will be called when the operation is complete.
             * When this callback has fired the `#empathyAdded` and `#empathyCount` properties of the `MiiverseDownloadedPost` will be updated to reflect the change.
             * @param {Object} callback.event An `Event` object with an additional status property.
             * @param {Number} callback.event.status The status property is 0 on success or an `nwf.system.SystemErrorCode` value on failure.
             * The status property is 0 on success or an `nwf.system.SystemErrorCode` value on failure.
             * @see nwf.mv.Miiverse.addEmpathy
             * @since 1.0
             * @async
             */
            MiiverseDownloadedPost.prototype.addEmpathy = function (callback) {
                return null;
            };
            /**
             * Removes  a previously added empathy (Yeah!) from the post that was added by the current user.
             * @param {Function} callback The callback that will be called when the operation is complete.
             * When this callback has fired the `#empathyAdded` and `#empathyCount` properties of the `MiiverseDownloadedPost` will be updated to reflect the change.
             * @param {Object} callback.event An `Event` object with an additional status property.
             * @param {Number} callback.event.status The status property is 0 on success or an `nwf.system.SystemErrorCode` value on failure.
             * The status property is 0 on success or an `nwf.system.SystemErrorCode` value on failure.
             * @see nwf.mv.Miiverse.removeEmpathy
             * @since 1.7
             * @async
             */
            MiiverseDownloadedPost.prototype.removeEmpathy = function (callback) {
                return null;
            };
            /**
            * Downloads the external image.
            * @param {Function} callback The callback that will be called when the download is complete.
            * @param {Object} callback.event An `Event` object with an additional status property.
            * @param {Number} callback.event.status The status property is 0 on success or an `nwf.system.SystemErrorCode` value on failure.
            * @since 1.0
            * @async
            * @returns {Boolean} Returns `true` if the download started correctly, or `false` if it did not.
            */
            MiiverseDownloadedPost.prototype.downloadExternalImageData = function (callback) {
                return true;
            };
            /**
             * Draws the attached memo directly into a provided canvas.
             * The canvas must have dimensions of 320x120 or it will throw an error.
             * @param {HTMLCanvasElement} targetCanvas The canvas that the memo will be drawn in to.
             * @since 1.0.5
             * @see nwf.mv.MiiverseDownloadedComment.memo
             */
            MiiverseDownloadedPost.prototype.renderMemo = function (targetCanvas) {
                return null;
            };
            return MiiverseDownloadedPost;
        })();
        mv.MiiverseDownloadedPost = MiiverseDownloadedPost;
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        var MiiverseDownloadedUserData = (function () {
            function MiiverseDownloadedUserData() {
            }
            Object.defineProperty(MiiverseDownloadedUserData.prototype, "isCurrentUser", {
                /**
                 * Class contains the structure of a downloaded Miiverse user.
                 *
                 * @class nwf.mv.MiiverseDownloadedUserData
                 * @author Aaron Ward
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * If set to `true`, the user data corresponds to the current user.
                 * If set to `false`, it does not.
                 *
                 * @property {Boolean} [isCurrentUser=false]
                 * @since 1.8.2
                 * @readonly
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedUserData.prototype, "principalID", {
                //---------------------------------
                // IDs
                //---------------------------------
                /**
                 * The Principal ID (PID) of the user.
                 * @property {Number} [principalID = 0]
                 * @since 1.8.1
                 * @readonly
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MiiverseDownloadedUserData.prototype, "miiName", {
                //---------------------------------
                // Mii Data
                //---------------------------------
                /**
                 * Mii Screen Name (nickname).
                 * @property {String} [miiName = '']
                 * @since 1.8.1
                 * @readonly
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            return MiiverseDownloadedUserData;
        })();
        mv.MiiverseDownloadedUserData = MiiverseDownloadedUserData;
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        /**
         * The Miiverse Upload Post Type.
         *
         * @enum nwf.mv.MiiverseUploadedPostType
         * @author Shawn Gates
         */
        mv.MiiverseUploadedPostType = {
            /**
              * Post has no specific data.
              * @type Number
              * @since 1.8.1
              * @static @constant */
            FLAG_NONE: 0,
            /**
             * Post body is text.
             * @type Number
             * @since 1.8.1
             * @static @constant */
            FLAG_WITH_BODY_TEXT: 1,
            /**
             * Post body is a `memo`.
             * @type Number
             * @since 1.8.1
             * @static @constant */
            FLAG_WITH_BODY_MEMO: 2,
            /**
             * Post has App Data attached.
             * @type Number
             * @since 1.8.1
             * @static @constant */
            FLAG_WITH_APP_DATA: 4,
            /**
             * Post contains spoilers.
             * @type Number
             * @since 1.8.1
             * @static @constant */
            FLAG_SPOILER: 8
        };
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        /**
         * The Miiverse Feeling Type.
         *
         * @enum nwf.mv.MiiverseFeelingType
         * @author Shawn Gates
         */
        mv.MiiverseFeelingType = {
            /**
             *
             * @type Number
             * @since 1.8.1
             * @static
             * @constant
             */
            FEELING_NORMAL: 0,
            /**
             *
             * @type Number
             * @since 1.8.1
             * @static
             * @constant
             */
            FEELING_HAPPY: 1,
            /**
             *
             * @type Number
             * @since 1.8.1
             * @static
             * @constant
             */
            FEELING_COOL: 2,
            /**
             *
             * @type Number
             * @since 1.8.1
             * @static
             * @constant
             */
            FEELING_SURPRISED: 3,
            /**
             *
             * @type Number
             * @since 1.8.1
             * @static
             * @constant
             */
            FEELING_FRUSTRATED: 4,
            /**
             *
             * @type Number
             * @since 1.8.1
             * @static
             * @constant
             */
            FEELING_PUZZLED: 5,
        };
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        /**
         * The Miiverse Downloaded Post Type.
         *
         * @enum nwf.mv.MiiverseDownloadedPostType
         * @author Shawn Gates
         */
        mv.MiiverseDownloadedPostType = {
            /**
              * Post has no specific data.
              * @type Number
              * @since 1.0
              * @static @constant */
            FLAG_NONE: 0,
            /**
             * Post has body text.
             * @type Number
             * @since 1.0
             * @static @constant */
            FLAG_WITH_BODY_TEXT: 1,
            /**
             * Post has a memo.
             * @type Number
             * @since 1.0
             * @static @constant */
            FLAG_WITH_MEMO: 2,
            /**
             * Post has a screenshot attached.
             * @type Number
             * @since 1.0
             * @static @constant */
            FLAG_WITH_SCREENSHOT: 4,
            /**
             * Post has binary data attched.
             * @type Number
             * @since 1.0
             * @static @constant */
            FLAG_WITH_EXT_BINARY_DATA: 8,
            /**
             * Post may contain Mii data.
             * @type Number
             * @since 1.0
             * @static @constant */
            FLAG_WITH_MII_DATA: 16,
            /**
             * Post contains an external URL.
             * @type Number
             * @since 1.0
             * @static @constant */
            FLAG_WITH_EXTERNAL_URL: 32,
            /**
             * Post has application data attached.
             * @type Number
             * @since 1.0
             * @static @constant */
            FLAG_WITH_APP_DATA: 64,
            /**
             * Post has been empathized with (Yeah!).
             * @type Number
             * @since 1.0
             * @static @constant */
            FLAG_EMPATHY_ADDED: 128,
            /**
             * Post is free format.
             * @type Number
             * @since 1.0
             * @static @constant
             * @removed 1.8.3 */
            FLAG_FREE_FORMAT: 256,
            /**
             * Post may contain spoilers.
             * @type Number
             * @since 1.0
             * @static @constant */
            FLAG_SPOILER: 512
        };
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        /**
         * The Miiverse Post Type.
         *
         * @enum nwf.mv.MiiversePostType
         * @author Shawn Gates
         */
        mv.MiiversePostType = {
            /**
             * Post that includes body text instead of memo image.
             * @type String
             * @since 1.0
             * @static @constant */
            TEXT: 'text',
            /**
             * Post that includes drawing instead of body text.
             * @type String
             * @since 1.0
             * @static @constant */
            MEMO: 'memo'
        };
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        /**
         * The Miiverse Upload Post Type.
         *
         * @enum nwf.mv.MiiverseUploadPostType
         * @author Shawn Gates
         */
        mv.MiiverseUploadPostType = {
            /**
              * Post has no specific data.
              * @type Number
              * @since 1.0
              * @static @constant */
            FLAG_NONE: 0,
            /**
             * Post contains spoilers.
             * @type Number
             * @since 1.0
             * @static @constant */
            FLAG_SPOILER: 1,
            /**
             * Post can only be of text format.
             * @type Number
             * @since 1.0
             * @static @constant */
            FLAG_TEXT_ONLY: 2,
            /**
             * Post can only have a memo.
             * @type Number
             * @since 1.0
             * @static @constant */
            FLAG_MEMO_ONLY: 4
        };
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/// <reference path="../events/MiiverseEvent.ts" />
/// <reference path="./MiiverseSearchParam.ts" />
/// <reference path="./MiiverseUploadComment.ts" />
/// <reference path="./MiiverseUploadPost.ts" />
/// <reference path="./MiiverseUserDataSearchParam.ts" />
/// <reference path="./MiiverseCommunitySearchParam.ts" />
/// <reference path="./MiiverseCommentSearchParam.ts" />
/// <reference path="./MiiverseUploadedPost.ts" />
/// <reference path="./MiiverseUploadedComment.ts" />
/// <reference path="./MiiverseDownloadedComment.ts" />
/// <reference path="./MiiverseDownloadedCommunity.ts" />
/// <reference path="./MiiverseDownloadedPost.ts" />
/// <reference path="./MiiverseDownloadedUserData.ts" />
/// <reference path="./MiiverseUploadedPostType.ts" />
/// <reference path="./MiiverseFeelingType.ts" />
/// <reference path="./MiiverseDownloadedPostType.ts" />
/// <reference path="./MiiversePostType.ts" />
/// <reference path="./MiiverseUploadPostType.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var mv;
    (function (mv) {
        var Miiverse = (function (_super) {
            __extends(Miiverse, _super);
            /**
             * Class for interacting with the Nintendo Miiverse.
             *
             * Class purpose - Work with Post data
             *
             * **CAUTION:** Please be aware that anything you post to Miiverse when using the included sample or running client application will be visible to **all** Nintendo Web Framework developers.
             *
             * __Note:__ The Miiverse feature must be enabled in the Features page and the Network Access setting in Platform Features - Network page of Project Settings must NOT be set to disabled for the feature to work and for `nwf.mv` to be defined.
             *
             * <div style="color:#aa0000; font-weight:bold;">
             * Do not post any confidential information, including information owned by Nintendo or information related to your own application in development.
             * </div><br />
             *
             * The `Miiverse` class dispatches the following events:
             *
             * - nwf.events.MiiverseEvent.DOWNLOAD_COMMUNITY_FAILED
             * - nwf.events.MiiverseEvent.DOWNLOAD_COMMUNITY_SUCCESS
             * - nwf.events.MiiverseEvent.DOWNLOAD_POST_FAILED
             * - nwf.events.MiiverseEvent.DOWNLOAD_POST_SUCCESS
             * - nwf.events.MiiverseEvent.INITIALIZATION_FAILED
             * - nwf.events.MiiverseEvent.INITIALIZATION_SUCCESS
             * - nwf.events.MiiverseEvent.UPLOAD_POST_FAILED
             * - nwf.events.MiiverseEvent.UPLOAD_POST_SUCCESS
             * - nwf.events.MiiverseEvent.UPLOAD_COMMENT_FAILED
             * - nwf.events.MiiverseEvent.UPLOAD_COMMENT_SUCCESS
             * - nwf.events.MiiverseEvent.DOWNLOAD_COMMENT_FAILED
             * - nwf.events.MiiverseEvent.DOWNLOAD_COMMENT_SUCCESS
             * - nwf.events.MiiverseEvent.DELETE_POST_FAILED
             * - nwf.events.MiiverseEvent.DELETE_POST_SUCCESS
             * - nwf.events.MiiverseEvent.ADD_EMPATHY_FAILED
             * - nwf.events.MiiverseEvent.ADD_EMPATHY_SUCCESS
             * - nwf.events.MiiverseEvent.REMOVE_EMPATHY_FAILED
             * - nwf.events.MiiverseEvent.REMOVE_EMPATHY_SUCCESS
             * - nwf.events.MiiverseEvent.FOLLOW_USER_SUCCESS
             * - nwf.events.MiiverseEvent.FOLLOW_USER_FAILED
             * - nwf.events.MiiverseEvent.UNFOLLOW_USER_SUCCESS
             * - nwf.events.MiiverseEvent.UNFOLLOW_USER_FAILED
             * - nwf.events.MiiverseEvent.DOWNLOAD_USER_DATA_LIST_SUCCESS
             * - nwf.events.MiiverseEvent.DOWNLOAD_USER_DATA_LIST_FAILED
             *
             * @class nwf.mv.Miiverse
             * @extends nwf.events.EventDispatcher
             * @singleton
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            //---------------------------------------------------------------------
            // CONSTRUCTOR
            //---------------------------------------------------------------------
            /**
             * @private
             * The `new` method is not used to get an instance of a Miiverse object; use #getInstance instead.
             * @method constructor
             * @since 1.0
             */
            function Miiverse() {
                _super.call(this);
            }
            Object.defineProperty(Miiverse.prototype, "isReady", {
                //---------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //---------------------------------------------------------------------
                /**
                 * Returns `true` if the library is ready to begin communicating with the server, or `false` otherwise.
                 * @property {Boolean} [isReady=false]
                 * @since 1.0
                 * @readonly
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Miiverse.prototype, "appParams", {
                /**
                 * Returns an object with details of the post that launched the application.
                 * The Miiverse library must be `{@link nwf.mv.Miiverse#initialize initialized}` before this property will return a valid object.
                 *
                 *      // Get an instance of nwf.mv.Miiverse
                 *      var miiverse = nwf.mv.Miiverse.getInstance();
                 *
                 *      // Add listeners for the Miiverse initialization events
                 *      miiverse.addEventListener(nwf.events.MiiverseEvent.INITIALIZATION_SUCCESS, onInit);
                 *      miiverse.addEventListener(nwf.events.MiiverseEvent.INITIALIZATION_FAILED, onInit);
                 *
                 *      // Function to handle the event
                 *      function onInit(evt) {
                 *          // Now that the Miiverse has initialized we can check the appParams
                 *          console.log(miiverse.appParams);
                 *      }
                 *
                 *      // Initialize Miiverse
                 *      miiverse.initialize();
                 *
                 * @property {Object | null} appParams = {postID:null, communityID:null, appData:null}
                 * @property {String} appParams.postID = null The ID of the post that launched the application.
                 * Will return `null` if the application was not launched from Miiverse.
                 * @property {String} appParams.communityID = null The ID of the community that contained the post that launched the application.
                 * Will return `null` if the application was not launched from Miiverse.
                 * @property {Blob} appParams.appData = null An `appData` object that was attached to the post that launched the application.
                 * Will return `null` if the application was not launched from Miiverse.
                 * @since 1.8.2
                 * @readonly
                 */
                get: function () {
                    return { postID: null, communityID: null, appData: null };
                },
                enumerable: true,
                configurable: true
            });
            //---------------------------------------------------------------------
            // PUBLIC METHODS
            //---------------------------------------------------------------------
            /**
             * Queries the server and returns a list of Miiverse posts.
             * Only one `getPostList` query can be executed at once.
             * Calling the function again before the `DOWNLOAD_POST_SUCCESS`/`DOWNLOAD_POST_FAILED` event occurs will result in the previous call being canceled.
             *
             * @param {nwf.mv.MiiverseSearchParam} searchParam The parameters to query the server with.
             * @returns {Number} Result code.
             * @since 1.0
             * @see nwf.events.MiiverseEvent.DOWNLOAD_POST_SUCCESS
             * @see nwf.events.MiiverseEvent.DOWNLOAD_POST_FAILED
             * @async
             */
            Miiverse.prototype.getPostList = function (searchParam) {
                return 0;
            };
            /**
             * Queries the server and returns a list of Miiverse communities.
             * Only one `getCommunityList` query can be executed at once.
             * Calling the function again before the `DOWNLOAD_COMMUNITY_SUCCESS`/`DOWNLOAD_COMMUNITY_FAILED` event occurs will result in the previous call being canceled.
             *
             * @param {nwf.mv.MiiverseCommunitySearchParam} searchParam The parameters to query the server with.
             * @returns {Number} Result code.
             * @since 1.2
             * @see nwf.events.MiiverseEvent.DOWNLOAD_COMMUNITY_SUCCESS
             * @see nwf.events.MiiverseEvent.DOWNLOAD_COMMUNITY_FAILED
             * @async
             */
            Miiverse.prototype.getCommunityList = function (searchParam) {
                return 0;
            };
            /**
             * Posts a message to the Miiverse.
             * Calling this method will open the Miiverse posting application.
             * The current application will be paused while the posting application is open until the user completes the posting process or cancels.
             * If the user cancels the posting, an `nwf.events.MiiverseEvent.UPLOAD_POST_FAILED` event will be dispatched.
             *
             * @param {nwf.mv.MiiverseUploadPost} post The post to send to the server.
             * @returns {Number} Result code.
             * @since 1.0
             * @see nwf.events.MiiverseEvent.UPLOAD_POST_SUCCESS
             * @see nwf.events.MiiverseEvent.UPLOAD_POST_FAILED
             * @async
             */
            Miiverse.prototype.sendPost = function (post) {
                return 0;
            };
            /**
             * Forcibly terminates the current send/receive operation.
             * Call this function when the operation stops responding for a long period.
             *
             * @returns {Boolean} Returns `true` if the cancel succeeds, or `false` otherwise.
             * @since 1.0
             */
            Miiverse.prototype.cancelOperation = function () {
                return false;
            };
            /**
             * Initializes the Miiverse library.
             * This must be called before other functions are called.
             * The Miiverse library can only be initialized once while the application is running.
             * @param {Number} [maxPostCount=30] The maximum number of posts that can be downloaded from one call to `getPostList`.
             *                                   This value affects the amount of memory that Miiverse allocates before initializing.
             * @returns {null}
             * @since 1.0
             * @see nwf.events.MiiverseEvent.INITIALIZATION_SUCCESS
             * @see nwf.events.MiiverseEvent.INITIALIZATION_FAILED
             * @async
             */
            Miiverse.prototype.initialize = function (maxPostCount) {
                return null;
            };
            /**
             * Launches the Miiverse application.
             * Takes an object that can point the Miiverse application to a specific page.
             *
             * @param {Object} [startParam=null] Only one of this objects properties can be used at a time.
             * If more than one property is present in the parameter object, they will be prioritized in alphabetical order (`community`, `postID`, `user`).
             * @param {Number} [startParam.community=0] The target community to view.
             * @param {String} [startParam.postID="somePostID"] The id of a specific post to view.
             * @param {Number} [startParam.user=0] The id of a user profile to view.
             * @returns {Number} Result code.
             * @since 1.0
             */
            Miiverse.prototype.launchPortal = function (startParam) {
                return 0;
            };
            /**
             * Posts a comment in response to a post.
             * Calling this method will open the Miiverse posting application.
             * The current application will be paused while the posting application is open until the user completes the posting process or cancels.
             * If the user cancels the posting, an `nwf.events.MiiverseEvent.UPLOAD_COMMENT_FAILED` event will be dispatched.
             *
             * @param {nwf.mv.MiiverseUploadComment} comment The comment to send to the server.
             * @returns {Number} Result code.
             * @since 1.4
             * @see nwf.events.MiiverseEvent.UPLOAD_COMMENT_SUCCESS
             * @see nwf.events.MiiverseEvent.UPLOAD_COMMENT_FAILED
             * @async
             */
            Miiverse.prototype.sendComment = function (comment) {
                return 0;
            };
            /**
             * Queries the server and returns a list of Miiverse comments in response to a post.
             * Only one `getCommentList` query can be executed at once.
             * Calling the function again before the `DOWNLOAD_COMMENT_SUCCESS`/`DOWNLOAD_COMMENT_FAILED` event occurs will result in the previous call being canceled.
             *
             * @param {nwf.mv.MiiverseCommentSearchParam} searchParam The parameters to query the server with.
             * @returns {Number} Result code.
             * @since 1.4
             * @see nwf.events.MiiverseEvent.DOWNLOAD_COMMENT_SUCCESS
             * @see nwf.events.MiiverseEvent.DOWNLOAD_COMMENT_FAILED
             * @async
             */
            Miiverse.prototype.getCommentList = function (searchParam) {
                return 0;
            };
            /**
             * Deletes a post from the server.
             * That post must belong to the current user or an error will occur.
             * Calling the function again before the `DELETE_POST_SUCCESS`/`DELETE_POST_FAILED` event occurs will result in the previous call being canceled.
             *
             * @param {String} postID The post to be deleted.
             * @returns {Number} Result code.
             * @since 1.4.5
             * @see nwf.events.MiiverseEvent.DELETE_POST_SUCCESS
             * @see nwf.events.MiiverseEvent.DELETE_POST_FAILED
             * @async
             */
            Miiverse.prototype.deletePost = function (postID) {
                return 0;
            };
            /**
             * Adds empathy (Yeah!) to the specified post.
             * @param {String} postID The `{@link nwf.mv.MiiverseDownloadedPost#id id}` of the `{@link nwf.mv.MiiverseDownloadedPost post}` to add empathy to.
             * @see nwf.mv.MiiverseDownloadedPost.addEmpathy
             * @see nwf.events.MiiverseEvent.ADD_EMPATHY_SUCCESS
             * @see nwf.events.MiiverseEvent.ADD_EMPATHY_FAILED
             * @since 1.7
             * @async
             */
            Miiverse.prototype.addEmpathy = function (postID) {
                return null;
            };
            /**
             * Removes a previously added empathy (Yeah!) that was added by the current user from the specified post.
             * @param {String} postID The `{@link nwf.mv.MiiverseDownloadedPost#id id}` of the `{@link nwf.mv.MiiverseDownloadedPost post}` to remove empathy from.
             * @see nwf.mv.MiiverseDownloadedPost.removeEmpathy
             * @see nwf.events.MiiverseEvent.REMOVE_EMPATHY_SUCCESS
             * @see nwf.events.MiiverseEvent.REMOVE_EMPATHY_FAILED
             * @since 1.7
             * @async
             */
            Miiverse.prototype.removeEmpathy = function (postID) {
                return null;
            };
            /**
             * Follows the specified user's Miiverse posts.
             * @param {Number} principalID The `{@link nwf.act.NintendoAccount#principalID principalID}` of the user to follow.
             * @returns {Number} Result code.
             * @see nwf.events.MiiverseEvent.FOLLOW_USER_SUCCESS
             * @see nwf.events.MiiverseEvent.FOLLOW_USER_FAILED
             * @since 1.7
             * @async
             */
            Miiverse.prototype.followUser = function (principalID) {
                return 0;
            };
            /**
             * Unfollows the specified user's Miiverse posts.
             * @param {Number} principalID The `{@link nwf.act.NintendoAccount#principalID principalID}` of the user to unfollow.
             * @returns {Number} Result code.
             * @see nwf.events.MiiverseEvent.UNFOLLOW_USER_SUCCESS
             * @see nwf.events.MiiverseEvent.UNFOLLOW_USER_FAILED
             * @since 1.7
             * @async
             */
            Miiverse.prototype.unfollowUser = function (principalID) {
                return 0;
            };
            /**
             * Queries the server and returns a list of `nwf.mv.MiiverseDownloadedUserData` objects.
             * Only one `downloadUserData` query can be executed at once.
             * Calling the function again before the `DOWNLOAD_USER_DATA_LIST_SUCCESS`/`DOWNLOAD_USER_DATA_LIST_FAILED` event occurs will result in the previous call being canceled.
             *
             * @param {nwf.mv.MiiverseUserDataSearchParam} searchParam The parameters to query the server with.
             * @returns {Number} Result code.
             * @since 1.8.2
             * @see nwf.events.MiiverseEvent.DOWNLOAD_USER_DATA_LIST_SUCCESS
             * @see nwf.events.MiiverseEvent.DOWNLOAD_USER_DATA_LIST_FAILED
             * @async
             */
            Miiverse.prototype.downloadUserData = function (searchParam) {
                return 0;
            };
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Accesses an instance of the `Miiverse` singleton.
             *
             * @method getInstance
             * @returns {nwf.mv.Miiverse} The `Miiverse` singleton instance.
             * @since 1.0
             * @static
             */
            Miiverse.getInstance = function () {
                if (!this.s_instance) {
                    this.s_instance = new Miiverse();
                }
                return this.s_instance;
            };
            /**
             * Method to test for class availability.
             *
             * @method isSupported
             * @returns {Boolean} Returns `false` if the class is not supported, or `true` if the class is available.
             * @static
             * @since 1.0
             */
            Miiverse.isSupported = function () {
                return false;
            };
            return Miiverse;
        })(nwf.events.EventDispatcher);
        mv.Miiverse = Miiverse;
    })(mv = nwf.mv || (nwf.mv = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var net;
    (function (net) {
        /**
         * Network class for setting global networking parameters.
         *
         * @enum nwf.net.NetworkState
         * @author Cory O'Regan
         * @author Shawn Gates
         */
        net.NetworkState = {
            /**
             * Indicates that the system is currently connected to the network.
             * @type int
             * @since 1.4
             * @static @constant */
            CONNECTED: 0,
            /**
             * Indicates that the system has been disconnected from the network. The system will be in this state for a moment before automatic reconnection attempts begin, and will stay in this state when `nwf.net.Network.workOffline()` has been called to halt automatic reconnection.
             * @type int
             * @since 1.4
             * @static @constant */
            OFFLINE: 2,
            /**
             * Indicates that the system is currently attempting to connect to the network.
             * @type int
             * @since 1.4
             * @static @constant */
            CONNECTING: 1,
        };
    })(net = nwf.net || (nwf.net = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var net;
    (function (net) {
        var NintendoCACert = (function () {
            function NintendoCACert() {
            }
            Object.defineProperty(NintendoCACert.prototype, "NINTENDO_CA", {
                /**
                 * The `NintendoCACert` class can be used to add Nintendo CA certificates to the certificate bundle.
                 *
                 * __Note:__ The Nintendo CA Cert feature must be enabled in the Features page of Project Settings for the feature to work and for `nwf.net.NintendoCACert` to be defined.
                 *
                 * @author Cory O'Regan
                 * @author Shawn Gates
                 * @class nwf.net.NintendoCACert
                 */
                //-------------------------------------------------------------------------
                // STATIC PUBLIC CONSTANTS
                //-------------------------------------------------------------------------
                /**
                 * @property {int} [NINTENDO_CA=100]
                 * @since 1.4
                 * @static @constant
                 */
                // public static NINTENDO_CA: number = 100;
                get: function () {
                    return 100;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoCACert.prototype, "NINTENDO_CA_G2", {
                /**
                 * @property {int} [NINTENDO_CA_G2=101]
                 * @since 1.4
                 * @static @constant
                 */
                // public static NINTENDO_CA_G2: number = 101;
                get: function () {
                    return 101;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoCACert.prototype, "NINTENDO_CA_G3", {
                /**
                 * @property {int} [NINTENDO_CA_G3=102]
                 * @since 1.4
                 * @static @constant
                 */
                // public static NINTENDO_CA_G3: number = 102;
                get: function () {
                    return 102;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoCACert.prototype, "NINTENDO_CLASS2_CA", {
                /**
                 * @property {int} [NINTENDO_CLASS2_CA=103]
                 * @since 1.4
                 * @static @constant
                 */
                // public static NINTENDO_CLASS2_CA: number = 103;
                get: function () {
                    return 103;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoCACert.prototype, "NINTENDO_CLASS2_CA_G2", {
                /**
                 * @property {int} [NINTENDO_CLASS2_CA_G2=104]
                 * @since 1.4
                 * @static @constant
                 */
                // public static NINTENDO_CLASS2_CA_G2: number = 104;
                get: function () {
                    return 104;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NintendoCACert.prototype, "NINTENDO_CLASS2_CA_G3", {
                /**
                 * @property {int} [NINTENDO_CLASS2_CA_G3=105]
                 * @since 1.4
                 * @static @constant
                 */
                // public static NINTENDO_CLASS2_CA_G3: number = 105;
                get: function () {
                    return 105;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Adds a Nintendo CA certificate to the current CA certificate bundle.
             *
             * @method addNintendoCACert
             * @returns {Boolean} Returns `true` if the Nintendo CA certificate was added to the bundle successfully, or `false` if the process failed.
             * @param {int} certificateIdx Index of Nintendo CA certificate as defined by the nwf.net.NintendoCACert constants.
             * @static
             * @since 1.4
             */
            NintendoCACert.prototype.addNintendoCACert = function () {
                return true;
            };
            return NintendoCACert;
        })();
        net.NintendoCACert = NintendoCACert;
    })(net = nwf.net || (nwf.net = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var NetworkEvent = (function (_super) {
            __extends(NetworkEvent, _super);
            /**
             * A `NetworkEvent` object is triggered when a noteworthy event has happened regarding the network connection.
             *
             * @class nwf.events.NetworkEvent
             * @see {@link nwf.net.Network}
             * @extends nwf.events.Event
             * @author Cory O'Regan
             * @author Shawn Gates
             */
            function NetworkEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(NetworkEvent.prototype, "CONNECTED", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when the system successfully connects to the network.
                 *
                 * _Note: #CONNECTED will fire once immediately when a listener is added if the system is already connected to the network._
                 *
                 * @property {string} [CONNECTED='networkConnected']
                 * @since 1.4
                 * @static @constant
                 */
                // public static CONNECTED:string = 'networkConnected';
                get: function () {
                    return 'networkConnected';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NetworkEvent.prototype, "DISCONNECTED", {
                /**
                 * Dispatched when the system is disconnected from the network.
                 * @property {string} [DISCONNECTED='networkDisconnected']
                 * @since 1.4
                 * @static @constant
                 */
                // public static DISCONNECTED:string = 'networkDisconnected';
                get: function () {
                    return 'networkDisconnected';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NetworkEvent.prototype, "FAILED_TO_CONNECT", {
                /**
                 * Dispatched when the system has failed to connect to the network. The system will continue reconnection attempts until nwf.net.Network#workOffline() is called or a connection is made successfully.
                 * @property {string} [FAILED_TO_CONNECT='networkFailedToConnect']
                 * @since 1.4
                 * @static @constant
                 */
                // public static FAILED_TO_CONNECT:string = 'networkFailedToConnect';
                get: function () {
                    return 'networkFailedToConnect';
                },
                enumerable: true,
                configurable: true
            });
            return NetworkEvent;
        })(events.Event);
        events.NetworkEvent = NetworkEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        /**
         * A `NetworkEvent` object is triggered when a noteworthy event has happened regarding the network connection.
         *
         * @class nwf.events.NetworkManagerEvent
         * @see {@link nwf.net.NetworkManager}
         * @extends nwf.events.Event
         * @author Nate Long
         * @lib SupportLibraries.js
         */
        var NetworkManagerEvent = (function (_super) {
            __extends(NetworkManagerEvent, _super);
            function NetworkManagerEvent() {
                _super.apply(this, arguments);
            }
            Object.defineProperty(NetworkManagerEvent.prototype, "CONNECT", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when the system successfully connects to the network and fetches an Independent Service Token.
                 *
                 * @property {string} [CONNECT='connect']
                 * @since 1.8.3
                 * @static @constant
                 */
                get: function () {
                    return 'connect';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NetworkManagerEvent.prototype, "DISCONNECT", {
                /**
                 * Dispatched when the system is disconnected from the network.  The library will attempt to reconnect once, then call nwf.net.Network#workOffline().
                 * @property {string} [DISCONNECTED='disconnect']
                 * @since 1.8.3
                 * @static @constant
                 */
                get: function () {
                    return 'disconnect';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(NetworkManagerEvent.prototype, "FAIL", {
                /**
                 * Dispatched when the system has failed to connect to the network or has failed to retrieve an Independent Service Token.
                 * @property {string} [FAIL='fail']
                 * @since 1.8.3
                 * @static @constant
                 */
                get: function () {
                    return 'fail';
                },
                enumerable: true,
                configurable: true
            });
            return NetworkManagerEvent;
        })(events.Event);
        events.NetworkManagerEvent = NetworkManagerEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/// <reference path="../events/NetworkManagerEvent.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var net;
    (function (net) {
        /**
         * The Network Manager is provided as an optional library to aid implementation and guideline compliance for basic network connection handling.
         * The library automatically handles independent server token acquisition, network connection initialization, and connection status handling.
         *
         * This library can be used in conjunction with the {@link nwf.system.ErrorManager Error Manager} library to ensure that errors reported by the networking interface are handled correctly.
         *
         * The `NetworkManager` class dispatches the following events:
         *
         * - nwf.events.NetworkManagerEvent.CONNECT
         * - nwf.events.NetworkManagerEvent.DISCONNECTED
         * - nwf.events.NetworkManagerEvent.FAIL
         *
         * Usage
         * ---
         *
         * Applications can use this library without modification by including the library in the main HTML file as follows:
         *
         * <script src="path/to/SupportLibraries.min.js"></script>
         * <script>
         *     function onNetworkConnect() {
         *         // Start processing the application
         *     }
         *
         *     function onNetworkFail() {
         *         // Handle the failure to connect to the network
         *     }
         *
         *     nwf.net.NetworkManager.addEventListener(nwf.events.NetworkManagerEvent.FAIL, onNetworkFail);
         *     nwf.net.NetworkManager.addEventListener(nwf.events.NetworkManagerEvent.CONNECT, onNetworkConnect);
         *
         *     nwf.net.NetworkManager.initialize();
         * </script>
         *
         * The library will fire 3 events: CONNECT, DISCONNECT, and FAIL, each corresponding to an event on the network interface.
         * Most applications just need to listen for CONNECT and FAIL, so they know the final result of the initialization process, but some applications may want to listen for DISCONNECT as well in order to react to a loss of connection.
         *
         * @author Nate Long
         * @author Shawn Gates
         * @class nwf.net.NetworkManager
         * @lib SupportLibraries.js
         */
        var NetworkManager = (function () {
            function NetworkManager() {
            }
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Initialize the connection manager.
             *
             * @method initialize
             * @static
             * @since 1.8.3
             */
            NetworkManager.initialize = function () {
            };
            Object.defineProperty(NetworkManager.prototype, "isConnected", {
                /**
                 * This property is set to `true` if the network is connected, `false` if it is not, or `null` if the connection state is unknown.
                 * @property {boolean} [isConnected=null]
                 * @static
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Registers an event listener handler so that the listener can be notified when events are dispatched. Subsequent calls to `addEventListener` with a different listener and/or scope will result in the separate registration of the listener.
             *
             * To prevent possible memory leaks, when you no longer need an event listener, remove it by calling `#removeEventListener` or `#removeAllEventListeners`. This is especially true when switching contexts by changing pages.
             *
             * _If multiple identical `EventListeners` are registered on the same `EventTarget` with the same parameters, the duplicate instances are discarded._
             *
             * @param {String} type The event type for which the user is registering.
             * @param {Function} listener  The listener function that processes the event. This function must accept an `Event` object as its only parameter.
             * @param {Object} [scope=null]  The scope on which to apply the listener call. This will effect the value of `this` within the listener function block. By default the scope will be set to the window or "root" scope of the dispatcher object.
             * @static
             * @since 1.8.3
             */
            NetworkManager.prototype.addEventListener = function (type, listener, scope) {
            };
            /**
             * Allows the removal of event listeners from the event target.
             *
             * _The `listener` function and `scope` must match that which was used to register the event._
             *
             * @see {@link #removeAllEventListeners}
             * @param {String} type Specifies the event type of the `EventListener` being removed.
             * @param {Function} listener  The listener function to be removed.
             * @param {Object} [scope=null]  The scope object of the `EventListener` being removed. If a listener was registered twice with different scopes, each must be removed separately.
             * @static
             * @since 1.8.3
             */
            NetworkManager.prototype.removeEventListener = function (type, listener, scope) {
            };
            /**
             * Removes **ALL** event listeners from the event target. Always double-check to make sure you really want to remove every event listener.
             * @static
             * @since 1.8.3
             */
            NetworkManager.prototype.removeAllEventListeners = function () {
            };
            /**
             * Checks whether the `EventDispatcher` object has any listeners registered for a specific type of event.
             * @param {String} type The type of event to check.
             * @returns {Boolean} Returns `true` if a listener of the specified type is registered, or `false` otherwise.
             * @static
             * @since 1.8.3
             */
            NetworkManager.prototype.hasEventListener = function (type) {
                return false;
            };
            return NetworkManager;
        })();
        net.NetworkManager = NetworkManager;
    })(net = nwf.net || (nwf.net = {}));
})(nwf || (nwf = {}));
/// <reference path="./NetworkState.ts" />
/// <reference path="./NintendoCACert.ts" />
/// <reference path="../events/NetworkEvent.ts" />
/// <reference path="./NetworkManager.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var net;
    (function (net) {
        var Network = (function (_super) {
            __extends(Network, _super);
            /**
             * Network class for setting global networking parameters.
             *
             * __Note:__  The Network Access setting in Platform Features - Network page of Project Settings must NOT be set to disabled for the feature to work and for `nwf.net` to be defined.
             *
             * The `Network` class dispatches the following events:
             *
             * - nwf.events.NetworkEvent.CONNECTED
             * - nwf.events.NetworkEvent.DISCONNECTED
             * - nwf.events.NetworkEvent.FAILED_TO_CONNECT
             *
             * @author Ryan Lynd
             * @author Cory O'Regan
             * @author Shawn Gates
             * @class nwf.net.Network
             * @extends nwf.events.EventDispatcher
             * @singleton
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
            * @private
            * The `new` method is not used to get an instance of the `Network` singleton; use `#getInstance` instead.
            * @method constructor
            * @since 1.4
            */
            function Network() {
                _super.call(this);
            }
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            //---------------------------------
            // General
            //---------------------------------
            /**
             * Cancels a connection that is either pending or active.
             *
             * @method forceCancelConnection
             * @param {String} url URL of the connection to cancel.
             * @static
             * @since 1.0
             */
            Network.forceCancelConnection = function (url) {
                return null;
            };
            /**
             * Gets the user-agent string used in all HTTP(S) requests.
             *
             * @method getUserAgent
             * @returns {String} The user-agent
             * @static
             * @since 1.0
             */
            Network.getUserAgent = function () {
                return '';
            };
            /**
             * Specifies the user-agent string to be used in all HTTP(S) requests.
             *
             * __Note:__ _Please do not release any confidential information when changing the user-agent string._
             *
             * @method setUserAgent
             * @param {String} userAgent The value to set as the user-agent.
             * @static
             * @since 1.0
             */
            Network.setUserAgent = function (userAgent) {
                return null;
            };
            /**
             * Indicates whether network connectivity exists and it is possible to establish connections and pass data.
             *
             * @method isConnected
             * @returns {Boolean} Returns `true` if connectivity exists to the connection point, or `false` otherwise.
             * @static
             * @since 1.0
             */
            Network.isConnected = function () {
                return true;
            };
            /**
            * In the case of a network interruption, the normal behavior is for the framework to automatically
            * attempt to reestablish a connection. With each failed attempt, the application may be alerted
            * of the failure. If this method is called, the framework will no longer attempt to reestablish the
            * connection.
            *
            * @method workOffline
            * @returns {Boolean} Returns `true` if the automatic reconnection process was successfully ceased, or `false` if the framework currently has a network connection.
            * @static
            * @since 1.0
            */
            Network.workOffline = function () {
                return null;
            };
            /**
            * If there was previously a network interruption and the `#workOffline()` method was called,
            * call this method to resume automatic reconnection. Just like before calling the `#workOffline()`
            * method, the framework will repeatedly attempt to establish a connection to the network, alerting the
            * application for each attempt that may fail.
            *
            * @method reconnect
            * @returns {Boolean} Returns `true` if the automatic reconnection process has started successfully, or `false` if the framework is already connected or is attempting to reconnect.
            * @static
            * @since 1.0
            */
            Network.reconnect = function () {
                return true;
            };
            /**
             * The Internet Protocol version 4 (IPv4) address of the system.
             *
             * @method getIPv4
             * @returns {String} IPv4 address of current connection.
             * @static
             * @since 1.0
             */
            Network.getIPv4 = function () {
                return true;
            };
            /**
             * Gets the current state of the network connection.
             *
             * @method getState
             * @returns {int} An integer representation of the current network state represented by nwf.net.NetworkState.
             * @static
             * @since 1.4
             */
            Network.getState = function () {
                return 0;
            };
            //---------------------------------
            // Headers
            //---------------------------------
            /**
             * Adds header information to all outgoing HTTP(S) requests.
             *
             * @method addHeader
             * @param {String} name Header name.
             * @param {String} value Header value.
             * @static
             * @since 1.0
             */
            Network.addHeader = function (name, value) {
                return null;
            };
            /**
             * Removes a specific header from HTTP(S) requests.
             *
             * @method removeHeader
             * @param {String} name Header name to remove.
             * @static
             * @since 1.0
             */
            Network.removeHeader = function (name) {
                return null;
            };
            /**
             * Removes all added headers from HTTP(S) requests.
             *
             * @method removeAllHeaders
             * @static
             * @since 1.0
             */
            Network.removeAllHeaders = function () {
                return null;
            };
            //---------------------------------
            // Security
            //---------------------------------
            /**
             * Adds a WWW-Authenticate Username and Password to all connections made to a specific domain.
             *
             *     var Network = nwf.net.Network;
             *     // All calls to https://www.some-domain.com will use Authenticate with "mario" - "princess".
             *     Network.addAuthenticateMapping( 'https://*.some-domain.com', 'mario', 'princess');
             *
             * @method addAuthenticateMapping
             * @static
             * @param {String} domain Reference to domain and subdomain. "*" will add to all domains or all subdomains.
             * @param {String} username Username.
             * @param {String} password Unencrypted password.
             * @since 1.0
             */
            Network.addAuthenticateMapping = function (domain, username, password) {
                return null;
            };
            /**
             * Adds a CA certificate to the current CA certificate bundle.
             *
             * @method addCACert
             * @returns {Boolean} Returns `true` if the new CA certificate was added to the bundle successfully, or `false` if it did not.
             * @param {String} certificate PEM format x509 SSL certificate.
             * @static
             * @since 1.2
             */
            Network.addCACert = function () {
                return true;
            };
            /**
            * Accesses an instance of the `Network` singleton.
            *
            * @method getInstance
            * @returns {nwf.net.Network} The `Network` singleton instance.
            * @static
            * @since 1.4
            */
            Network.getInstance = function () {
                if (!this.s_instance) {
                    this.s_instance = new Network();
                }
                return this.s_instance;
            };
            return Network;
        })(nwf.events.EventDispatcher);
        net.Network = Network;
    })(net = nwf.net || (nwf.net = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var GameServerEvent = (function (_super) {
            __extends(GameServerEvent, _super);
            /**
             * Events dispatched by the `GameServer` class.
             *
             * @class nwf.events.GameServerEvent
             * @see {@link nwf.nex.GameServer}
             * @extends nwf.events.Event
             * @author Aaron Ward
             * @author Shawn Gates
             */
            function GameServerEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(GameServerEvent.prototype, "uniqueID", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * A unique ID provided by the server, typically for identifying a user. This could allow multiple "profiles" to be present for a single principal ID.
                 * This ID should be stored by the application.
                 * See the Cafe NEX documentation for more information on using unique IDs.
                 *
                 * Only set when `nwf.events.GameServerEvent.REQUEST_ID_SUCCESS` is dispatched.
                 * @property {String} [uniqueID='']
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GameServerEvent.prototype, "DISCONNECTED", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                * Dispatched when the connection to the Game Server is severed for any reason.
                * @property {String} [DISCONNECTED='gameServerDisconnected']
                * @static @constant
                * @since 1.4
                */
                get: function () {
                    return 'gameServerDisconnected';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GameServerEvent.prototype, "LOGIN_SUCCESS", {
                // public static DISCONNECTED: string = 'gameServerDisconnected';
                /**
                * Dispatched when a call made to `nwf.nex.GameServer.login` is successful.
                * @property {String} [LOGIN_SUCCESS='gameServerLoginSuccess']
                * @static @constant
                * @since 1.4
                */
                get: function () {
                    return 'gameServerLoginSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GameServerEvent.prototype, "LOGIN_FAILED", {
                // public static LOGIN_SUCCESS: string = 'gameServerLoginSuccess';
                /**
                * Dispatched when a call made to `nwf.nex.GameServer.login` fails.
                * @property {String} [LOGIN_FAILED='gameServerLoginFailed']
                * @static @constant
                * @since 1.4
                */
                get: function () {
                    return 'gameServerLoginFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GameServerEvent.prototype, "REQUEST_ID_SUCCESS", {
                // public static LOGIN_FAILED: string = 'gameServerLoginFailed';
                /**
                * Dispatched when a call made to `nwf.nex.GameServer.requestUniqueID` is successful.
                * @property {String} [REQUEST_ID_SUCCESS='gameServerRequestUniqueIDSuccess']
                * @static @constant
                * @since 1.4
                */
                get: function () {
                    return 'gameServerRequestUniqueIDSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GameServerEvent.prototype, "REQUEST_ID_FAILED", {
                // public static REQUEST_ID_SUCCESS: string = 'gameServerRequestUniqueIDSuccess';
                /**
                * Dispatched when a call made to `nwf.nex.GameServer.requestUniqueID` fails.
                * @property {String} [REQUEST_ID_FAILED='gameServerRequestUniqueIDFailed']
                * @static @constant
                * @since 1.4
                */
                get: function () {
                    return 'gameServerRequestUniqueIDFailed';
                },
                enumerable: true,
                configurable: true
            });
            return GameServerEvent;
        })(events.Event);
        events.GameServerEvent = GameServerEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/// <reference path="../events/GameServerEvent.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        var GameServer = (function (_super) {
            __extends(GameServer, _super);
            /**
             * Class for interacting with the NEX Game Server.
             *
             * Class purpose - Connects to the NEX Game Server
             *
             * __Note:__ The NEX Game Server feature must be enabled in the Features page and the Network Access setting in Platform Features - Network page of Project Settings must NOT be set to disabled for the feature to work and for `nwf.nex` to be defined.
             *
             * The `GameServer` class dispatches the following events:
             *
             * - nwf.events.GameServerEvent.DISCONNECTED
             * - nwf.events.GameServerEvent.LOGIN_FAILED
             * - nwf.events.GameServerEvent.LOGIN_SUCCESS
             * - nwf.events.GameServerEvent.REQUEST_ID_FAILED
             * - nwf.events.GameServerEvent.REQUEST_ID_SUCCESS
             *
             * @class nwf.nex.GameServer
             * @extends nwf.events.EventDispatcher
             * @singleton
             * @author Aaron Ward
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
            * @private
            * The `new` method is not used to get an instance of a `GameServer` object; use `#getInstance` instead.
            * @method constructor
            * @since 1.4
            */
            function GameServer() {
                _super.call(this);
            }
            Object.defineProperty(GameServer.prototype, "isLoggedIn", {
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                //---------------------------------
                // Post Details
                //---------------------------------
                /**
                 * Returns `true` if the library is ready to begin communicating with the server, or `false` if it is not.
                 * @property {Boolean} [isLoggedIn=false]
                 * @since 1.4
                 * @readonly
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GameServer.prototype, "gameServerTime", {
                /**
                 * Gets the current time (in `UTC`) of the NEX Game Server.
                 *
                 * __Note:__ _Must have logged on to the Game Server or this will return `null`. Will continue to return a valid time even after the conection to the Game Server has been terminated._
                 * @property {Date} [gameServerTime=null]
                 * @since 1.6
                 * @readonly
                 */
                get: function () {
                    return new Date();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(GameServer.prototype, "accountServerTime", {
                /**
                * Gets the current time (in `UTC`) of the Nintendo Account Server.
                 *
                 * __Note:__ _Must be logged on to the Game Server or this will return `null`._
                 * @property {Date} [accountServerTime=null]
                 * @since 1.6
                 * @readonly
                 */
                get: function () {
                    return new Date();
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Logs into the Game Server
             * @returns {null}
             * @since 1.4
             * @see nwf.events.GameServerEvent.LOGIN_SUCCESS
             * @see nwf.events.GameServerEvent.LOGIN_FAILED
             * @async
             */
            GameServer.prototype.login = function () {
                return null;
            };
            /**
             * Requests a unique ID to be issued by the Game Server.
             * @returns {null}
             * @since 1.4
             * @see nwf.events.GameServerEvent.REQUEST_ID_SUCCESS
             * @see nwf.events.GameServerEvent.REQUEST_ID_FAILED
             * @async
             */
            GameServer.prototype.requestUniqueID = function () {
                return null;
            };
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Accesses an instance of the `GameServer` singleton.
             *
             * @method getInstance
             * @returns {nwf.nex.GameServer} The `GameServer` singleton instance.
             * @since 1.4
             * @static
             */
            GameServer.getInstance = function () {
                if (!this.s_instance) {
                    this.s_instance = new GameServer();
                }
                return this.s_instance;
            };
            /**
             * Method to test for class availability.
             *
             * @method isSupported
             * @returns {Boolean} Returns `false` if the class is not supported, or `true` if the class is available.
             * @static
             * @since 1.4
             */
            GameServer.isSupported = function () {
                return false;
            };
            return GameServer;
        })(nwf.events.EventDispatcher);
        nex.GameServer = GameServer;
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        var DataStoreDownloadedObject = (function () {
            function DataStoreDownloadedObject() {
            }
            Object.defineProperty(DataStoreDownloadedObject.prototype, "data", {
                /**
                 * Class containing the structure of a downloaded Data Store post.
                 *
                 * @class nwf.nex.DataStoreDownloadedObject
                 * @author Ryan Lynd
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * The data returned from the server.
                 * @property {Blob} [data=new Blob]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return new Blob;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "dataID", {
                /**
                 * The ID of the data from the server.
                 * @property {String} [dataID='']
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "ownerId", {
                /**
                 * The principal ID of the person who uploaded the data.
                 * @property {Number} [ownerId=0]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "dataType", {
                /**
                 * The type of the data. This value is set when a `{@link nwf.nex.DataStoreUploadObject#dataType DataStoreUploadObject}` is created.
                 * @property {Number} [dataType=0x0000]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return 0x0000;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "name", {
                /**
                * The title of the data.
                * @property {String} [name='']
                * @readonly
                * @since 1.2
                */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "period", {
                /**
                * The number of remaining valid days.
                * @property {Number} [period=0]
                * @readonly
                * @since 1.2
                */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "tags", {
                /**
                * An array of strings that can index the data for searches.
                * @property {Array} [tags=[]]
                * @readonly
                * @since 1.2
                */
                get: function () {
                    return [""];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "isValid", {
                /**
                * Returns `true` when this object is valid, or `false` if it is not valid.
                * @property {Boolean} [isValid=true]
                * @readonly
                * @since 1.2
                */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "accessPermissionStatus", {
                /**
                * The permission status controlling what users can access this data.
                * @property {Number} [accessPermissionStatus=0]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "accessPermissionRecipientIDs", {
                /**
                * An array of {@link nwf.act.NintendoAccount#principalID principalIDs} of users allowed to access this data. If `#accessPermissionStatus` is not `nwf.nex.DataStorePermission.SPECIFIED` or `nwf.nex.DataStorePermission.SPECIFIED_FRIEND` then this is an empty array.
                * @property {Array} [accessPermissionRecipientIDs=[]]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return [];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "updatePermissionStatus", {
                /**
                * The permission status controlling what users can update/delete this data.
                * @property {Number} [updatePermissionStatus=0]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "updatePermissionRecipientIDs", {
                /**
                * An array of {@link nwf.act.NintendoAccount#principalID principalIDs} of users allowed to update/delete this data. If `#updatePermissionStatus` is not `nwf.nex.DataStorePermission.SPECIFIED` or `nwf.nex.DataStorePermission.SPECIFIED_FRIEND` then this is an empty array.
                * @property {Array} [updatePermissionRecipientIDs=[]]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return [];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "metaBinary", {
                /**
                 * A 1024-byte chunk of data that is attached to the meta info of a post.
                 * @property {Blob} [metaBinary= new Blob]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return new Blob;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "createdTime", {
                /**
                * The date on which the data was created.
                * @property {Date} [createdTime=new Date]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return new Date();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "updatedTime", {
                /**
                * The date on which the data was last updated.
                * @property {Date} [updatedTime=new Date]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return new Date();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "expireTime", {
                /**
                * The date on which the data will expire.
                * @property {Date} [expireTime=new Date]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return new Date();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "status", {
                /**
                * The approval status of the uploaded object.
                * @property {nwf.nex.DataStoreObjectStatus} [status=nwf.nex.DataStoreObjectStatus.STATUS_NORMAL]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return nwf.nex.DataStoreObjectStatus.STATUS_NORMAL;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "downloadCount", {
                /**
                * How many times this data has been downloaded.
                * @property {Number} [downloadCount=0]
                * @readonly
                * @since 1.4
                * @removed 1.5 This property was removed in NEX version 3.5.1.
                */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "referDataID", {
                /**
                * An associated dataID.
                * @property {Number} [referDataID=0]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "dataFlag", {
                /**
                * Flags set when the data was uploaded.
                * @property {Number} [dataFlag=nwf.nex.DataStoreDataFlag.FLAG_NONE]
                * @readonly
                * @see nwf.nex.DataStoreDataFlag.FLAG_NONE
                * @since 1.4
                */
                get: function () {
                    return nwf.nex.DataStoreDataFlag.FLAG_NONE;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreDownloadedObject.prototype, "ratings", {
                /**
                * An array of nwf.nex.DataStoreRating objects representing the ratings in each of 16 potential slots.
                * @property {Array} [ratings=[]]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return [];
                },
                enumerable: true,
                configurable: true
            });
            return DataStoreDownloadedObject;
        })();
        nex.DataStoreDownloadedObject = DataStoreDownloadedObject;
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        var DataStoreMetaCompareParam = (function () {
            /**
             * Class containing the structure of a MetaCompareParameter object. This class is used to specify what meta information will be compared when using the `{@link nwf.nex.DataStore#updateData nwf.nex.DataStore.updateData()}` method to update an object.
             * If any of the new meta information does not match the server data based on the specified properties, the update will fail.
             *
             *      // Create a DataStoreMetaCompareParam and set the properties to compare
             *      var compareParam = new nwf.nex.DataStoreMetaCompareParam();
             *      compareParam.name = 'objectName';
             *      compareParam.compareName = true;
             *
             *      // Pass the compare param to the updateData method
             *      nwf.nex.DataStore.getInstance().updateData(dataID, post, compareParam);
             *
             * @class nwf.nex.DataStoreMetaCompareParam
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new DataStoreMetaCompareParam object.
             * @method constructor
             * @since 1.7
             */
            function DataStoreMetaCompareParam() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                * The title of the data.
                * @property {String} [name='']
                * @see nwf.nex.DataStoreDownloadedObject.name
                * @since 1.7
                */
                this.name = '';
                /**
                 * The type of the data. This value is set when a `{@link nwf.nex.DataStoreUploadObject#dataType DataStoreUploadObject}` is created.
                 * @property {Number} [dataType=0x0000]
                 * @see nwf.nex.DataStoreDownloadedObject.dataType
                 * @since 1.7
                 */
                this.dataType = 0x0000;
                /**
                * The number of remaining valid days on the data.
                * @property {Number} [period=90]
                * @see nwf.nex.DataStoreDownloadedObject.period
                * @since 1.7
                */
                this.period = 90;
                /**
                * An array of strings that can index the data for searches.
                * @property {Array} [tags=[]]
                * @see nwf.nex.DataStoreDownloadedObject.tags
                * @since 1.7
                */
                this.tags = [];
                /**
                * The permission status controlling what users can access the data.
                * @property {Number} [accessPermissionStatus=nwf.nex.DataStorePermission.PRIVATE]
                * @see nwf.nex.DataStoreDownloadedObject.accessPermissionStatus
                * @since 1.7
                */
                this.accessPermissionStatus = nwf.nex.DataStorePermission.PRIVATE;
                /**
                * An array of {@link nwf.act.NintendoAccount#principalID principalIDs} of users allowed to access the data.
                * @property {Array} [accessPermissionRecipientIDs=[]]
                * @see nwf.nex.DataStoreDownloadedObject.accessPermissionRecipientIDs
                * @since 1.7
                */
                this.accessPermissionRecipientIDs = [];
                /**
                * The permission status controlling what users can update/delete the data.
                * @property {Number} [updatePermissionStatus=nwf.nex.DataStorePermission.PRIVATE]
                * @see nwf.nex.DataStoreDownloadedObject.updatePermissionStatus
                * @since 1.7
                */
                this.updatePermissionStatus = nwf.nex.DataStorePermission.PRIVATE;
                /**
                * An array of {@link nwf.act.NintendoAccount#principalID principalIDs} of users allowed to update/delete the data.
                * @property {Array} [updatePermissionRecipientIDs=[]]
                * @see nwf.nex.DataStoreDownloadedObject.updatePermissionRecipientIDs
                * @since 1.7
                */
                this.updatePermissionRecipientIDs = [];
                /**
                 * A 1024-byte chunk of data that is attached to the meta info of the data.
                 * @property {Blob} [metaBinary=null]
                 * @see nwf.nex.DataStoreDownloadedObject.metaBinary
                 * @since 1.7
                 */
                this.metaBinary = null;
                /**
               * The approval status of the data.
               * @property {Number} [status=nwf.nex.DataStoreObjectStatus.STATUS_NORMAL]
               * @see nwf.nex.DataStoreDownloadedObject.status
               * @since 1.7
               */
                this.status = nwf.nex.DataStoreObjectStatus.STATUS_NORMAL;
                /**
                 * Sets which properties to compare to the data on the server.  Combine different filters using binary operators.
                 *
                 * Ex: `compareParam.comparisonFlag = {@link nwf.nex.DataStoreMetaCompareFlag#COMPARISON_FLAG_NAME} | {@link nwf.nex.DataStoreMetaCompareFlag#COMPARISON_FLAG_PERIOD}`
                 *
                 * This property will also be changed based on the `boolean` properties of the `DataStoreMetaCompareParam` object.
                 * @property {Number} [comparisonFlag=nwf.nex.DataStoreMetaCompareFlag.COMPARISON_FLAG_NONE]
                 * @since 1.7
                 */
                this.comparisonFlag = nwf.nex.DataStoreMetaCompareFlag.COMPARISON_FLAG_NONE;
                /**
                 * If set to `true`, compare the data on the server using the `#name` property. If set to `false`, do not. Setting this to `true` will add the value of `{@link nwf.nex.DataStoreMetaCompareFlag#COMPARISON_FLAG_NAME}` to the `#comparisonFlag` property; setting it to `false` will subtract the value from the property.
                 * @property {Boolean} [compareName=false]
                 * @since 1.7
                 */
                this.compareName = false;
                /**
                 * If set to `true`, compare the data on the server using the `#accessPermissionStatus` and `#accessPermissionRecipientIDs` properties. If set to `false`, do not. Setting this to `true` will add the value of `{@link nwf.nex.DataStoreMetaCompareFlag#COMPARISON_FLAG_ACCESS_PERMISSION}` to the `#comparisonFlag` property; setting it to `false` will subtract the value from the property.
                 * @property {Boolean} [compareAccessPermission=false]
                 * @since 1.7
                 */
                this.compareAccessPermission = false;
                /**
                 * If set to `true`, compare the data on the server using the `#updatePermissionStatus` and `#updatePermissionRecipientIDs` properties. If set to `false`, do not. Setting this to `true` will add the value of `{@link nwf.nex.DataStoreMetaCompareFlag#COMPARISON_FLAG_UPDATE_PERMISSION}` to the `#comparisonFlag` property; setting it to `false` will subtract the value from the property.
                 * @property {Boolean} [compareUpdatePermission=false]
                 * @since 1.7
                 */
                this.compareUpdatePermission = false;
                /**
                 * If set to `true`, compare the data on the server using the `#period` property. If set to `false`, do not. Setting this to `true` will add the value of `{@link nwf.nex.DataStoreMetaCompareFlag#COMPARISON_FLAG_PERIOD}` to the `#comparisonFlag` property; setting it to `false` will subtract the value from the property.
                 * @property {Boolean} [comparePeriod=false]
                 * @since 1.7
                 */
                this.comparePeriod = false;
                /**
                 * If set to `true`, compare the data on the server using the `#metaBinary` property. If set to `false`, do not. Setting this to `true` will add the value of `{@link nwf.nex.DataStoreMetaCompareFlag#COMPARISON_FLAG_METABINARY}` to the `#comparisonFlag` property; setting it to `false` will subtract the value from the property.
                 * @property {Boolean} [compareMetaBinary=false]
                 * @since 1.7
                 */
                this.compareMetaBinary = false;
                /**
                 * If set to `true`, compare the data on the server using the `#tags` property. If set to `false`, do not. Setting this to `true` will add the value of `{@link nwf.nex.DataStoreMetaCompareFlag#COMPARISON_FLAG_TAGS}` to the `#comparisonFlag` property; setting it to `false` will subtract the value from the property.
                 * @property {Boolean} [compareTags=false]
                 * @since 1.7
                 */
                this.compareTags = false;
                /**
                 * If set to `true`, compare the data on the server using the `#dataType` property. If set to `false`, do not. Setting this to `true` will add the value of `{@link nwf.nex.DataStoreMetaCompareFlag#COMPARISON_FLAG_DATA_TYPE}` to the `#comparisonFlag` property; setting it to `false` will subtract the value from the property.
                 * @property {Boolean} [compareDataType=false]
                 * @since 1.7
                 */
                this.compareDataType = false;
                /**
                 * If set to `true`, compare the data on the server using the `#status` property. If set to `false`, do not. Setting this to `true` will add the value of `{@link nwf.nex.DataStoreMetaCompareFlag#COMPARISON_FLAG_STATUS}` to the `#comparisonFlag` property; setting it to `false` will subtract the value from the property.
                 * @property {Boolean} [compareStatus=false]
                 * @since 1.7
                 */
                this.compareStatus = false;
                /**
                 * If set to `true`, compare the data on the server using all the properties. If set to `false`, do not. Setting this to `true` will add the value of `{@link nwf.nex.DataStoreMetaCompareFlag#COMPARISON_FLAG_ALL}` to the `#comparisonFlag` property; setting it to `false` will subtract the value from the property.
                 * @property {Boolean} [compareAll=false]
                 * @since 1.7
                 */
                this.compareAll = false;
                return new nwf.nex.DataStoreMetaCompareParam();
            }
            return DataStoreMetaCompareParam;
        })();
        nex.DataStoreMetaCompareParam = DataStoreMetaCompareParam;
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        var DataStoreRating = (function () {
            function DataStoreRating() {
            }
            Object.defineProperty(DataStoreRating.prototype, "dataID", {
                /**
                 * Class defining the parameters of a Data Store rating.
                 *
                 * @class nwf.nex.DataStoreRating
                 * @author Ryan Lynd
                 * @author Aaron Ward
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * The ID of the rated data from the server.
                 * @property {String} [dataID='']
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreRating.prototype, "slotID", {
                /**
                 * The ratings slot to which this rating correlates.
                 * @property {uint32} [slotID=0]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreRating.prototype, "totalValue", {
                /**
                 * The total value of all ratings combined.
                 * @property {uint32} [totalValue=0]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreRating.prototype, "ratingCount", {
                /**
                 * The total number of individual ratings that comprise `#totalValue`.
                 * @property {uint32} [ratingCount=0]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreRating.prototype, "initialValue", {
                /**
                 * The initial value of the rating when it was first uploaded.
                 * @property {uint32} [initialValue=0]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreRating.prototype, "averageValue", {
                /**
                 * The average rating. Equal to `#totalValue/#ratingCount`.
                 * @property {uint32} [averageValue=0]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            return DataStoreRating;
        })();
        nex.DataStoreRating = DataStoreRating;
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        var DataStoreRatingInitParam = (function () {
            /**
             * Class defining the settings of a Data Store object rating.
             *
             * @class nwf.nex.DataStoreRatingInitParam
             * @author Aaron Ward
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new `DataStoreRatingInitParam` object.
             * @method constructor
             * @since 1.4
             */
            function DataStoreRatingInitParam() {
                return new nwf.nex.DataStoreRatingInitParam();
            }
            Object.defineProperty(DataStoreRatingInitParam.prototype, "initialValue", {
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * The initial value of the rating.
                 * @property {uint32} [initialValue=0]
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreRatingInitParam.prototype, "optionFlag", {
                /**
                 * A binary flag defining the options of the rating.
                 * @see nwf.nex.DataStoreRatingOption
                 * @property {uint32} [optionFlag=nwf.nex.DataStoreRatingOption.FLAG_NONE]
                 * @since 1.4
                 */
                get: function () {
                    return nwf.nex.DataStoreRatingOption.FLAG_NONE;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreRatingInitParam.prototype, "rangeMin", {
                /**
                 * The minimum acceptable ratings value.
                 * @property {uint32} [rangeMin=0]
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreRatingInitParam.prototype, "rangeMax", {
                /**
                 * The maximum acceptable ratings value.
                 * @property {uint32} [rangeMax=0]
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Resets the lock so that the rating period is not restricted.
             * @since 1.4
             */
            DataStoreRatingInitParam.prototype.resetLock = function () {
            };
            /**
             * The rating locks for a period of seconds.
             * @param {uint32} lockTimer How many seconds must pass before a user can rate this content again.
             * @since 1.4
             */
            DataStoreRatingInitParam.prototype.setIntervalLock = function (lockTimer) {
            };
            /**
             * The rating locks until a certain day based on UTC.
             * @param {nwf.nex.DataStoreRatingLockPeriod} lockPeriod The day the rating will unlock on.
             * @param {uint32} [lockOffset=0] The number of hour offset from 12:00 AM on the day of unlock. Example: -1 unlocks at 11:00 PM the night before, 1 unlocks at 1:00 AM. If not provided, this defaults to 12:00 AM.
             * @since 1.4
             */
            DataStoreRatingInitParam.prototype.setPeriodicLock = function (lockPeriod, lockOffset) {
            };
            /**
             * The rating locks for a number of days and hours.
             * @param {uint32} lockDays The days the rating will be locked for.
             * @param {uint32} [lockHours=0] The hours the rating will be locked for.
             * @since 1.4
             */
            DataStoreRatingInitParam.prototype.setDaysAfterLock = function (lockDays, lockHours) {
            };
            /**
             * The rating lock is permanent and the content cannot be re-rated.
             * @since 1.4
             */
            DataStoreRatingInitParam.prototype.setPermanentLock = function () {
            };
            return DataStoreRatingInitParam;
        })();
        nex.DataStoreRatingInitParam = DataStoreRatingInitParam;
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        var DataStoreRatingLog = (function () {
            function DataStoreRatingLog() {
            }
            Object.defineProperty(DataStoreRatingLog.prototype, "isRated", {
                /**
                 * Class defining the parameters of a Data Store Rating log.
                 *
                 * @class nwf.nex.DataStoreRatingLog
                 * @author Ryan Lynd
                 * @author Aaron Ward
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * Returns `true` if the data has been rated and `false` if not.
                 * @property {Boolean} [isRated=false]
                 * @readonly
                 * @since 1.7
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreRatingLog.prototype, "lockExpirationTime", {
                /**
                 * A Date object set to the date that the rating lock period will expire.
                 * @property {Date} [lockExpirationTime=new Date]
                 * @readonly
                 * @since 1.7
                 */
                get: function () {
                    return new Date();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreRatingLog.prototype, "ratingValue", {
                /**
                 * The current rating of the data.
                 * @property {Number} [ratingValue=0]
                 * @readonly
                 * @since 1.7
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            return DataStoreRatingLog;
        })();
        nex.DataStoreRatingLog = DataStoreRatingLog;
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        var DataStoreSearchParam = (function () {
            /**
             * Class defining the parameters of a Data Store search.
             *
             * @class nwf.nex.DataStoreSearchParam
             * @author Aaron Ward
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new DataStoreSearchParam object.
             * @method constructor
             * @since 1.4
             */
            function DataStoreSearchParam() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The type of search to perform.
                 * @property {Number} [searchType=nwf.nex.DataStoreSearchType.SEARCH_TYPE_PUBLIC]
                 * @since 1.4
                 * @see nwf.nex.DataStoreSearchType.SEARCH_TYPE_PUBLIC
                 */
                this.searchType = nwf.nex.DataStoreSearchType.SEARCH_TYPE_PUBLIC;
                /**
                 * The {@link nwf.act.NintendoAccount#principalID principalIDs} to use in searching for people who uploaded data.
                 * @property {Array} [ownerIDs=[]]
                 * @since 1.4
                 */
                this.ownerIDs = [];
                /**
                 * The {@link nwf.nex.DataStoreOwnerType} to use in searching for people who uploaded data.
                 * @property {Number} [ownerType=nwf.nex.DataStoreOwnerType.ANYBODY]
                 * @since 1.4
                 * @see nwf.nex.DataStoreOwnerType.ANYBODY
                 */
                this.ownerType = nwf.nex.DataStoreOwnerType.ANYBODY;
                /**
                 * The {@link nwf.act.NintendoAccount#principalID principalIDs} of the access rights owners to search for.
                 * @property {Array} [destinationIDs=[]]
                 * @since 1.4
                 */
                this.destinationIDs = [];
                /**
                 * The type of the data to search for. This value is set when a `{@link nwf.nex.DataStoreUploadObject#dataType DataStoreUploadObject}` is created.
                 *
                 * __Note:__ If the nwf.nex.DataStoreSearchParam#sortColumn parameter is changed or the nwf.nex.DataStoreSearchParam#tags parameter is set, this property must be changed from the default value of nwf.nex.DataStoreSearchParam#ALL_DATA_TYPES or an error will occur when searching.
                 * @property {Number} [dataType=nwf.nex.DataStoreSearchParam.ALL_DATA_TYPES]
                 * @since 1.4
                 * @see nwf.nex.DataStoreSearchParam.ALL_DATA_TYPES
                 */
                this.dataType = nwf.nex.DataStoreSearchParam.ALL_DATA_TYPES;
                /**
                * An array of strings that can mark the data.
                *
                * __Note:__ If this parameter is set, the nwf.nex.DataStoreSearchParam#dataType property must be changed from the default value of nwf.nex.DataStoreSearchParam#ALL_DATA_TYPES or an error will occur when searching.
                * @property {Array} [tags=['']]
                * @since 1.4
                */
                this.tags = [''];
                /**
                 * The column to sort the search results by.
                 *
                 * __Note:__ If this parameter is changed, the nwf.nex.DataStoreSearchParam#dataType property must be changed from the default value of nwf.nex.DataStoreSearchParam#ALL_DATA_TYPES or an error will occur when searching.
                 * @property {Number} [sortColumn=nwf.nex.DataStoreSearchSortColumn.DATAID]
                 * @since 1.4
                 * @see nwf.nex.DataStoreSearchSortColumn.DATAID
                 */
                this.sortColumn = nwf.nex.DataStoreSearchSortColumn.DATAID;
                /**
                 * The order to sort the search results by. Set this to `1` to reverse the search result order.
                 * @property {Number} [sortOrder=0]
                 * @since 1.4
                 */
                this.sortOrder = 0;
                /**
                 * Defines the maximum number of search results. The maximum size allowed is 100.
                 * @property {Number} [resultSize=20]
                 * @since 1.4
                 */
                this.resultSize = 20;
                /**
                 * Defines the offset from the 0 index of the results where the search will start.
                 * @property {Number} [resultOffset=0]
                 * @since 1.4
                 */
                this.resultOffset = 0;
                /**
                 * A binary flag defining the options of the search results. More complex options will take longer to retrieve.
                 * @property {Number} [resultOption=nwf.nex.DataStoreResultOption.GET_NONE]
                 * @since 1.4
                 * @see nwf.nex.DataStoreResultOption.GET_NONE
                 */
                this.resultOption = nwf.nex.DataStoreResultOption.GET_NONE;
                /**
                 * The start creation date on which to search. It Should be less than `#createdBefore` or there may be an error.
                 * If left to default, it will be ignored.
                 * @property {Date} [createdAfter=new Date]
                 * @since 1.4
                 */
                this.createdAfter = new Date(9999, 12, 31);
                /**
                 * The end creation date on which to search. It should be greater than `#createdAfter` or there may be an error.
                 * If left to default, it will be ignored.
                 * @property {Date} [createdBefore=new Date]
                 * @since 1.4
                 */
                this.createdBefore = new Date(9999, 12, 31);
                /**
                 * The start update date on which to search. It should be less than `#updatedBefore` or there may be an error.
                 * If left to default, it will be ignored.
                 * @property {Date} [updatedAfter=new Date]
                 * @since 1.4
                 */
                this.updatedAfter = new Date(9999, 12, 31);
                /**
                 * The end update date on which to search. It should be greater than `#updatedAfter` or there may be an error.
                 * If left to default, it will be ignored.
                 * @property {Date} [updatedBefore=new Date]
                 * @since 1.4
                 */
                this.updatedBefore = new Date(9999, 12, 31);
                return new nwf.nex.DataStoreSearchParam();
            }
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Resets the DataStoreSearchParam object to default values.
             * @since 1.4
             */
            DataStoreSearchParam.prototype.reset = function () {
            };
            Object.defineProperty(DataStoreSearchParam, "GET_RANDOM_SELECTION", {
                //-------------------------------------------------------------------------
                // STATIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * If `#resultOffset` is set to this, a random selection of search results will be returned.
                 * @property {Number} [GET_RANDOM_SELECTION=0xFFFFFFFF]
                 * @static @constant
                 * @since 1.4
                 */
                // public static nwf.nex.DataStoreSearchParam.GET_RANDOM_SELECTION: number = 0xFFFFFFFF;
                get: function () {
                    return 0xFFFFFFFF;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchParam, "ALL_DATA_TYPES", {
                /**
                * If `#dataType` is set to this, the `#dataType` condition will be removed from the search conditions.
                * @property {uint16} [ALL_DATA_TYPES=0xFFFF]
                * @static @constant
                * @since 1.4
                */
                // public static ALL_DATA_TYPES: number = 0xFFFF;
                get: function () {
                    return 0xFFFF;
                },
                enumerable: true,
                configurable: true
            });
            return DataStoreSearchParam;
        })();
        nex.DataStoreSearchParam = DataStoreSearchParam;
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        var DataStoreSearchResult = (function () {
            function DataStoreSearchResult() {
            }
            Object.defineProperty(DataStoreSearchResult.prototype, "dataID", {
                /**
                 * Class containing the structure of a downloaded Data Store search result.
                 *
                 * @class nwf.nex.DataStoreSearchResult
                 * @author Ryan Lynd
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * The ID of the data from the server.
                 * @property {String} [dataID='']
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "ownerID", {
                /**
                 * The principal ID of the person who uploaded the data.
                 * @property {Number} [ownerID=0]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "dataType", {
                /**
                 * The type of the data. This value is set when a `{@link nwf.nex.DataStoreUploadObject#dataType DataStoreUploadObject}` is created.
                 * @property {Number} [dataType=0x0000]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return 0x0000;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "name", {
                /**
                * The title of the data.
                * @property {String} [name='']
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "period", {
                /**
                * The number of remaining valid days.
                * @property {Number} [period=0]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "tags", {
                /**
                * An array of strings that can index the data for searches.
                * @property {Array} [tags=['']]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return [""];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "isValid", {
                /**
                * Returns `true` when this object is valid, or `false` if it is not valid.
                * @property {Boolean} [isValid=true]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "accessPermissionStatus", {
                /**
                * The permission status controlling what users can access this data.
                * @property {Number} [accessPermissionStatus=0]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "accessPermissionRecipientIDs", {
                /**
                * An array of {@link nwf.act.NintendoAccount#principalID principalIDs} of users allowed to access this data. If `#accessPermissionStatus` is not `nwf.nex.DataStorePermission.SPECIFIED` or `nwf.nex.DataStorePermission.SPECIFIED_FRIEND` then this is an empty array.
                * @property {Array} [accessPermissionRecipientIDs=[]]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return [];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "updatePermissionStatus", {
                /**
                * The permission status controlling what users can update/delete this data.
                * @property {Number} [updatePermissionStatus=0]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "updatePermissionRecipientIDs", {
                /**
                * An array of {@link nwf.act.NintendoAccount#principalID principalIDs} of users allowed to update/delete this data. If `#updatePermissionStatus` is not `nwf.nex.DataStorePermission.SPECIFIED` or `nwf.nex.DataStorePermission.SPECIFIED_FRIEND` then this is an empty array.
                * @property {Array} [updatePermissionRecipientIDs=[]]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return [];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "createdTime", {
                /**
                * The date on which the data was created.
                * @property {Date} [createdTime=new Date]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return new Date();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "updatedTime", {
                /**
                * The date on which the data was last updated.
                * @property {Date} [updatedTime=new Date]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return new Date();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "expireTime", {
                /**
                * The date on which the data will expire.
                * @property {Date} [expireTime=new Date]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return new Date();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "status", {
                /**
                * The approval status of the uploaded object.
                * @property {nwf.nex.DataStoreObjectStatus} [status=nwf.nex.DataStoreObjectStatus.STATUS_NORMAL;]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return nwf.nex.DataStoreObjectStatus.STATUS_NORMAL;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "downloadCount", {
                /**
                * How many times this data has been downloaded.
                * @property {Number} [downloadCount=0]
                * @readonly
                * @since 1.4
                * @removed 1.5 This property was removed in NEX version 3.5.1.
                */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "referDataID", {
                /**
                * An associated dataID.
                * @property {Number} [referDataID=0]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "dataFlag", {
                /**
                * Flags set when the data was uploaded.
                * @property {nwf.nex.DataStoreDataFlag} [dataFlag=nwf.nex.DataStoreDataFlag.FLAG_NONE]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return nwf.nex.DataStoreDataFlag.FLAG_NONE;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "metaBinary", {
                /**
                 * A 1024-byte chunk of data that is attached to the meta info of a post.
                 * @property {Blob} [metaBinary=new Blob]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return new Blob;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreSearchResult.prototype, "ratings", {
                /**
                * An array of nwf.nex.DataStoreRating objects representing the ratings in each of 16 potential slots. This will be `null` unless the `nwf.nex.DataStoreSearchParam` used for the search had its `{@link nwf.nex.DataStoreSearchParam#resultOption resultOption}` property set to `nwf.nex.DataStoreResultOption.GET_RATINGS`.
                * @property {null|Array} [ratings=null]
                * @readonly
                * @since 1.4
                */
                get: function () {
                    return [];
                },
                enumerable: true,
                configurable: true
            });
            return DataStoreSearchResult;
        })();
        nex.DataStoreSearchResult = DataStoreSearchResult;
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        var DataStoreUploadObject = (function () {
            /**
             * Class containing the structure of an uploadable Data Store post.
             *
             * @class nwf.nex.DataStoreUploadObject
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new DataStoreUploadObject object.
             * @method constructor
             * @since 1.2
             */
            function DataStoreUploadObject() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The binary data to upload. Maximum size is 10 megabytes.
                 * @property {Blob} [data=new Blob]
                 * @since 1.2
                 */
                this.data = new Blob();
                /**
                 * The ID of the data from the server. This value is only set after the object has been successfully uploaded.
                 * @property {String} [dataID='0']
                 * @readonly
                 * @since 1.2
                 */
                this.dataID = "0";
                /**
                * The title of the data.
                * @property {String} [name='']
                * @since 1.2
                */
                this.name = "";
                /**
                 * The type of the data. This value can later be used to filter the data returned from an `nwf.nex.DataStore#dataSearch` search.
                 * @property {Number} [dataType=0x0000]
                 * @since 1.2
                 */
                this.dataType = 0x0000;
                /**
                * The number of days the data stays valid after upload.  This has a maximum value of 365 days.
                *
                * If the data needs to persist beyond that length of time, use the `#persistenceSlot` property.
                * @property {Number} [period=0]
                * @since 1.2
                */
                this.period = 90;
                /**
                * An array of strings that can index the data for searches.  If any duplicate strings are present in the array, the data will fail to upload.
                * @property {Array} [tags=['']]
                * @since 1.2
                */
                this.tags = [""];
                /**
                * The permission status controlling what users can access this data.
                * @property {Number} [accessPermissionStatus=nwf.nex.DataStorePermission.PRIVATE]
                * @since 1.4
                */
                this.accessPermissionStatus = nwf.nex.DataStorePermission.PRIVATE;
                /**
                * An array of {@link nwf.act.NintendoAccount#principalID principalIDs} of users allowed to access this data. Only necessary if `#accessPermissionStatus` is `nwf.nex.DataStorePermission.SPECIFIED` or `nwf.nex.DataStorePermission.SPECIFIED_FRIEND`.
                * @property {Array} [accessPermissionRecipientIDs=[]]
                * @since 1.4
                */
                this.accessPermissionRecipientIDs = [];
                /**
                * The permission status controlling what users can update/delete this data.
                * @property {Number} [updatePermissionStatus=nwf.nex.DataStorePermission.PRIVATE]
                * @since 1.4
                */
                this.updatePermissionStatus = nwf.nex.DataStorePermission.PRIVATE;
                /**
                * An array of {@link nwf.act.NintendoAccount#principalID principalIDs} of users allowed to update/delete this data. Only necessary if `#updatePermissionStatus` is `nwf.nex.DataStorePermission.SPECIFIED` or `nwf.nex.DataStorePermission.SPECIFIED_FRIEND`.
                * @property {Array} [updatePermissionRecipientIDs=[]]
                * @since 1.4
                */
                this.updatePermissionRecipientIDs = [];
                /**
                 * A 1024-byte chunk of data that is attached to the meta info of a post.
                 * @property {Blob} [metaBinary=new Blob]
                 * @since 1.4
                 */
                this.metaBinary = new Blob();
                /**
                * An array of `nwf.nex.DataStoreRatingInitParam` objects in slot order. This must be set when this object is first uploaded, it will be ignored on updates.
                * @property {Array} [ratingInitParams=[]]
                * @since 1.4
                */
                this.ratingInitParams = [];
                /**
                 * The persistence slot to store the data in.  This prevents the data in the slot from expiring.
                 * Valid slot values are 0-15. Values beyond that range are ignored and the data does not persist. The default value of -1 means the data does not persist.
                 *
                 * __Note:__ _The same `#dataID` cannot exist in multiple persistence slots. If this is attempted the relevent function will fail._
                 * @property {Number} [persistenceSlot=0]
                 * @since 1.5
                 */
                this.persistenceSlot = -1;
                /**
                * This flag specifies if the data already present in the slot specified by `#persistenceSlot` should be deleted after it is overwritten.
                * The persistent data slot on the server only stores the `#dataID` of the provided data, so if a slot is overwritten, the original data is still present on the server.
                * If this object is used as a parameter for `{@link nwf.nex.DataStore#updateData}` and the `#dataID` in the selected `#persistenceSlot` are the same as was previously set, this variable is ignored.
                * @property {Boolean} [deleteLastObject=true]
                * @since 1.5
                */
                this.deleteLastObject = true;
                /**
                 * If `true` then the data will be flaged as suspended and will only persist on the server for three hours before it is deleted. Calling the `nwf.nex.DataStore` method
                 * `{@link nwf.nex.DataStore#completeSuspendedData completeSuspendedData}` with the `#dataID` of this data will return the data's lifespan to the value set in the `#period` property.
                 * @property {Boolean} [needsCompletion=false]
                 * @see nwf.nex.DataStore.completeSuspendedData
                 * @since 1.7
                 */
                this.needsCompletion = false;
                return new nwf.nex.DataStoreUploadObject();
            }
            return DataStoreUploadObject;
        })();
        nex.DataStoreUploadObject = DataStoreUploadObject;
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/// <reference path="../nex/DataStore.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var DataStoreEvent = (function (_super) {
            __extends(DataStoreEvent, _super);
            /**
             * Events dispatched by the `DataStore` class.
             *
             * @class nwf.events.DataStoreEvent
             * @see {@link nwf.nex.DataStore}
             * @extends nwf.events.Event
             * @author Aaron Ward
             * @author Shawn Gates
             */
            function DataStoreEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(DataStoreEvent.prototype, "data", {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The DataStoreDownloadedObject returned from the server after a successful query.
                 * Only set when `nwf.events.DataStoreEvent.DOWNLOAD_DATA_SUCCESS` is dispatched.
                 * @property {nwf.nex.DataStoreDownloadedObject} [data={}]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    // return new nwf.nex.DataStoreDownloadedObject();
                    return {};
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "dataID", {
                /**
                 * The ID of the newly uploaded data to the server.
                 * Only set when `nwf.events.DataStoreEvent.UPLOAD_DATA_SUCCESS` is dispatched.
                 * @property {String} [dataID="0"]
                 * @readonly
                 * @since 1.2
                 */
                get: function () {
                    return "0";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "results", {
                /**
                 * The array of {@link nwf.nex.DataStoreSearchResult DataStoreSearchResult(s)} returned from the server after a successful search.
                 * Only set when `nwf.events.DataStoreEvent.SEARCH_SUCCESS` is dispatched.
                 * A successful search may return 0 {@link nwf.nex.DataStoreSearchResult DataStoreSearchResult(s)}.
                 * @property {Array} [results=[]]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return [];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "rating", {
                /**
                 * The updated rating returned from the server after a successful call to `nwf.nex.DataStore.rateData`.
                 * Only set when `nwf.events.DataStoreEvent.RATE_DATA_SUCCESS` is dispatched.
                 * @property {nwf.nex.DataStoreRating} [rating={}]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return {};
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "batchResults", {
                /**
                 * The array of {@link nwf.nex.DataStoreDownloadedObject DataStoreDownloadedObject(s)} returned from the server after a successful query.
                 * The posts returned will not have their data properties set as this operation is only a shallow download of the basic metadata.
                 * Only set when `nwf.events.DataStoreEvent.DOWNLOAD_BATCH_DATA_SUCCESS` is dispatched.
                 * A successful search may return 0 {@link nwf.nex.DataStoreDownloadedObject DataStoreDownloadedObject(s)}.
                 * @property {Array} [batchResults=[]]
                 * @readonly
                 * @since 1.4.5
                 */
                get: function () {
                    return [];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "errorCode", {
                /**
                 * Error code that is set on a fail event. Helps tie the failed event to a `{@link nwf.events.SystemErrorEvent}`.
                 *
                 * @property {uint32} [errorCode=null]
                 * @readonly
                 * @since 1.7
                 * @see nwf.system.SystemErrorCode
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "ratingLog", {
                /**
                 * The rating log of the requested rating slot.
                 * Only set when `nwf.events.DataStoreEvent.DOWNLOAD_RATING_LOG_SUCCESS` is dispatched.
                 *
                 * @property {nwf.nex.DataStoreRatingLog} [ratingLog=null]
                 * @readonly
                 * @since 1.7
                 * @see nwf.nex.DataStoreRatingLog
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "DOWNLOAD_DATA_SUCCESS", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when a call made to the `nwf.nex.DataStore.downloadData` class is successful.
                 * @property {String} [DOWNLOAD_DATA_SUCCESS='dataStoreDownloadDataSuccess']
                 * @static @constant
                 * @since 1.2
                 */
                // public static DOWNLOAD_DATA_SUCCESS: string = 'dataStoreDownloadDataSuccess';
                get: function () {
                    return 'dataStoreDownloadDataSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "DOWNLOAD_DATA_FAILED", {
                /**
                 * Dispatched when a call made to the `nwf.nex.DataStore.downloadData` class fails.
                 * @property {String} [DOWNLOAD_DATA_FAILED='dataStoreDownloadDataFailed']
                 * @static @constant
                 * @since 1.2
                */
                // public static DOWNLOAD_DATA_FAILED: string = 'dataStoreDownloadDataFailed';
                get: function () {
                    return 'dataStoreDownloadDataFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "INITIALIZATION_SUCCESS", {
                /**
                 * Dispatched when a call made to the `nwf.nex.DataStore.initialize` class is successful.
                 * @property {String} [INITIALIZATION_SUCCESS='dataStoreInitializationSuccess']
                 * @static @constant
                 * @removed 1.4
                 * @since 1.2
                 */
                // public static INITIALIZATION_SUCCESS: string = 'dataStoreInitializationSuccess';
                get: function () {
                    return 'dataStoreInitializationSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "INITIALIZATION_FAILED", {
                /**
                 * Dispatched when a call made to the `nwf.nex.DataStore.initialize` class fails.
                 * @property {String} [INITIALIZATION_FAILED='dataStoreInitializationFailed']
                 * @static @constant
                 * @since 1.2
                 * @removed 1.4
                 */
                // public static INITIALIZATION_FAILED: string = 'dataStoreInitializationFailed';
                get: function () {
                    return 'dataStoreInitializationFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "UPLOAD_DATA_SUCCESS", {
                /**
                 * Dispatched when a call made to the `nwf.nex.DataStore.uploadData` class is successful.
                 * @property {String} [UPLOAD_DATA_SUCCESS='dataStoreUploadDataSuccess']
                 * @static @constant
                 * @since 1.2
                 */
                // public static UPLOAD_DATA_SUCCESS: string = 'dataStoreUploadDataSuccess';
                get: function () {
                    return 'dataStoreUploadDataSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "UPLOAD_DATA_FAILED", {
                /**
                 * Dispatched when a call made to the `nwf.nex.DataStore.uploadData` class fails.
                 * @property {String} [UPLOAD_DATA_FAILED='dataStoreUploadDataFailed']
                 * @static @constant
                 * @since 1.2
                 */
                // public static UPLOAD_DATA_FAILED: string = 'dataStoreUploadDataFailed';
                get: function () {
                    return 'dataStoreUploadDataFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "DISCONNECTED", {
                /**
                 * Dispatched when the connection to the Game Server is severed for any reason (besides logging out).
                 * @property {String} [DISCONNECTED='dataStoreDisconnected']
                 * @static @constant
                 * @since 1.3
                 * @removed 1.4 Use nwf.events.GameServerEvent.DISCONNECTED instead
                 */
                // public static DISCONNECTED: string = 'dataStoreDisconnected';
                get: function () {
                    return 'dataStoreDisconnected';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "SEARCH_SUCCESS", {
                /**
                 * Dispatched when a call made to `nwf.nex.DataStore.dataSearch` is successful.  A successful search may return 0 objects.
                 * @property {String} [SEARCH_SUCCESS='dataStoreSearchSuccess']
                 * @static @constant
                 * @since 1.4
                 */
                // public static SEARCH_SUCCESS: string = 'dataStoreSearchSuccess';
                get: function () {
                    return 'dataStoreSearchSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "SEARCH_FAILED", {
                /**
                 * Dispatched when a call made to `nwf.nex.DataStore.dataSearch` fails.
                 * @property {String} [SEARCH_FAILED='dataStoreSearchFailed']
                 * @static @constant
                 * @since 1.4
                 */
                // public static SEARCH_FAILED: string = 'dataStoreSearchFailed';
                get: function () {
                    return 'dataStoreSearchFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "DELETE_DATA_SUCCESS", {
                /**
                 * Dispatched when a call made to `nwf.nex.DataStore.deleteData` is successful.
                 * @property {String} [DELETE_DATA_SUCCESS='dataStoreDeleteDataSuccess']
                 * @static @constant
                 * @since 1.4
                 */
                // public static DELETE_DATA_SUCCESS: string = 'dataStoreDeleteDataSuccess';
                get: function () {
                    return 'dataStoreDeleteDataSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "DELETE_DATA_FAILED", {
                /**
                 * Dispatched when a call made to `nwf.nex.DataStore.deleteData` fails.
                 * @property {String} [DELETE_DATA_FAILED='dataStoreDeleteDataFailed']
                 * @static @constant
                 * @since 1.4
                 */
                // public static DELETE_DATA_FAILED: string = 'dataStoreDeleteDataFailed';
                get: function () {
                    return 'dataStoreDeleteDataFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "UPDATE_DATA_SUCCESS", {
                /**
                 * Dispatched when a call made to `nwf.nex.DataStore.updateData` is successful.
                 * @property {String} [UPDATE_DATA_SUCCESS='dataStoreUpdateDataSuccess']
                 * @static @constant
                 * @since 1.4
                 */
                // public static UPDATE_DATA_SUCCESS: string = 'dataStoreUpdateDataSuccess';
                get: function () {
                    return 'dataStoreUpdateDataSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "UPDATE_DATA_FAILED", {
                /**
                 * Dispatched when a call made to `nwf.nex.DataStore.updateData` fails.
                 * @property {String} [UPDATE_DATA_FAILED='dataStoreUpdateDataFailed']
                 * @static @constant
                 * @since 1.4
                 */
                // public static UPDATE_DATA_FAILED: string = 'dataStoreUpdateDataFailed';
                get: function () {
                    return 'dataStoreUpdateDataFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "RATE_DATA_SUCCESS", {
                /**
                 * Dispatched when a call made to `nwf.nex.DataStore.rateData` is successful.
                 * @property {String} [RATE_DATA_SUCCESS='dataStoreRateDataSuccess']
                 * @static @constant
                 * @since 1.4
                 */
                // public static RATE_DATA_SUCCESS: string = 'dataStoreRateDataSuccess';
                get: function () {
                    return 'dataStoreRateDataSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "RATE_DATA_FAILED", {
                /**
                 * Dispatched when a call made to `nwf.nex.DataStore.rateData` fails.
                 * @property {String} [RATE_DATA_FAILED='dataStoreRateDataFailed']
                 * @static @constant
                 * @since 1.4
                 */
                // public static RATE_DATA_FAILED: string = 'dataStoreRateDataFailed';
                get: function () {
                    return 'dataStoreRateDataFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "LOGIN_SUCCESS", {
                // Removed
                /**
                  * Dispatched when a call made to the `nwf.nex.DataStore.login` class is successful.
                  * @property {String} [LOGIN_SUCCESS='dataStoreLoginSuccess']
                  * @static @constant
                  * @since 1.3
                  * @removed 1.4 Use nwf.events.GameServerEvent.LOGIN_SUCCESS instead.
                  */
                // public static LOGIN_SUCCESS: string = 'dataStoreLoginSuccess';
                get: function () {
                    return 'dataStoreLoginSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "LOGIN_FAILED", {
                /**
                 * Dispatched when a call made to the `nwf.nex.DataStore.login` class fails.
                 * @property {String} [LOGIN_FAILED='dataStoreLoginFailed']
                 * @static @constant
                 * @since 1.3
                 * @removed 1.4 Use nwf.events.GameServerEvent.LOGIN_SUCCESS instead.
                 */
                // public static LOGIN_FAILED: string = 'dataStoreLoginFailed';
                get: function () {
                    return 'dataStoreLoginFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "LOGOUT_SUCCESS", {
                /**
                 * Dispatched when a call made to the `nwf.nex.DataStore.logout` class is successful.
                 * @property {String} [LOGOUT_SUCCESS='dataStoreLogoutSuccess']
                 * @static @constant
                 * @since 1.3
                 * @removed 1.4
                 */
                // public static LOGOUT_SUCCESS: string = 'dataStoreLogoutSuccess';
                get: function () {
                    return 'dataStoreLogoutSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "LOGOUT_FAILED", {
                /**
                 * Dispatched when a call made to the `nwf.nex.DataStore.logout` class fails.
                 * @property {String} [LOGOUT_FAILED='dataStoreLogoutFailed']
                 * @static @constant
                 * @since 1.3
                 * @removed 1.4
                 */
                // public static LOGOUT_FAILED: string = 'dataStoreLogoutFailed';
                get: function () {
                    return 'dataStoreLogoutFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "DOWNLOAD_BATCH_DATA_SUCCESS", {
                /**
                 * Dispatched when a call made to the `nwf.nex.DataStore.downloadBatchData` function is successful.
                 * @property {String} [DOWNLOAD_BATCH_DATA_SUCCESS='dataStoreDownloadBatchDataSuccess']
                 * @static @constant
                 * @since 1.4.5
                 */
                // public static DOWNLOAD_BATCH_DATA_SUCCESS: string = 'dataStoreDownloadBatchDataSuccess';
                get: function () {
                    return 'dataStoreDownloadBatchDataSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "DOWNLOAD_BATCH_DATA_FAILED", {
                /**
                 * Dispatched when a call made to the `nwf.nex.DataStore.downloadBatchData` function fails.
                 * @property {String} [DOWNLOAD_BATCH_DATA_FAILED='dataStoreDownloadBatchDataFailed']
                 * @static @constant
                 * @since 1.4.5
                 */
                // public static DOWNLOAD_BATCH_DATA_FAILED: string = 'dataStoreDownloadBatchDataFailed';
                get: function () {
                    return 'dataStoreDownloadBatchDataFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "COMPLETE_SUSPENDED_OBJECT_SUCCESS", {
                /**
                 * Dispatched when a call made to the `{@link nwf.nex.DataStore#completeSuspendedData nwf.nex.DataStore.completeSuspendedData}` function is successful.
                 * @property {String} [COMPLETE_SUSPENDED_OBJECT_SUCCESS='dataStoreCompleteSuspendedObjectSuccess']
                 * @static @constant
                 * @since 1.7
                 */
                // public static COMPLETE_SUSPENDED_OBJECT_SUCCESS: string = 'dataStoreCompleteSuspendedObjectSuccess';
                get: function () {
                    return 'dataStoreCompleteSuspendedObjectSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "COMPLETE_SUSPENDED_OBJECT_FAILED", {
                /**
                 * Dispatched when a call made to the `{@link nwf.nex.DataStore#completeSuspendedData nwf.nex.DataStore.completeSuspendedData}` function fails.
                 * @property {String} [COMPLETE_SUSPENDED_OBJECT_FAILED='dataStoreCompleteSuspendedObjectFailed']
                 * @static @constant
                 * @since 1.7
                 */
                // public static COMPLETE_SUSPENDED_OBJECT_FAILED: string = 'dataStoreCompleteSuspendedObjectFailed';
                get: function () {
                    return 'dataStoreCompleteSuspendedObjectFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "DOWNLOAD_RATING_LOG_SUCCESS", {
                /**
                 * Dispatched when a call made to the `{@link nwf.nex.DataStore#downloadRatingLog nwf.nex.DataStore.downloadRatingLog}` function is successful.
                 * @property {String} [DOWNLOAD_RATING_LOG_SUCCESS='dataStoreDownloadRatingLogSuccess']
                 * @static @constant
                 * @since 1.7
                 * @see nwf.events.DataStoreEvent.ratingLog
                 */
                // public static DOWNLOAD_RATING_LOG_SUCCESS: string = 'dataStoreDownloadRatingLogSuccess';
                get: function () {
                    return 'dataStoreDownloadRatingLogSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStoreEvent.prototype, "DOWNLOAD_RATING_LOG_FAILED", {
                /**
                 * Dispatched when a call made to the `{@link nwf.nex.DataStore#downloadRatingLog nwf.nex.DataStore.downloadRatingLog}` function fails.
                 * @property {String} [DOWNLOAD_RATING_LOG_FAILED='dataStoreDownloadRatingLogFailed']
                 * @static @constant
                 * @since 1.7
                 * @see nwf.events.DataStoreEvent.errorCode
                 */
                // public static DOWNLOAD_RATING_LOG_FAILED: string = 'dataStoreDownloadRatingLogFailed';
                get: function () {
                    return 'dataStoreDownloadRatingLogFailed';
                },
                enumerable: true,
                configurable: true
            });
            return DataStoreEvent;
        })(events.Event);
        events.DataStoreEvent = DataStoreEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        /**
         * DataStoreDataFlag constants.
         *
         * @enum nwf.nex.DataStoreDataFlag
         * @author Aaron Ward
         * @author Shawn Gates
         */
        nex.DataStoreDataFlag = {
            /**
              * Data is normal.
              * @type uint16
              * @since 1.4
              * @static @constant
              */
            FLAG_NONE: 0,
            /**
             * A data review is required before the post will be accessible.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            FLAG_NEED_REVIEW: 1,
            /**
             * Extends the period of validity when the data is referenced or updated.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            FLAG_PERIOD_FROM_LAST_REFERRED: 2,
            /**
             * Notifies the recipient after the object is posted.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            FLAG_USE_NOTIFICATION_ON_POST: 8,
            /**
             * Upload only metadata; do not use dedicated storage server. Usually there is no need to use this flag.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            FLAG_NOT_USE_FILESERVER: 32,
            /**
             * After the object is posted, it will stay disabled until an additional function is run.
             * @type uint16
             * @since 1.7
             * @static @constant
             */
            FLAG_NEED_COMPLETION: 64
        };
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        /**
         * DataStoreMetaCompareFlag constants.
         *
         * @enum nwf.nex.DataStoreMetaCompareFlag
         * @author Shawn Gates
         */
        nex.DataStoreMetaCompareFlag = {
            /**
              * No Setting.
              * @type uint16
              * @since 1.7
              * @static @constant
              */
            COMPARISON_FLAG_NONE: 0,
            /**
             * Compare titles.
             * @type uint16
             * @since 1.7
             * @static @constant
             */
            COMPARISON_FLAG_NAME: 1,
            /**
             * Compare access permission.
             * @type uint16
             * @since 1.7
             * @static @constant
             */
            COMPARISON_FLAG_ACCESS_PERMISSION: 2,
            /**
             * Compare update permission.
             * @type uint16
             * @since 1.7
             * @static @constant
             */
            COMPARISON_FLAG_UPDATE_PERMISSION: 4,
            /**
             * Compare the number of days in the valid period.
             * @type uint16
             * @since 1.7
             * @static @constant
             */
            COMPARISON_FLAG_PERIOD: 8,
            /**
             * Compare binary data.
             * @type uint16
             * @since 1.7
             * @static @constant
             */
            COMPARISON_FLAG_METABINARY: 16,
            /**
             * Compare tags.
             * @type uint16
             * @since 1.7
             * @static @constant
             */
            COMPARISON_FLAG_TAGS: 32,
            /**
             * Compare the data type.
             * @type uint16
             * @since 1.7
             * @static @constant
             */
            COMPARISON_FLAG_DATA_TYPE: 64,
            /**
             * Compare status.
             * @type uint16
             * @since 1.7
             * @static @constant
             */
            COMPARISON_FLAG_STATUS: 256,
            /**
             * Compare all.
             * @type uint16
             * @since 1.7
             * @static @constant
             */
            COMPARISON_FLAG_ALL: 65535,
        };
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        /**
         * DataStoreObjectStatus constants.
         *
         * @enum nwf.nex.DataStoreObjectStatus
         * @author Aaron Ward
         * @author Shawn Gates
         */
        nex.DataStoreObjectStatus = {
            /**
              * Data is normal.
              * @type uint16
              * @since 1.4
              * @static @constant
              */
            STATUS_NORMAL: 0,
            /**
             * Data is pending review and approval.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            STATUS_PENDING: 2,
            /**
             * Data has been reviewed and rejected.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            STATUS_REJECTED: 5
        };
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        /**
         * DataStoreOwnerType constants.
         *
         * @enum nwf.nex.DataStoreOwnerType
         * @author Aaron Ward
         * @author Shawn Gates
         */
        nex.DataStoreOwnerType = {
            /**
             * Any type of owner.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            ANYBODY: 0,
            /**
             * Limit to the user's friends.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            FRIENDS: 1,
            /**
             * Exclude the IDs specified in the search.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            EXCLUDE_SPECIFIED_IDS: 2
        };
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        /**
         * DataStorePermission constants.
         *
         * @enum nwf.nex.DataStorePermission
         * @author Aaron Ward
         * @author Shawn Gates
         */
        nex.DataStorePermission = {
            /**
             * All principal IDs are permitted.
             * @type uint16
             * @since 1.3
             * @static @constant
             */
            PUBLIC: 0,
            /**
             * Only principal IDs of friends are permitted.
             * @type uint16
             * @since 1.3
             * @static @constant
             */
            FRIEND: 1,
            /**
             * Only specified multiple principal IDs are permitted.
             * @type uint16
             * @since 1.3
             * @static @constant
             */
            SPECIFIED: 2,
            /**
             * Permission for the user that uploaded the data only.
             * @type uint16
             * @since 1.3
             * @static @constant
             */
            PRIVATE: 3,
            /**
             * Permission for a number of specified principal IDs that are are also the principal IDs of friends. The server confirms that the principal IDs are those of friends.
             * @type uint16
             * @since 1.3
             * @static @constant
             */
            SPECIFIED_FRIEND: 4
        };
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        /**
         * DataStoreRatingLockPeriod constants.
         *
         * @enum nwf.nex.DataStoreRatingLockPeriod
         * @author Aaron Ward
         * @author Shawn Gates
         */
        nex.DataStoreRatingLockPeriod = {
            /**
              * Lock will be released each Monday.
              * @property {uint16}  [=-1]
              * @since 1.4
              * @static @constant
              */
            RATING_LOCK_PERIOD_MON: -1,
            /**
             * Lock will be released each Tuesday.
             * @property {uint16} [=-2]
             * @since 1.4
             * @static @constant
             */
            RATING_LOCK_PERIOD_TUE: -2,
            /**
             * Lock will be released each Wednesday.
             * @property {uint16} [=-3]
             * @since 1.4
             * @static @constant
             */
            RATING_LOCK_PERIOD_WED: -3,
            /**
             * Lock will be released each Thursday.
             * @property {uint16} [=-4]
             * @since 1.4
             * @static @constant
             */
            RATING_LOCK_PERIOD_THU: -4,
            /**
             * Lock will be released each Friday.
             * @property {uint16} [=-5]
             * @since 1.4
             * @static @constant
             */
            RATING_LOCK_PERIOD_FRI: -5,
            /**
             * Lock will be released each Saturday.
             * @property {uint16} [=-6]
             * @since 1.4
             * @static @constant
             */
            RATING_LOCK_PERIOD_SAT: -6,
            /**
             * Lock will be released each Sunday.
             * @property {uint16} [=-7]
             * @since 1.4
             * @static @constant
             */
            RATING_LOCK_PERIOD_SUN: -7,
            /**
             * Lock will be released on the first of each month.
             * @property {uint16} [=-17]
             * @since 1.4
             * @static @constant
             */
            RATING_LOCK_PERIOD_DAY_ONE: -17
        };
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        /**
         * DataStoreRatingOption constants.
         *
         * @enum nwf.nex.DataStoreRatingOption
         * @author Aaron Ward
         * @author Shawn Gates
         */
        nex.DataStoreRatingOption = {
            /**
              * Empty flag.
              * @type uint16
              * @since 1.4
              * @static @constant
              */
            FLAG_NONE: 0,
            /**
             * When FLAG_MODIFIABLE is specified, the previous ratings value before the re-rating is subtracted from the total, and the new ratings value is added to the total.  This limits each user to one rating input per principal ID.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            FLAG_MODIFIABLE: 4,
            /**
             * When `FLAG_ROUND_ZERO` is specified, the rating will be rounded to 0 in the case of a negative result from subtraction.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            FLAG_ROUND_ZERO: 8,
            /**
             * When FLAG_DISABLE_SELF_RATING is specified, self-rating is disabled.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            FLAG_DISABLE_SELF_RATING: 16
        };
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        /**
         * DataStoreOwnerType constants.
         *
         * @enum nwf.nex.DataStoreResultOption
         * @author Aaron Ward
         * @author Shawn Gates
         */
        nex.DataStoreResultOption = {
            /**
              * Download no additional data.
              * @type uint16
              * @since 1.4
              * @static @constant
              */
            GET_NONE: 0,
            /**
             * Download the tags as part of the meta info.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            GET_TAGS: 1,
            /**
             * Download ratings as part of the meta info.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            GET_RATINGS: 2,
            /**
             * Download metaBinary data as part of the meta info.
             * From the NEX documentation: <i>When results include meta-binary data, your implementation must adjust the number of results retrieved so that the total size of the search results is not too large. As a rule, keep the total size of meta-binary data in meta-information to no more than 20 KB.</i>
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            GET_METABINARY: 4
        };
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        /**
         * DataStoreSearchType constants.
         *
         * @enum nwf.nex.DataStoreSearchType
         * @author Aaron Ward
         * @author Shawn Gates
         */
        nex.DataStoreSearchType = {
            /**
              * Access permission is `nwf.nex.DataStorePermission.PUBLIC`.
              * @type uint16
              * @since 1.4
              * @static @constant
              */
            SEARCH_TYPE_PUBLIC: 1,
            /**
             * The local host's owner and access rights are `nwf.nex.DataStorePermission.FRIEND`.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            SEARCH_TYPE_SEND_FRIEND: 2,
            /**
             * The local host's owner and access rights are `nwf.nex.DataStorePermission.SPECIFIED`.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            SEARCH_TYPE_SEND_SPECIFIED: 3,
            /**
             * The local host's owner and access rights are `nwf.nex.DataStorePermission.SPECIFIED_FRIEND`.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            SEARCH_TYPE_SEND_SPECIFIED_FRIEND: 4,
            /**
             * The local host's owner and access rights are either `nwf.nex.DataStorePermission.FRIEND`, `nwf.nex.DataStorePermission.SPECIFIED`, or `nwf.nex.DataStorePermission.SPECIFIED_FRIEND`.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            SEARCH_TYPE_SEND: 5,
            /**
             * Data uploaded by friend of self with access permission `nwf.nex.DataStorePermission.FRIEND`.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            SEARCH_TYPE_FRIEND: 6,
            /**
             * Access permission is `nwf.nex.DataStorePermission.SPECIFIED` or `nwf.nex.DataStorePermission.SPECIFIED_FRIEND` and data was received by self.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            SEARCH_TYPE_RECEIVED_SPECIFIED: 7,
            /**
             * Access permission is either `nwf.nex.DataStorePermission.SPECIFIED` or `nwf.nex.DataStorePermission.SPECIFIED_FRIEND` and data was received by self, or data was uploaded by friend with access permission `nwf.nex.DataStorePermission.FRIEND`.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            SEARCH_TYPE_RECEIVED: 8,
            /**
             * The local host's owner and access rights are `nwf.nex.DataStorePermission.PRIVATE`.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            SEARCH_TYPE_PRIVATE: 9,
            /**
             * The local host's owner and status is `nwf.nex.DataStoreObjectStatus.STATUS_NORMAL`.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            SEARCH_TYPE_OWN: 10,
            /**
             * Data uploaded by a user other than the local user/local user's friends and which has `nwf.nex.DataStorePermission.PUBLIC` access permissions.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            SEARCH_TYPE_PUBLIC_EXCLUDE_FRIEND: 11,
            /**
             * Data owned by the local system and the status is `nwf.nex.DataStoreObjectStatus.STATUS_PENDING`.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            SEARCH_TYPE_OWN_PENDING: 12,
            /**
             * Data owned by the local system and the status is `nwf.nex.DataStoreObjectStatus.STATUS_REJECTED`.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            SEARCH_TYPE_OWN_REJECTED: 13,
            /**
             * Data owned by the local system.
             * @type uint16
             * @since 1.4
             * @static @constant
             */
            SEARCH_TYPE_OWN_ALL: 14
        };
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        /**
         * DataStoreSearchSortColumn constants.
         *
         * @enum nwf.nex.DataStoreSearchSortColumn
         * @author Aaron Ward
         * @author Shawn Gates
         */
        nex.DataStoreSearchSortColumn = {
            /**
              * Data ID.
              * @type uint16
              * @since 1.5
              * @static @constant
              */
            DATAID: 0,
            /**
             * Size.
             * @type uint16
             * @since 1.5
             * @static @constant
             * @removed 1.8.3
             */
            SIZE: 1,
            /**
             * Title.
             * @type uint16
             * @since 1.5
             * @static @constant
             * @removed 1.8.3
             */
            NAME: 2,
            /**
             * Data type.
             * @type uint16
             * @since 1.5
             * @static @constant
             * @removed 1.8.3
             */
            DATA_TYPE: 3,
            /**
             * Creation date and time.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            CREATED_TIME: 5,
            /**
             * Date modified.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            UPDATED_TIME: 6,
            /**
             * Total ratings value for ratings slot 0.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_0: 0x40,
            /**
             * Total ratings value for ratings slot 1.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_1: 0x41,
            /**
             * Total ratings value for ratings slot 2.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_2: 0x42,
            /**
             * Total ratings value for ratings slot 3.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_3: 0x43,
            /**
             * Total ratings value for ratings slot 4.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_4: 0x44,
            /**
             * Total ratings value for ratings slot 5.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_5: 0x45,
            /**
             * Total ratings value for ratings slot 6.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_6: 0x46,
            /**
             * Total ratings value for ratings slot 7.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_7: 0x47,
            /**
             * Total ratings value for ratings slot 8.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_8: 0x48,
            /**
             * Total ratings value for ratings slot 9.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_9: 0x49,
            /**
             * Total ratings value for ratings slot 10.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_10: 0x4a,
            /**
             * Total ratings value for ratings slot 11.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_11: 0x4b,
            /**
             * Total ratings value for ratings slot 12.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_12: 0x4c,
            /**
             * Total ratings value for ratings slot 13.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_13: 0x4d,
            /**
             * Total ratings value for ratings slot 14.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_14: 0x4e,
            /**
             * Total ratings value for ratings slot 15.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            RATING_SLOT_15: 0x4f,
            /**
             * Average rating value for ratings slot 0.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_0: 0x60,
            /**
             * Average rating value for ratings slot 1.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_1: 0x61,
            /**
             * Average rating value for ratings slot 2.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_2: 0x62,
            /**
             * Average rating value for ratings slot 3.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_3: 0x63,
            /**
             * Average rating value for ratings slot 4.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_4: 0x64,
            /**
             * Average rating value for ratings slot 5.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_5: 0x65,
            /**
             * Average rating value for ratings slot 6.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_6: 0x66,
            /**
             * Average rating value for ratings slot 7.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_7: 0x67,
            /**
             * Average rating value for ratings slot 8.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_8: 0x68,
            /**
             * Average rating value for ratings slot 9.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_9: 0x69,
            /**
             * Average rating value for ratings slot 10.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_10: 0x6a,
            /**
             * Average rating value for ratings slot 11.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_11: 0x6b,
            /**
             * Average rating value for ratings slot 12.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_12: 0x6c,
            /**
             * Average rating value for ratings slot 13.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_13: 0x6d,
            /**
             * Average rating value for ratings slot 14.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_14: 0x6e,
            /**
             * Average rating value for ratings slot 15.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            AVG_RATING_SLOT_15: 0x6f
        };
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/// <reference path="./DataStoreDownloadedObject.ts" />
/// <reference path="./DataStoreMetaCompareParam.ts" />
/// <reference path="./DataStoreRating.ts" />
/// <reference path="./DataStoreRatingInitParam.ts" />
/// <reference path="./DataStoreRatingLog.ts" />
/// <reference path="./DataStoreSearchParam.ts" />
/// <reference path="./DataStoreSearchResult.ts" />
/// <reference path="./DataStoreUploadObject.ts" />
/// <reference path="../events/DataStoreEvent.ts" />
/// <reference path="./DataStoreDataFlag.ts" />
/// <reference path="./DataStoreMetaCompareFlag.ts" />
/// <reference path="./DataStoreObjectStatus.ts" />
/// <reference path="./DataStoreOwnerType.ts" />
/// <reference path="./DataStorePermission.ts" />
/// <reference path="./DataStoreRatingLockPeriod.ts" />
/// <reference path="./DataStoreRatingOption.ts" />
/// <reference path="./DataStoreResultOption.ts" />
/// <reference path="./DataStoreSearchType.ts" />
/// <reference path="./DataStoreSearchSortColumn.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        var DataStore = (function (_super) {
            __extends(DataStore, _super);
            /**
             * Class for interacting with the NEX Data Stores.
             *
             * Class purpose - Work with NEX Data Store data
             *
             * **CAUTION:** Please be aware that anything you post to the generic Data Store when using the included sample or Running Client application will be visible to **all** Nintendo Web Framework developers.
             *
             * <div style="color:#aa0000; font-weight:bold;">
             * Do not post any confidential information, including information owned by Nintendo or information related to your own application in development.
             * </div><br />
             *
             * The `DataStore` class dispatches the following events:
             *
             * - nwf.events.DataStoreEvent.DELETE_DATA_FAILED
             * - nwf.events.DataStoreEvent.DELETE_DATA_SUCCESS
             * - nwf.events.DataStoreEvent.DOWNLOAD_DATA_FAILED
             * - nwf.events.DataStoreEvent.DOWNLOAD_DATA_SUCCESS
             * - nwf.events.DataStoreEvent.UPLOAD_DATA_FAILED
             * - nwf.events.DataStoreEvent.UPLOAD_DATA_SUCCESS
             * - nwf.events.DataStoreEvent.UPDATE_DATA_FAILED
             * - nwf.events.DataStoreEvent.UPDATE_DATA_SUCCESS
             * - nwf.events.DataStoreEvent.RATE_DATA_FAILED
             * - nwf.events.DataStoreEvent.RATE_DATA_SUCCESS
             * - nwf.events.DataStoreEvent.SEARCH_FAILED
             * - nwf.events.DataStoreEvent.SEARCH_SUCCESS
             * - nwf.events.DataStoreEvent.DOWNLOAD_BATCH_DATA_FAILED
             * - nwf.events.DataStoreEvent.DOWNLOAD_BATCH_DATA_SUCCESS
             * - nwf.events.DataStoreEvent.COMPLETE_SUSPENDED_OBJECT_FAILED
             * - nwf.events.DataStoreEvent.COMPLETE_SUSPENDED_OBJECT_SUCCESS
             * - nwf.events.DataStoreEvent.DOWNLOAD_RATING_LOG_SUCCESS
             * - nwf.events.DataStoreEvent.DOWNLOAD_RATING_LOG_FAILED
             *
             * @class nwf.nex.DataStore
             * @extends nwf.events.EventDispatcher
             * @singleton
             * @author Aaron Ward
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
            * @private
            * The `new` method is not used to get an instance of a `DataStore` object; use #getInstance instead.
            * @method constructor
            * @since 1.0
            */
            function DataStore() {
                _super.call(this);
            }
            Object.defineProperty(DataStore.prototype, "isReady", {
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                /**
                  * Returns `true` if the library has been initialized, or `false` otherwise.
                  * @property {Boolean} [isReady=false]
                  * @since 1.2
                  * @readonly
                  * @removed 1.4
                  */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStore.prototype, "isLoggedIn", {
                /**
                 * Returns `true` if the library is ready to begin communicating with the server, or `false` if it is not.
                 * @property {Boolean} [isLoggedIn=false]
                 * @since 1.3
                 * @readonly
                 * @removed 1.4
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataStore.prototype, "isBound", {
                /**
                 * Returns `true` if the Data Store interface is bound to the NEX Game Server, or `false` if it is not.
                 * @property {Boolean} [isBound=false]
                 * @since 1.4
                 * @readonly
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Queries the server and returns a DataStore post.
             *
             * @param {String} dataID The ID of the data to be retrieved.
             * @param {Boolean} [getTags=false] When set to `true`, the returned post has its {@link nwf.nex.DataStoreDownloadedObject#tags tags} attached. When set to `false`, it does not.
             * @param {Boolean} [getMetaBinary=false] When set to `true`, the returned post has its {@link nwf.nex.DataStoreDownloadedObject#metaBinary metaBinary} attached. When set to `false`, it does not.
             * @param {Boolean} [getRecipientIds=false] When set to `true`, the returned post has its recipient IDs attached. When set to `false`, it does not.
             *
             * __See Related:__
             *
             * {@link nwf.nex.DataStoreDownloadedObject#accessPermissionRecipientIDs}
             *
             * {@link nwf.nex.DataStoreDownloadedObject#updatePermissionRecipientIDs}.
             * @param {Boolean} [getRatings=false] When set to `true`, the returned post has its {@link nwf.nex.DataStoreDownloadedObject#ratings rating} info attached. When set to `false`, it does not.
             * @returns {uint32} Result code.
             * @since 1.2
             * @see nwf.events.DataStoreEvent.DOWNLOAD_DATA_SUCCESS
             * @see nwf.events.DataStoreEvent.DOWNLOAD_DATA_FAILED
             * @async
             */
            DataStore.prototype.downloadData = function (dataID, getTags, getMetaBinary, getRecipientIds, getRatings) {
                return 0;
            };
            /**
             * Queries the server and returns a DataStore post that is stored in a specific user's persistent data.
             *
             * @param {Number} principalID The `{@link nwf.act.NintendoAccount#principalID principalID}` of the user who uploaded the data.
             * @param {Number} slotID The `{@link nwf.nex.DataStoreUploadObject#persistenceSlot persistenceSlot}` to be retrieved.
             * @param {Boolean} [getTags=false] When set to `true`, the returned post has its {@link nwf.nex.DataStoreDownloadedObject#tags tags} attached. When set to `false`, it does not.
             * @param {Boolean} [getMetaBinary=false] When set to `true`, the returned post has its {@link nwf.nex.DataStoreDownloadedObject#metaBinary metaBinary} attached. When set to `false`, it does not.
             * @param {Boolean} [getRecipientIds=false] When set to `true`, the returned post has its recipient IDs attached. When set to `false`, it does not.
             *
             * __See Related:__
             *
             * {@link nwf.nex.DataStoreDownloadedObject#accessPermissionRecipientIDs}
             *
             * {@link nwf.nex.DataStoreDownloadedObject#updatePermissionRecipientIDs}.
             * @param {Boolean} [getRatings=false] When set to `true`, the returned post has its {@link nwf.nex.DataStoreDownloadedObject#ratings rating} info attached. When set to `false`, it does not.
             * @returns {uint32} Result code.
             * @since 1.5
             * @see nwf.events.DataStoreEvent.DOWNLOAD_DATA_SUCCESS
             * @see nwf.events.DataStoreEvent.DOWNLOAD_DATA_FAILED
             * @async
             */
            DataStore.prototype.downloadPersistentData = function (principalID, slotID, getTags, getMetaBinary, getRecipientIds, getRatings) {
                return 0;
            };
            /**
            * Initializes the DataStore library.
            * This must be called before other functions are called.
            * The DataStore library can only be initialized once while the application is running.
            * @returns {null}
            * @since 1.2
            * @see nwf.events.DataStoreEvent.INITIALIZATION_SUCCESS
            * @see nwf.events.DataStoreEvent.INITIALIZATION_FAILED
            * @removed 1.4
            */
            DataStore.prototype.initialize = function () {
                return null;
            };
            /**
             * Logs into the Game Server and connects to the Data Store
             * @returns {null}
             * @since 1.3
             * @see nwf.events.DataStoreEvent.LOGIN_SUCCESS
             * @see nwf.events.DataStoreEvent.LOGIN_FAILED
             * @removed 1.4
             */
            DataStore.prototype.login = function () {
                return null;
            };
            /**
             * Logs out of the Game Server and disconnects from the Data Store
             * @returns {null}
             * @since 1.3
             * @see nwf.events.DataStoreEvent.LOGOUT_SUCCESS
             * @see nwf.events.DataStoreEvent.LOGOUT_FAILED
             * @removed 1.4
             */
            DataStore.prototype.logout = function () {
                return null;
            };
            /**
             * Posts data to the server. Calling this function triggers communication.
             * @param {nwf.nex.DataStoreUploadObject} post The data to send to the server.
             * @returns {uint32} Result code.
             * @since 1.2
             * @see nwf.events.DataStoreEvent.UPLOAD_DATA_SUCCESS
             * @see nwf.events.DataStoreEvent.UPLOAD_DATA_FAILED
             * @async
             */
            DataStore.prototype.uploadData = function (post) {
                return 0;
            };
            /**
             * Creates and binds the Data Store interface to the NEX Game Server. This must be called before other Data Store methods. Must be logged into the Game Server before this will succeed.
             * @returns {Boolean} Returns `true` if the bind succeeded, or `false` otherwise.
             * @see nwf.nex.GameServer.login
             * @since 1.4
             */
            DataStore.prototype.bind = function () {
                return true;
            };
            /**
             * Searches the server for matching data.
             * @param {nwf.nex.DataStoreSearchParam} searchParam The type of search to perform.
             * @returns {uint32} Result code.
             * @since 1.4
             * @see nwf.events.DataStoreEvent.SEARCH_SUCCESS
             * @see nwf.events.DataStoreEvent.SEARCH_FAILED
             * @async
             */
            DataStore.prototype.dataSearch = function (searchParam) {
                return 0;
            };
            /**
             * Deletes a post from the server. Only users with update permissions can delete posts.
             * If this function is used to delete data that has been made persistent, that persistence slot will also be cleared.
             *
             * @param {String} dataID The ID of the data to be deleted.
             * @returns {uint32} Result code.
             * @since 1.4
             * @see nwf.events.DataStoreEvent.DELETE_DATA_SUCCESS
             * @see nwf.events.DataStoreEvent.DELETE_DATA_FAILED
             * @async
             */
            DataStore.prototype.deleteData = function (dataID) {
                return 0;
            };
            /**
             * Queries the server using a nwf.nex.DataStoreSearchResult and returns a DataStore post.
             *
             * @param {nwf.nex.DataStoreSearchResult} searchResult The search result indicating the data to be retrieved.
             * @returns {uint32} Result code.
             * @since 1.4
             * @see nwf.events.DataStoreEvent.DOWNLOAD_DATA_SUCCESS
             * @see nwf.events.DataStoreEvent.DOWNLOAD_DATA_FAILED
             * @async
             */
            DataStore.prototype.downloadDataByResult = function (searchResult) {
                return 0;
            };
            /**
             * Updates data on the server. Calling this function triggers communication.
             * @param {String} dataID The ID of the data to be updated.
             * @param {nwf.nex.DataStoreUploadObject} post The data to send to the server. If the data property is not set, only the meta info is updated.
             *
             * __Note:__ _If the data property was not set when the object was initially posted, data cannot be updated later. This dispatches a `nwf.system.SystemErrorCode.NEX_DATA_STORE_OPERATION_NOT_ALLOWED` error._
             * @param {nwf.nex.DataStoreMetaCompareParam} [metaCompare] If this property is set, the update will only occur if the specified properties match the metadata of the data on the server. See `nwf.nex.DataStoreMetaCompareParam` for more information.
             * @returns {uint32} Result code.
             * @since 1.4
             * @see nwf.events.DataStoreEvent.UPDATE_DATA_SUCCESS
             * @see nwf.events.DataStoreEvent.UPDATE_DATA_FAILED
             * @async
             */
            DataStore.prototype.updateData = function (dataID, post, metaCompare) {
                return 0;
            };
            /**
             * Rates an object from the server.
             *
             * @param {String} dataID The ID of the data to be rated.
             * @param {uint32} slotId The ratings slot to be modified.
             * @param {uint32} ratingValue The value to add to the rating.
             * @returns {uint32} Result code.
             * @since 1.4
             * @see nwf.events.DataStoreEvent.RATE_DATA_SUCCESS
             * @see nwf.events.DataStoreEvent.RATE_DATA_FAILED
             * @async
             */
            DataStore.prototype.rateData = function (dataID, slotId, ratingValue) {
                return 0;
            };
            /**
             * Queries the server and returns a collection of DataStore posts.
             * The posts returned do not have their data properties set, as this operation is only a shallow download of the basic metadata.
             *
             * @param {Array} dataIDs The IDs of the data to be retrieved.
             * @param {Boolean} [getTags=false] When set to `true`, the returned posts have their tags attached. When set to `false`, they do not.
             * @param {Boolean} [getMetaBinary=false] When set to `true`, the returned posts have their {@link nwf.nex.DataStoreDownloadedObject#metaBinary metaBinary} attached. When set to `false`, they do not.
             * @param {Boolean} [getRecipientIds=false] When set to `true`, the returned posts have their recipient IDs attached. When set to `false`, they do not. See {@link nwf.nex.DataStoreDownloadedObject#accessPermissionRecipientIDs} and {@link nwf.nex.DataStoreDownloadedObject#updatePermissionRecipientIDs}.
             * @param {Boolean} [getRatings=false] When set to `true`, the returned posts have their {@link nwf.nex.DataStoreDownloadedObject#ratings rating} info attached. When set to `false`, they do not.
             * @returns {uint32} Result code.
             * @since 1.4.5
             * @see nwf.events.DataStoreEvent.DOWNLOAD_BATCH_DATA_SUCCESS
             * @see nwf.events.DataStoreEvent.DOWNLOAD_BATCH_DATA_FAILED
             * @async
             */
            DataStore.prototype.downloadBatchData = function (dataID, getTags, getMetaBinary, getRecipientIds, getRatings) {
                return 0;
            };
            /**
             * Completes a collection of DataStore posts that are currently suspended.
             * If any `{@link nwf.nex.DataStoreUploadObject#dataID dataID}`s in the provided parameter are not suspended, the operation will fail and all the suspended `{@link nwf.nex.DataStoreUploadObject#dataID dataID}`s will remain suspended.
             *
             * @param {Array} dataIDs The IDs of the data to be published.
             * @returns {uint32} Result code.
             * @since 1.7
             * @see nwf.nex.DataStoreUploadObject.needsCompletion
             * @see nwf.events.DataStoreEvent.COMPLETE_SUSPENDED_OBJECT_SUCCESS
             * @see nwf.events.DataStoreEvent.COMPLETE_SUSPENDED_OBJECT_FAILED
             * @async
             */
            DataStore.prototype.completeSuspendedData = function (dataIDs) {
                return 0;
            };
            /**
             * Retrieves a `{@link nwf.nex.DataStoreRatingLog RatingLog}` for the specified data and slot.
             *
             * Rating logs can only be downloaded for ratings that have the `{@link nwf.nex.DataStoreRatingOption#FLAG_MODIFIABLE FLAG_MODIFIABLE}` flag set on the RatingInitParam `{@link nwf.nex.DataStoreRatingInitParam#optionFlag optionFlag}`.
             *
             * @param {String} dataID The ID of the data to retrieve the rating log for.
             * @param {Number} slot The rating slot to retrieve the log for.
             * @returns {uint32} Result code.
             * @since 1.7
             * @see nwf.events.DataStoreEvent.DOWNLOAD_RATING_LOG_SUCCESS
             * @see nwf.events.DataStoreEvent.DOWNLOAD_RATING_LOG_FAILED
             * @async
             */
            DataStore.prototype.downloadRatingLog = function (dataID, slot) {
                return 0;
            };
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Accesses an instance of the `DataStore` singleton.
             *
             * @method getInstance
             * @returns {nwf.nex.DataStore} The `DataStore` singleton instance.
             * @since 1.2
             * @static
             */
            DataStore.getInstance = function () {
                if (!this.s_instance) {
                    this.s_instance = new DataStore();
                }
                return this.s_instance;
            };
            /**
             * Method to test for class availability.
             *
             * @method isSupported
             * @returns {Boolean} Returns `false` if the class is not supported, or `true` if the class is available.
             * @static
             * @since 1.2
             */
            DataStore.isSupported = function () {
                return false;
            };
            return DataStore;
        })(nwf.events.EventDispatcher);
        nex.DataStore = DataStore;
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        var RankData = (function () {
            function RankData() {
            }
            Object.defineProperty(RankData.prototype, "category", {
                /**
                 * Class containing the structure of a downloaded Data Store post.
                 *
                 * @class nwf.nex.RankData
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * The category of the `RankData`.
                 * @property {Number} [category=0]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankData.prototype, "prinicipalID", {
                /**
                 * The principalID associated with the `RankData`.
                 * @property {Number} [prinicipalID=0]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankData.prototype, "uniqueID", {
                /**
                 * The uniqueID associated with the `RankData`.
                 * @property {Number} [uniqueID=0]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankData.prototype, "order", {
                /**
                 * The order of the `RankData`.
                 * @property {Number} [order=0]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankData.prototype, "score", {
                /**
                 * The score of the `RankData`.
                 * @property {Number} [score=0]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankData.prototype, "group0", {
                /**
                 * The group0 of the `RankData`.
                 * @property {Number} [group0=0]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankData.prototype, "group1", {
                /**
                 * The group1 of the `RankData`.
                 * @property {Number} [group1=0]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankData.prototype, "commonData", {
                /**
                 * The common data associated with the user.
                 * @property {Blob} [commonData={}]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return {};
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankData.prototype, "param", {
                /**
                 * The param of the RankData. It is a uint64 value represented as a hex string.
                 * @property {String} [param='']
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return "";
                },
                enumerable: true,
                configurable: true
            });
            return RankData;
        })();
        nex.RankData = RankData;
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        var RankingSearchParam = (function () {
            /**
             * Class defining the parameters of a Ranking Client search.
             *
             * @class nwf.nex.RankingSearchParam
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new RankingSearchParam object.
             * @method constructor
             * @since 1.4
             */
            function RankingSearchParam() {
            }
            Object.defineProperty(RankingSearchParam.prototype, "category", {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The category to perform the search on.
                 * @property {uint32} [category=0]
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingSearchParam.prototype, "groupIndex", {
                /**
                 * The ranking group to search in. When set to the default value, no filtering by group will occur.
                 * @property {uint32} [groupIndex=255]
                 * @since 1.4
                 */
                get: function () {
                    return 255;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingSearchParam.prototype, "groupNum", {
                /**
                 * The value of the ranking group specified by `#groupIndex` to filter on.
                 * @property {uint32} [groupNum=0]
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingSearchParam.prototype, "length", {
                /**
                 * The number of {@link nwf.nex.RankData RankData} objects to fetch.
                 * @property {uint32} [length=20]
                 * @since 1.4
                 */
                get: function () {
                    return 20;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingSearchParam.prototype, "offset", {
                /**
                 * Specifies the offset from which to begin getting rankings.
                 * @property {uint32} [offset=0]
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingSearchParam.prototype, "orderCalculation", {
                /**
                 * Specifies how rankings are ordered.
                 * @property {uint32} [orderCalculation=nwf.nex.RankingOrderCalculation.CALC_113]
                 * @since 1.4
                 * @see nwf.nex.RankingOrderCalculation.CALC_113
                 */
                get: function () {
                    return nwf.nex.RankingOrderCalculation.CALC_113;
                    // return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingSearchParam.prototype, "principalID", {
                /**
                 * The principalID to perform the search on.
                 * @property {uint32} [principalID=0]
                 * @since 1.4
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingSearchParam.prototype, "rankingMode", {
                /**
                 * The type of ranking to return.
                 * @property {uint32} [rankingMode=nwf.nex.RankingMode.RANGE]
                 * @since 1.4
                 * @see nwf.nex.RankingMode.RANGE
                 */
                get: function () {
                    return nwf.nex.RankingMode.RANGE;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingSearchParam.prototype, "timeScope", {
                /**
                 * Specifies the time scope to use when filtering by period.
                 * @property {uint32} [timeScope=nwf.nex.RankingTimeScope.ALL]
                 * @since 1.4
                 * @see nwf.nex.RankingTimeScope.ALL
                 */
                get: function () {
                    return nwf.nex.RankingTimeScope.ALL;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingSearchParam.prototype, "uniqueID", {
                /**
                 * The uniqueID to perform the search on.
                 * @property {String} [uniqueID='0']
                 * @since 1.4
                 */
                get: function () {
                    return '0';
                },
                enumerable: true,
                configurable: true
            });
            return RankingSearchParam;
        })();
        nex.RankingSearchParam = RankingSearchParam;
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var RankingClientEvent = (function (_super) {
            __extends(RankingClientEvent, _super);
            /**
             * Events dispatched by the `RankingClient` class.
             *
             * @class nwf.events.RankingClientEvent
             * @see {@link nwf.nex.RankingClient}
             * @extends nwf.events.Event
             * @author Aaron Ward
             * @author Shawn Gates
             */
            function RankingClientEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(RankingClientEvent.prototype, "commonData", {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Blob data returned from the server after a successful query.
                 *
                 * Only set when `nwf.events.RankingClientEvent.DOWNLOAD_COMMON_DATA_SUCCESS` is dispatched.
                 * @property {Blob} [commonData={}]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return {};
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingClientEvent.prototype, "ranks", {
                /**
                 * The array of {@link nwf.nex.RankData RankData(s)} in rank order returned from the server after a successful search.
                 *
                 * Only set when `nwf.events.RankingClientEvent.DOWNLOAD_RANKING_LIST_SUCCESS` is dispatched.
                 *
                 * __Note:__ _A successful search may return 0 {@link nwf.nex.RankData RankData(s)}._
                 * @property {Array} [ranks=[]]
                 * @readonly
                 * @since 1.4
                 */
                get: function () {
                    return [];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingClientEvent.prototype, "DOWNLOAD_COMMON_DATA_SUCCESS", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when a call made to the `nwf.nex.RankingClient.downloadCommonData` class is successful.
                 * @property {String} [DOWNLOAD_COMMON_DATA_SUCCESS='rankingClientDownloadCommonDataSuccess']
                 * @static @constant
                 * @since 1.4
                 */
                // public static DOWNLOAD_COMMON_DATA_SUCCESS: string = 'rankingClientDownloadCommonDataSuccess';
                get: function () {
                    return 'rankingClientDownloadCommonDataSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingClientEvent.prototype, "DOWNLOAD_COMMON_DATA_FAILED", {
                /**
               * Dispatched when a call made to the `nwf.nex.RankingClient.downloadCommonData` class fails.
               * @property {String} [DOWNLOAD_COMMON_DATA_FAILED='rankingClientDownloadCommonDataFailed']
               * @static @constant
               * @since 1.4
               */
                // public static DOWNLOAD_COMMON_DATA_FAILED: string = 'rankingClientDownloadCommonDataFailed';
                get: function () {
                    return 'rankingClientDownloadCommonDataFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingClientEvent.prototype, "UPLOAD_COMMON_DATA_SUCCESS", {
                /**
                * Dispatched when a call made to the `nwf.nex.RankingClient.uploadCommonData` class is successful.
                * @property {String} [UPLOAD_COMMON_DATA_SUCCESS='rankingClientUploadCommonDataSuccess']
                * @static @constant
                * @since 1.4
                */
                // public static UPLOAD_COMMON_DATA_SUCCESS: string = 'rankingClientUploadCommonDataSuccess';
                get: function () {
                    return 'rankingClientUploadCommonDataSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingClientEvent.prototype, "UPLOAD_COMMON_DATA_FAILED", {
                /**
                * Dispatched when a call made to the `nwf.nex.RankingClient.uploadCommonData` class fails.
                * @property {String} [UPLOAD_COMMON_DATA_FAILED='rankingClientUploadCommonDataFailed']
                * @static @constant
                * @since 1.4
                */
                // public static UPLOAD_COMMON_DATA_FAILED: string = 'rankingClientUploadCommonDataFailed';
                get: function () {
                    return 'rankingClientUploadCommonDataFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingClientEvent.prototype, "DELETE_COMMON_DATA_SUCCESS", {
                /**
                * Dispatched when a call made to `nwf.nex.RankingClient.deleteCommonData` is successful.
                * @property {String} [DELETE_COMMON_DATA_SUCCESS='rankingClientDeleteCommonDataSuccess']
                * @static @constant
                * @since 1.4
                */
                // public static DELETE_COMMON_DATA_SUCCESS: string = 'rankingClientDeleteCommonDataSuccess';
                get: function () {
                    return 'rankingClientDeleteCommonDataSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingClientEvent.prototype, "DELETE_COMMON_DATA_FAILED", {
                /**
                * Dispatched when a call made to `nwf.nex.RankingClient.deleteCommonData` fails.
                * @property {String} [DELETE_COMMON_DATA_FAILED='rankingClientDeleteCommonDataFailed']
                * @static @constant
                * @since 1.4
                */
                // public static DELETE_COMMON_DATA_FAILED: string = 'rankingClientDeleteCommonDataFailed';
                get: function () {
                    return 'rankingClientDeleteCommonDataFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingClientEvent.prototype, "DELETE_SCORE_SUCCESS", {
                /**
                * Dispatched when a call made to `nwf.nex.RankingClient.deleteScore` is successful.
                * @property {String} [DELETE_SCORE_SUCCESS='rankingClientDeleteScoreSuccess']
                * @static @constant
                * @since 1.4
                */
                // public static DELETE_SCORE_SUCCESS: string = 'rankingClientDeleteScoreSuccess';
                get: function () {
                    return 'rankingClientDeleteScoreSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingClientEvent.prototype, "DELETE_SCORE_FAILED", {
                /**
                * Dispatched when a call made to `nwf.nex.RankingClient.deleteScore` fails.
                * @property {String} [DELETE_SCORE_FAILED='rankingClientDeleteScoreFailed']
                * @static @constant
                * @since 1.4
                */
                // public static DELETE_SCORE_FAILED: string = 'rankingClientDeleteScoreFailed';
                get: function () {
                    return 'rankingClientDeleteScoreFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingClientEvent.prototype, "UPLOAD_SCORE_SUCCESS", {
                /**
                * Dispatched when a call made to `nwf.nex.RankingClient.uploadScore` is successful.
                * @property {String} [UPLOAD_SCORE_SUCCESS='rankingClientUploadScoreSuccess']
                * @static @constant
                * @since 1.4
                */
                // public static UPLOAD_SCORE_SUCCESS: string = 'rankingClientUploadScoreSuccess';
                get: function () {
                    return 'rankingClientUploadScoreSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingClientEvent.prototype, "UPLOAD_SCORE_FAILED", {
                /**
                * Dispatched when a call made to `nwf.nex.RankingClient.uploadScore` fails.
                * @property {String} [UPLOAD_SCORE_FAILED='rankingClientUploadScoreFailed']
                * @static @constant
                * @since 1.4
                */
                // public static UPLOAD_SCORE_FAILED: string = 'rankingClientUploadScoreFailed';
                get: function () {
                    return 'rankingClientUploadScoreFailed';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingClientEvent.prototype, "DOWNLOAD_RANKING_LIST_SUCCESS", {
                /**
                * Dispatched when a call made to `nwf.nex.RankingClient.downloadRankingList` is successful.
                * @property {String} [DOWNLOAD_RANKING_LIST_SUCCESS='dataStoreRateDataSuccess']
                * @static @constant
                * @since 1.4
                */
                // public static DOWNLOAD_RANKING_LIST_SUCCESS: string = 'rankingClientDownloadRankingListSuccess';
                get: function () {
                    return 'rankingClientDownloadRankingListSuccess';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RankingClientEvent.prototype, "DOWNLOAD_RANKING_LIST_FAILED", {
                /**
                * Dispatched when a call made to `nwf.nex.RankingClient.downloadRankingList` fails.
                * @property {String} [DOWNLOAD_RANKING_LIST_FAILED='dataStoreRateDataFailed']
                * @static @constant
                * @since 1.4
                */
                // public static DOWNLOAD_RANKING_LIST_FAILED: string = 'rankingClientDownloadRankingListFailed';
                get: function () {
                    return 'rankingClientDownloadRankingListFailed';
                },
                enumerable: true,
                configurable: true
            });
            return RankingClientEvent;
        })(events.Event);
        events.RankingClientEvent = RankingClientEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        /**
         * RankingMode constants.
         *
         * @enum nwf.nex.RankingMode
         * @author Aaron Ward
         * @author Shawn Gates
         */
        nex.RankingMode = {
            /**
              * Range ranking.
              * @type uint16
              * @since 1.5
              * @static @constant
              */
            RANGE: 0,
            /**
             * Nearby rankings.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            NEAR: 1,
            /**
             * Friend rankings
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            FRIEND_RANGE: 2,
            /**
             * Rankings near friends.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            FRIEND_NEAR: 3,
            /**
             * Gets the individual ranking data for a user.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            USER: 4
        };
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        /**
         * RankingOrderCalculation constants.
         *
         * @enum nwf.nex.RankingOrderCalculation
         * @author Aaron Ward
         * @author Shawn Gates
         */
        nex.RankingOrderCalculation = {
            /**
              * Rank the third entry as third place if the top two names have the same score.
              * @property {uint16} [CALC_113=0]
              * @since 1.5
              * @static @constant
              */
            CALC_113: 0,
            /**
             * Rank according to update time if the top two names have the same score.
             * @property {uint16} [CALC_123=1]
             * @since 1.5
             * @static @constant
             */
            CALC_123: 1
        };
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        /**
         * RankingTimeScope constants.
         *
         * @enum nwf.nex.RankingTimeScope
         * @author Aaron Ward
         * @author Shawn Gates
         */
        nex.RankingTimeScope = {
            /**
              * Custom scope set in RMAS. (The default is every Tuesday, from 0:00 to the current time.)
              * @type uint16
              * @since 1.5
              * @static @constant
              */
            CUSTOM_0: 0,
            /**
             * Custom scope set in RMAS. (The default is the first day of every month, from 0:00 to the current time.)
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            CUSTOM_1: 1,
            /**
             * All scopes.
             * @type uint16
             * @since 1.5
             * @static @constant
             */
            ALL: 2
        };
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/// <reference path="./RankData.ts" />
/// <reference path="./RankingSearchParam.ts" />
/// <reference path="../events/RankingClientEvent.ts" />
/// <reference path="./RankingMode.ts" />
/// <reference path="./RankingOrderCalculation.ts" />
/// <reference path="./RankingTimeScope.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var nex;
    (function (nex) {
        var RankingClient = (function (_super) {
            __extends(RankingClient, _super);
            /**
             * Class for interacting with the NEX Ranking Client.
             *
             * The `RankingClient` class dispatches the following events:
             *
             * - nwf.events.RankingClientEvent.DELETE_COMMON_DATA_SUCCESS
             * - nwf.events.RankingClientEvent.DELETE_COMMON_DATA_FAILED
             * - nwf.events.RankingClientEvent.DELETE_SCORE_SUCCESS
             * - nwf.events.RankingClientEvent.DELETE_SCORE_FAILED
             * - nwf.events.RankingClientEvent.DOWNLOAD_COMMON_DATA_SUCCESS
             * - nwf.events.RankingClientEvent.DOWNLOAD_COMMON_DATA_FAILED
             * - nwf.events.RankingClientEvent.DOWNLOAD_RANKING_LIST_SUCCESS
             * - nwf.events.RankingClientEvent.DOWNLOAD_RANKING_LIST_FAILED
             * - nwf.events.RankingClientEvent.UPLOAD_COMMON_DATA_SUCCESS
             * - nwf.events.RankingClientEvent.UPLOAD_COMMON_DATA_FAILED
             * - nwf.events.RankingClientEvent.UPLOAD_SCORE_SUCCESS
             * - nwf.events.RankingClientEvent.UPLOAD_SCORE_FAILED
             *
             * @class nwf.nex.RankingClient
             * @extends nwf.events.EventDispatcher
             * @singleton
             * @author Aaron Ward
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
            * @private
            * The `new` method is not used to get an instance of a `RankingClient` object; use `#getInstance` instead.
            * @method constructor
            * @since 1.0
            */
            function RankingClient() {
                _super.call(this);
            }
            Object.defineProperty(RankingClient.prototype, "isBound", {
                //-------------------------------------------------------------------------
                // PUBLIC ACCESSORS
                //-------------------------------------------------------------------------
                /**
                  * Returns `true` if the Ranking Client interface is bound to the NEX Game Server, or `false` if it is not.
                  * @property {Boolean} [isBound=false]
                  * @since 1.4
                  * @readonly
                  */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            //---------------------------------------------------------------------
            // PUBLIC METHODS
            //---------------------------------------------------------------------
            /**
             * Uploads a score to the Game Server.
             *
             * @param {Number} scoreValue The score value to be submitted.
             * @param {Number} [scoreCategory=0] The category to store the score under. Can be used for searching.
             * @param {Number} [scoreGroup0=0] The primary group to store the score under. Can be used for searching.
             * @param {Number} [scoreGroup1=0] The secondary group to store the score under. Can be used for searching.
             * @param {Boolean} [scoreOrderDesc=true] When set to `true`, scores are sorted in descending order. When set to `false`, they are sorted in ascending order. All scores in each category need to be sorted in the same order.
             * @param {Boolean} [deleteOldScore=false] When set to `true`, the user's previous score in this category is deleted and replaced. When set to `false`, it is not.
             * @param {String} [scoreParamData=""] A uint64 value represented as a hex string. This value can be used to store some additional data, e.g. the dataID of a {@link nwf.nex.DataStoreUploadObject Data Store} object.
             * @param {String} [uniqueID="0"] If this value is not set, the score is stored using the user's primary ID.
             * @returns {uint32} Result code.
             * @since 1.4
             * @see nwf.events.RankingClientEvent.UPLOAD_SCORE_SUCCESS
             * @see nwf.events.RankingClientEvent.UPLOAD_SCORE_FAILED
             * @async
             */
            RankingClient.prototype.uploadScore = function (scoreValue, scoreCategory, scoreGroup0, scoreGroup1, scoreOrderDesc, deleteOldScore, scoreParamData, uniqueID) {
                return 0;
            };
            /**
             * Deletes score(s) from the server.
             * @param {Number} [scoreCategory=255] The category of score to delete.  If this is not set, all scores are deleted.
             * @param {String} [uniqueID="0"] If this value is not set, the score(s) are deleted using the user's primary ID.
             * @returns {uint32} Result code.
             * @since 1.4
             * @see nwf.events.RankingClientEvent.DELETE_SCORE_SUCCESS
             * @see nwf.events.RankingClientEvent.DELETE_SCORE_FAILED
             * @async
             */
            RankingClient.prototype.deleteScore = function (scoreCategory, uniqueID) {
                return 0;
            };
            /**
             * Deletes common data associated with the user from the server.
             * @param {String} [uniqueID="0"] If this value is not set, the common data is deleted using the user's primary ID.
             * @returns {uint32} Result code.
             * @since 1.4
             * @see nwf.events.RankingClientEvent.DELETE_COMMON_DATA_SUCCESS
             * @see nwf.events.RankingClientEvent.DELETE_COMMON_DATA_FAILED
             * @async
             */
            RankingClient.prototype.deleteCommonData = function (uniqueID) {
                return 0;
            };
            /**
             * Downloads common data associated with the user from the server.
             * @param {String} [uniqueID="0"] If this value is not set, the common data is downloaded using the user's primary ID.
             * @returns {uint32} Result code.
             * @since 1.4
             * @see nwf.events.RankingClientEvent.DOWNLOAD_COMMON_DATA_SUCCESS
             * @see nwf.events.RankingClientEvent.DOWNLOAD_COMMON_DATA_FAILED
             * @async
             */
            RankingClient.prototype.downloadCommonData = function (uniqueID) {
                return 0;
            };
            /**
             * Uploads a 255 byte Blob of common data associated with the user from the server.
             * @param {Blob} commonData The common data to upload.
             * @param {String} [uniqueID="0"] If this value is not set, the common data is uploaded using the user's primary ID.
             * @returns {uint32} Result code.
             * @since 1.4
             * @see nwf.events.RankingClientEvent.UPLOAD_COMMON_DATA_SUCCESS
             * @see nwf.events.RankingClientEvent.UPLOAD_COMMON_DATA_FAILED
             * @async
             */
            RankingClient.prototype.uploadCommonData = function (commonData, uniqueID) {
                return 0;
            };
            /**
             * Downloads ranking data associated with the user from the server.
             * @param {nwf.nex.RankingSearchParam} searchParam The search value to use.
             * @returns {uint32} Result code.
             * @since 1.4
             * @see nwf.events.RankingClientEvent.DOWNLOAD_RANKING_LIST_SUCCESS
             * @see nwf.events.RankingClientEvent.DOWNLOAD_RANKING_LIST_FAILED
             * @async
             */
            RankingClient.prototype.downloadRankingList = function (searchParam) {
                return 0;
            };
            /**
             * Creates and binds the Ranking Client interface to the NEX Game Server. This must be called before other `RankingClient` methods. Must be logged into the Game Server before this will succeed.
             * @returns {Boolean} Returns `true` if the bind succeeded, or `false` otherwise.
             * @see nwf.nex.GameServer.login
             * @since 1.4
             */
            RankingClient.prototype.bind = function () {
                return true;
            };
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Accesses an instance of the `RankingClient` singleton.
             *
             * @method getInstance
             * @returns {nwf.nex.RankingClient} The `RankingClient` singleton instance.
             * @since 1.4
             * @static
             */
            RankingClient.getInstance = function () {
                if (!this.s_instance) {
                    this.s_instance = new RankingClient();
                }
                return this.s_instance;
            };
            /**
             * Method to test for class availability.
             *
             * @method isSupported
             * @returns {Boolean} Returns `false` if the class is not supported, or `true` if the class is available.
             * @static
             * @since 1.4
             */
            RankingClient.isSupported = function () {
                return false;
            };
            return RankingClient;
        })(nwf.events.EventDispatcher);
        nex.RankingClient = RankingClient;
    })(nex = nwf.nex || (nwf.nex = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.system
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var system;
    (function (system) {
        /**
        * Method to test whether Nintendo Web Framework is currently running on a Wii U.
        * @returns {Boolean} Returns `false` if the current system is not a Wii U, or `true` if the current system is a Wii U.
        * @since 1.0
        */
        function isWiiU() {
            return false;
        }
        system.isWiiU = isWiiU;
        /**
         * Method to test whether Nintendo Web Framework is currently running on a PC.
         * @returns {Boolean} Returns `false` if the current system is not a PC, or `true` if the current system is a PC.
         * @since 1.0
         * @removed
         */
        function isPC() {
            return false;
        }
        system.isPC = isPC;
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.system
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var system;
    (function (system) {
        /**
         * WebKit Statistics - A class exposing the state of WebKit during execution.
         *
         * @class nwf.system.Stats
         * @removed 1.8.2 The `Stats` class has been removed. The `#getMemoryAllocSizes` and `#getMemoryStats` methods have been moved to the `nwf.system.Memory` class.
         * @author Ryan Lynd
         * @author Shawn Gates
         */
        var Stats = (function () {
            function Stats() {
            }
            Object.defineProperty(Stats.prototype, "paintCount", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC CONSTANTS
                //-------------------------------------------------------------------------
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The current number of paints since the page loaded successfully.
                 * @property {uint32} [paintCount=0]
                 * @since 1.0
                 * @static @readonly
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Stats.prototype, "imageCount", {
                /**
                 * The current number of images in use.
                 * @property {uint32} [imageCount=0]
                 * @since 1.0
                 * @static @readonly
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Stats.prototype, "fontCacheCount", {
                /**
                 * The current number of font caches that are allocated.
                 * Every style (bold, italic, etc.) and size (10px, 11px, etc.) used with each font will increment this value. Using `HTML` elements that change the font size can increment this as well. For example, a `<p>` tag and a `<h1>` tag will each count separately for this property.
                 * @property {uint32} [fontCacheCount=0]
                 * @since 1.0
                 * @static @readonly
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Stats.prototype, "transparencyLayerCount", {
                /**
                 * The current number of transparency layers in use.
                 * @property {uint32} [transparencyLayerCount=0]
                 * @since 1.0
                 * @static @readonly
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Stats.prototype, "imageBufferCount", {
                /**
                 * The current number of image buffers in use.
                 * @property {uint32} [imageBufferCount=0]
                 * @since 1.0
                 * @static @readonly
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Clears the current statistics and resets them all to zero.
             * @since 1.0
             * @static
             */
            Stats.prototype.reset = function () {
            };
            /**
             * Prints out all the current statistic values to the console.
             * @since 1.0
             * @static
             */
            Stats.prototype.print = function () {
            };
            /**
              * Returns an object detailing the current state of memory.
              * @param {Boolean} [printStats=false] If set to `true`, the memory stats are also printed to the console. If set to `false`, they are not printed to the console.
              * @return {Object} A `MemoryStats` object that stores all of the memory stats at the time of the function call.
              * @return {Number} return.totalMainMemory The total memory of the application.
              * @return {Number} return.freeMainMemory The free memory of the application.
              * @return {Number} return.usedMainMemory The used memory of the application.
              * @return {Number} return.totalGraphicsMemory The total memory allocated to the Graphics heap.
              * @return {Number} return.freeGraphicsMemory The memory currently unused by the Graphics heap.
              * @return {Number} return.jscCodeTotalMemory The total memory allocated to the JavaScriptCore code executor.
              *                                            This is specified by **Max JIT Memory** in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html). This will be 0 if JIT is disabled.
              * @return {Number} return.jscCodeFreeMemory The memory currently unused by the JavaScriptCore code executor. This will be 0 if JIT is disabled.
              * @return {Number} return.jscDefaultTotalMemory The total memory allocated to the JavaScriptCore heap. This will be set to a default value unless a value is set in the javascript-object field of the Advanced page in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html).
              * @return {Number} return.jscDefaultFreeMemory The memory currently unused by the JavaScriptCore heap.
              * @return {Number} return.jscRegisterTotalMemory The total memory allocated to the JavaScriptCore register heap.
              * @return {Number} return.jscRegisterFreeMemory The memory currently unused by the JavaScriptCore register heap.
              * @return {Number} return.wkDefaultTotalMemory The total memory allocated to the WebKit library.
              * @return {Number} return.wkDefaultFreeMemory The memory currently unused by the WebKit library.
              * @return {Number} return.wkCanvasTotalMemory The total size of the optional canvas heap. This will be 0 unless a value is set in the webkit-canvas field of the Advanced page in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html).
              * @return {Number} return.wkCanvasFreeMemory The free size of the optional canvas heap. This will be 0 unless a value is set in the webkit-canvas field of the Advanced page in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html).
              * @return {Number} return.wkImageTotalMemory The total size of the optional image heap. This will be 0 unless a value is set in the webkit-image field of the Advanced page in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html).
              * @return {Number} return.wkImageFreeMemory The total size of the optional image heap. This will be 0 unless a value is set in the webkit-image field of the Advanced page in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html).
              * @return {Number} return.wkDecodeTotalMemory The total size of the image decode heap.
              * @return {Number} return.wkDecodeFreeMemory The total size of the image decode heap.
              * @return {Number} return.rplCodeTotalMemory The total memory allocated for Nintendo Web Framework static code.
              *                                            This is automatically calculated and set based on the features enabled in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html).
              * @return {Number} return.rplCodeFreeMemory The memory currently unused by Nintendo Web Framework static code.
              * @return {Number} return.extDataStoreTotalMemory The total size of the optional NEX Data Store heap. This will be 0 unless a value is set in the ext-datastore field of the Advanced page in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html).
              * @return {Number} return.extDataStoreFreeMemory The free size of the optional NEX Data Store heap. This will be 0 unless a value is set in the ext-datastore field of the Advanced page in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html).
              * @return {Number} return.extMiiverseTotalMemory The total size of the optional Miiverse heap. This will be 0 unless a value is set in the ext-miiverse field of the Advanced page in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html).
              * @return {Number} return.extMiiverseFreeMemory The free size of the optional Miiverse heap. This will be 0 unless a value is set in the ext-miiverse field of the Advanced page in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html).
              * @since 1.3
              * @static
              */
            Stats.prototype.getMemoryStats = function (printStats) {
                return {};
            };
            /**
              * Returns an object detailing the maximum memory allocation sizes currently possible for each heap.
              * __Note:__ _This operation takes a long time to complete. It should likely be used for debugging purposes only._
              * @param {Boolean} [printStats=false] If set to `true`, the maximum memory allocation sizes are also printed to the console. If set to `false`, they are not printed to the console.
              * @return {Object} An object that stores all of the memory allocation stats at the time of the function call.
              * @return {Number} return.graphicsMaxAllocSize The maximum size for any memory allocation currently possible in the graphics renderer heap.
              * @return {Number} return.jscDefaultMaxAllocSize The maximum size for any memory allocation currently possible in the JSC Default heap.
              * @return {Number} return.jscRegisterMaxAllocSize The maximum size for any memory allocation currently possible in the JSC Register heap.
              * @return {Number} return.wkDefaultMaxAllocSize The maximum size for any memory allocation currently possible in the WebKit Default heap.
              * @return {Number} return.wkCanvasMaxAllocSize The maximum size for any memory allocation currently possible in the optional canvas heap (if it exists).
              * @return {Number} return.wkImageMaxAllocSize The maximum size for any memory allocation currently possible in the optional image heap (if it exists).
              * @return {Number} return.wkDecodeMaxAllocSize The maximum size for any memory allocation currently possible in the image decode heap.
              * @since 1.4
              * @static
              */
            Stats.prototype.getMemoryAllocSizes = function () {
                return {};
            };
            return Stats;
        })();
        system.Stats = Stats;
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.system
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var system;
    (function (system) {
        /**
         * Nintendo Web Framework Performance metrics class.
         *
         * @class nwf.system.Performance
         * @author Ryan Lynd
         * @author Shawn Gates
         */
        var Performance = (function () {
            function Performance() {
            }
            Object.defineProperty(Performance.prototype, "MAX_FPS", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC CONSTANTS
                //-------------------------------------------------------------------------
                /**
                 * The maximum FPS achievable based on the v-sync.
                 * @property {Number} [MAX_FPS=60]
                 * @since 1.0
                 * @static @constant
                 */
                get: function () {
                    return 60;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Performance.prototype, "averageRenderTime", {
                //public static MAX_FPS: number =          60;
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Average time it takes to render all pages (in milliseconds). Includes all displays. Excludes the cursor and external libraries that render on a separate core.
                 *
                 * __Note:__ Before accessing this property the `#enable` method must be called to begin calculating performance data.
                 * @property {Number} [averageRenderTime=16]
                 * @since 1.0
                 * @static @readonly
                 */
                get: function () {
                    return 16;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Performance.prototype, "currentRenderTime", {
                /**
                 * How much time has passed since the start of the render frame (in milliseconds). If all pages are static the value will be 0 (ms). This property can be used in conjunction with custom JavaScript timers to help determine whether the application is GPU or CPU bound.
                 *
                 * __Note:__ Before accessing this property the `#enable` method must be called to begin calculating performance data.
                 * @property {Number} [currentRenderTime=16]
                 * @since 1.0
                 * @static @readonly
                 */
                get: function () {
                    return 16;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Performance.prototype, "elapsedTime", {
                /**
                 * The number of milliseconds (with microsecond precision) since the runtime was initialized.
                 * @property {Number} [elapsedTime=0.0]
                 * @since 1.2
                 * @static @readonly
                 */
                get: function () {
                    return 0.0;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Enables performance calculations. Must be called once when the application starts to enable the performance library for the `#averageRenderTime` and `#currentRenderTime` properties to return values.
             * @since 1.0
             * @static
             */
            Performance.prototype.enable = function () {
            };
            /**
             * Stop calculating performance data.
             * @since 1.0
             * @static
             */
            Performance.prototype.disable = function () {
            };
            return Performance;
        })();
        system.Performance = Performance;
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.system
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var system;
    (function (system) {
        /**
         * Nintendo Web Framework memory control and metrics class. See the [Memory Guide](../../Manual/nwf/devguide/pm_memory.html) for detailed information and memory use best practices.
         *
         * @class nwf.system.Memory
         * @author Ryan Lynd
         * @author Shawn Gates
         */
        var Memory = (function () {
            function Memory() {
            }
            //-----------------------------
            // Garbage collection
            //-----------------------------
            /**
             * This will schedule garbage collection for the near future, when the heap is available for access.
             * @param {Number} [level = 0] Varies the level of Garbage Collection that will be performed. Valid values are 0, 1, or 2 as outlined below:
             *
             * - 0 Full Garbage Collection. This is the default garbage collection that takes the longest, but may return the most memory.
             * - 1 Mid-level Garbage Collection. A faster garbage collection that will likely return less memory, but takes less time to complete.
             * - 2 Light Garbage Collection. A light garbage collection that can complete quickly.
             *
             * @param {Boolean} [prune = true] Specifies whether or not to perform a prune on the object cache at the same time as collecting garbage.
             * @see nwf.system.Memory.setObjectCacheCapacities
             * @since 1.0
             * @static
             */
            Memory.prototype.requestGC = function (level, prune) {
            };
            /**
             * This will attempt to collect garbage immediately. However, it will fail if the heap is not available.
             * Using `nwf.system.Memory.requestGC()` rather than `nwf.system.Memory.forceGC()` is recommended.
             * @param {Number} [level = 0] Varies the level of Garbage Collection that will be performed. Valid values are 0, 1, or 2 as outlined below:
             *
             * - 0 Full Garbage Collection. This is the default garbage collection that takes the longest, but may return the most memory.
             * - 1 Mid-level Garbage Collection. A faster garbage collection that will likely return less memory, but takes less time to complete.
             * - 2 Light Garbage Collection. A light garbage collection that can complete quickly.
             *
             * @param {Boolean} [prune = true] Specifies whether or not to perform a prune on the object cache at the same time as collecting garbage.
             * @see nwf.system.Memory.setObjectCacheCapacities
             * @returns {Boolean} Returns `false` if the heap is not available to be collected, or `true` if the garbage collection is successful.
             * @since 1.0
             * @static
             */
            Memory.prototype.forceGC = function (level, prune) {
                return false;
            };
            //-----------------------------
            // Cache Control
            //-----------------------------
            /**
             * Clears the webkit memory caches, such as the page cache, fonts, and other object resources cache.
             * @since 1.0
             * @static
             */
            Memory.prototype.clearCaches = function () {
            };
            /**
             * Sets the maximum number of pages that can be stored in the page cache.
             * @param {uint8} maxPages The maximum number of pages that can be stored in the page cache.
             * @since 1.0
             * @static
             */
            Memory.prototype.setMaxPagesInCache = function (maxPages) {
            };
            /**
             * Returns the maximum number of pages that can be stored in the page cache.
             * @returns {uint8} The maximum number of pages that can be stored in the page cache.
             * @since 1.0
             * @static
             */
            Memory.prototype.getMaxPagesInCache = function () {
                return 5;
            };
            /**
             * Sets the memory capacities for the object cache, in bytes.
             *
             * Settings persist across pages and this function does not need to be called multiple times.
             *
             * The object cache is a resource management system to help alleviate reallocation and fragmentation caused by objects that are likely to frequently go into and out of scope (e.g. images).
             * Any object not in the object cache that goes out of scope or has not been used in a certain amount of time† will be freed immediately.
             * However, newly allocated objects will be added to the object cache if possible.
             * When objects are first added to the object cache, they are marked as "live."
             *
             * If a "live" object is unused for a certain amount of time† or goes out of scope, it is not freed immediately; instead it is retained in memory but marked as "dead" in the object cache.
             * Then if the "dead" object is loaded again, it can be marked as "live" and accessed again without reallocating memory or reloading the resource.
             * The benefit is that reanimating a "dead" object will be faster than reallocating a completely freed object and avoid possible fragmentation.
             *
             * The `maxDeadBytes` parameter puts an upper bound on the amount of "dead" data that will be maintained in the cache.
             * However, the limit is not enforced continuously, and the total amount of "dead" data could be more than `maxDeadBytes` until the cached is pruned.
             * Pruning occurs in the following three situations:
             *
             * 1. When `setObjectCacheCapacities` is called.
             * 2. When `requestGC` or `forceGC` is called with the `prune` parameter.
             * 3. When any resource in the cache is garbage collected.
             *
             * The object cache also effects the timing at which decompressed image data is deleted.
             * Even if references to an image are still maintained, the decompressed data for images that have not been displayed in a certain amount of time† might be deleted to free memory‡.
             * If an image is displayed again after its decompressed data has been deleted, it will have to be decompressed again causing a delay.
             * However, the compressed (source) data for images that are maintained in the object cache will not be deleted as long as references to the image are maintained.
             *
             * † This amount of time is calculated dynamically based on many factors and cannot be determined or specified accurately.
             *
             * ‡ Deletion of uncompressed image data will only occur when new resources (images, JavaScript, etc.) are allocated, when `setObjectCacheCapacities` is called or when `#requestGC` or `#forceGC` are called.
             *   To explicitly prune decompressed image data, call `setObjectCacheCapacities` again with the same parameters.
             *
             * Example usage:
             *
             *     // Maintain a 36MB object cache with a static 4MB for "dead" objects and the remaining 32MB for "live" objects
             *     nwf.system.Memory.setObjectCacheCapacities(4*1024*1024, 4*1024*1024, 36*1024*1024);
             *
             * @param {uint32} minDeadBytes=0 The minimum amount of data in bytes that will always be reserved for "dead" cached objects.
             * @param {uint32} maxDeadBytes=0 The maximum amount of data in bytes that "dead" cached objects are allowed to consume.
             * @param {uint32} totalCapacity=0 The maximum amount of data in bytes that the cache will maintain.
             * @since 1.0
             * @static
             */
            Memory.prototype.setObjectCacheCapacities = function (minDeadBytes, maxDeadBytes, totalCapacity) {
                return null;
            };
            /**
             * Returns an object detailing the current state of memory and optionally prints the status to the console.
             *
             * __Note:__ _From NWF 1.8.3 the structure of the return object has changed._
             *
             * <sup>†</sup> _The amount of total memory available to your application is determined and set based on the features enabled in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html#Project_Settings-Features)._
             *
             * @param {Boolean} [printStats=false] If set to `true`, the memory stats are also printed to the console. If set to `false`, they are not printed to the console.
             * @return {Object} A `MemoryStats` object that stores all of the memory stats (in bytes) at the time of the function call.
             * @return {Number} return.totalMemory The total memory available to the application. <sup>†</sup>
             * @return {Number} return.freeMemory The total free memory of the application.
             * @return {Number} return.usedMemory The total used memory of the application.
             * @return {Number} return.totalGraphicsMemory The total memory allocated to the Graphics heap.
             * @return {Number} return.freeGraphicsMemory The memory currently unused by the Graphics heap.
             * @return {Number} return.jscCodeTotalMemory The total memory allocated to the JavaScriptCore code executor.
             *                                            This is specified by **Max JIT Memory** in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html#Project_Settings-Advanced). This will be 0 if JIT is disabled.
             * @return {Number} return.jscCodeFreeMemory The memory currently unused by the JavaScriptCore code executor. This will be 0 if JIT is disabled.
             * @return {Number} return.jscDefaultTotalMemory The total memory allocated to the JavaScriptCore heap. This will be set to a default value unless a value is set in the javascript-object field of the Advanced page in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html#Project_Settings-Advanced).
             * @return {Number} return.jscDefaultFreeMemory The memory currently unused by the JavaScriptCore heap.
             * @return {Number} return.jscRegisterTotalMemory The total memory allocated to the JavaScriptCore register heap.
             * @return {Number} return.jscRegisterFreeMemory The memory currently unused by the JavaScriptCore register heap.
             * @return {Number} return.wkDefaultTotalMemory The total memory allocated to the WebKit library. This a general-purpose heap for allocations. Both WebKit and NWF extensions make allocations from this heap.
             * @return {Number} return.wkDefaultFreeMemory The memory currently unused by the WebKit Default Heap.
             * @return {Number} return.wkCanvasTotalMemory The total size of the optional canvas heap. This will be set to a default value unless a value is set in the webkit-canvas field of the Advanced page in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html#Project_Settings-Advanced).
             * @return {Number} return.wkCanvasFreeMemory The free size of the optional canvas heap.
             * @return {Number} return.wkImageTotalMemory The total size of the optional image heap. This will be set to a default value unless a value is set in the webkit-image field of the Advanced page in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html#Project_Settings-Advanced).
             * @return {Number} return.wkImageFreeMemory The total size of the optional image heap.
             * @return {Number} return.extDataStoreTotalMemory The total size of the optional NEX Data Store heap. This will be 0 unless a value is set in the ext-datastore field of the Advanced page in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html#Project_Settings-Advanced).
             * @return {Number} return.extDataStoreFreeMemory The free size of the optional NEX Data Store heap.
             * @return {Number} return.extMiiverseTotalMemory The total size of the optional Miiverse heap. This will be 0 unless a value is set in the ext-miiverse field of the Advanced page in [Project Settings](../../Manual/nwf/devguide/tool_ref_dashboard.html#Project_Settings-Advanced).
             * @return {Number} return.extMiiverseFreeMemory The free size of the optional Miiverse heap.
             * @return {Number} return.nwfSystemTotalMemory The total memory allocated for Nintendo Web Framework. Includes static code and dynamic heaps for internal systems. <sup>†</sup>
             * @return {Number} return.nwfSystemFreeMemory The memory currently unused by Nintendo Web Framework internal systems.
             * @since 1.8.3
             * @static
             */
            Memory.prototype.getMemoryStats = function (printStats) {
                return {};
            };
            /**
             * Returns an object detailing the maximum memory allocation sizes currently possible for each heap.
             *
             * __Note:__ _This operation takes a long time to complete. It should likely be used for debugging purposes only._
             * __Note:__ _From NWF 1.8.3 the structure of the return object has changed._
             *
             * @param {Boolean} [printStats=false] If set to `true`, the maximum memory allocation sizes are also printed to the console. If set to `false`, they are not printed to the console.
             * @return {Object} An object that stores all of the memory allocation stats at the time of the function call.
             * @return {Number} return.graphicsMaxAllocSize The maximum size for any memory allocation currently possible in the graphics renderer heap.
             * @return {Number} return.jscRegisterMaxAllocSize The maximum size for any memory allocation currently possible in the JSC Register heap.
             * @return {Number} return.wkDefaultMaxAllocSize The maximum size for any memory allocation currently possible in the WebKit Default heap.
             * @return {Number} return.wkCanvasMaxAllocSize The maximum size for any memory allocation currently possible in the optional canvas heap (if it exists).
             * @return {Number} return.wkImageMaxAllocSize The maximum size for any memory allocation currently possible in the optional image heap (if it exists).
             * @since 1.8.3
             * @static
             */
            Memory.prototype.getMemoryAllocSizes = function () {
                return {};
            };
            return Memory;
        })();
        system.Memory = Memory;
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.system
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var system;
    (function (system) {
        /**
         * Class for the Wii U Auto Power-Down (APD) functionality.
         *
         * The Wii U console can automatically power down when there is no user input.
         * Users are able to turn APD on or off in the settings menu. Also, users can change the time when APD occurs. By default, APD is enabled and the time is set to 1 hour (60 minutes).
         *
         * @class nwf.system.APD
         * @author Ryan Lynd
         * @author Shawn Gates
         */
        var APD = (function () {
            function APD() {
            }
            Object.defineProperty(APD.prototype, "isEnabled", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Returns `true` if the Wii U console's built in Auto Power-Down (APD) feature is enabled, or `false` if it is disabled.
                 *
                 * __Note:__ _If the user has disabled APD in the Wii U settings, this property will always return `false`._
                 * @property {Boolean} [isEnabled=false]
                 * @readonly
                 * @since 1.0
                 * @static
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(APD.prototype, "timePeriod", {
                /**
                 * Gets the user set default time period for APD to occur in seconds.
                 * @property {uint32} [timePeriod=3600]
                 * @readonly
                 * @since 1.0
                 * @static
                 */
                get: function () {
                    return 3600;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(APD.prototype, "timeBeforeAPD", {
                /**
                 * Gets the remaining time in seconds before Auto Power-Down (APD) is to occur.
                 * Counter decrements every second when no user input is detected.
                 * Upon user input, the counter is reset to the the value of #timePeriod.
                 * @property {uint32} [timeBeforeAPD=3600]
                 * @readonly
                 * @since 1.0
                 * @static
                 */
                get: function () {
                    return 3600;
                },
                enumerable: true,
                configurable: true
            });
            return APD;
        })();
        system.APD = APD;
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.system
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var system;
    (function (system) {
        /**
         * The `Config` class provides access to the current application's project settings during runtime.
         *
         * @class nwf.system.Config
         * @author Nate Long
         * @author Dave White
         * @author Shawn Gates
         */
        var Config = (function () {
            function Config() {
            }
            Object.defineProperty(Config.prototype, "serviceTokenRequired", {
                //-----------------------------
                // STATIC PUBLIC PROPERTIES
                //-----------------------------
                /**
                 * Shows whether the debug option to allow connecting to independent servers without first getting a service token is enabled.
                 * This will be `true` if the **Do not require Service Token** option on the Global page of Project Settings is not checked, or `false` if it is.
                 *
                 * @property {Boolean} serviceTokenRequired=true
                 * @since 1.8.2
                 * @readonly
                 * @static
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Config.prototype, "displayBackgroundColor", {
                /**
                 * A string representation of the background color set for the displays.
                 * This is set with the **Display Background Color** option on the Display page of Project Settings.
                 *
                 * The background color of the display can also be changed with nwf.display.DisplayManager's `{@link nwf.display.DisplayManager#backgroundColor backgroundColor}` property.
                 * The value of `displayBackgroundColor` will always equal what is set in Project Settings regardless of changes made to `{@link nwf.display.DisplayManager#backgroundColor backgroundColor}`.
                 *
                 * @property {String} displayBackgroundColor='#000000'
                 * @since 1.8.2
                 * @readonly
                 * @static
                 */
                get: function () {
                    return '#000000';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Config.prototype, "networkingRequired", {
                /**
                 * A boolean value that specifies whether the application is set to require networking.
                 * This will be `true` if the **Application requires networking** option of the Network tab on the Platform Features page in Project Settings is checked, or `false` if it is not.
                 *
                 * @property {Boolean} networkingRequired=true
                 * @since 1.8.2
                 * @readonly
                 * @static
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Config.prototype, "isServiceApplication", {
                /**
                 * This will be `true` if the **Application Type** option on the Mastering Information page in Project Settings is set to **Service Application**;
                 * this will be `false` if it is set to any other value.
                 *
                 * @property {Boolean} isServiceApplication=true
                 * @since 1.8.2
                 * @readonly
                 * @static
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Config.prototype, "longNameLine1", {
                /**
                 * A string representation of the value entered on the Long Name tab of the Title Information page in Project Settings.
                 * This value represents the first line of the long name; for the second line see `#longNameLine2`.
                 * This will match the language the Wii U System is set to. This can be checked with the `{@link nwf.system.WiiUSystem#languageCode languageCode}` property of nwf.system.WiiUSystem.
                 *
                 * @property {String} longNameLine1=''
                 * @since 1.8.2
                 * @readonly
                 * @static
                 */
                get: function () {
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Config.prototype, "longNameLine2", {
                /**
                 * A string representation of the value entered on the Long Name tab of the Title Information page in Project Settings.
                 * This value represents the second line of the long name; for the first line see `#longNameLine1`.
                 * This will match the language the Wii U System is set to. This can be checked with the `{@link nwf.system.WiiUSystem#languageCode languageCode}` property of nwf.system.WiiUSystem.
                 *
                 * @property {String} longNameLine2=''
                 * @since 1.8.2
                 * @readonly
                 * @static
                 */
                get: function () {
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Config.prototype, "shortName", {
                /**
                 * A string representation of the value entered on the Short Name tab of the Title Information page in Project Settings.
                 * This will match the language the Wii U System is set to. This can be checked with the `{@link nwf.system.WiiUSystem#languageCode languageCode}` property of nwf.system.WiiUSystem.
                 *
                 * @property {String} shortName=''
                 * @since 1.8.2
                 * @readonly
                 * @static
                 */
                get: function () {
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Config.prototype, "publisher", {
                /**
                 * A string representation of the value entered on the Publisher tab of the Title Information page in Project Settings.
                 * This will match the language the Wii U System is set to. This can be checked with the `{@link nwf.system.WiiUSystem#languageCode languageCode}` property of nwf.system.WiiUSystem.
                 *
                 * @property {String} publisher=''
                 * @since 1.8.2
                 * @readonly
                 * @static
                 */
                get: function () {
                    return '';
                },
                enumerable: true,
                configurable: true
            });
            return Config;
        })();
        system.Config = Config;
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var system;
    (function (system) {
        /**
         * The Error Manager is provided as an optional library to aid implementation and guideline compliance for basic error handling.
         * The library is designed to be simple to use, but powerful enough to handle larger, more complicated applications that need specialized control over errors.
         *
         * Usage
         * ---
         *
         * This library can be used in its default state by including the library in the main HTML file as follows:
         *
         *     <script src="path/to/SupportLibraries.min.js"></script>
         *     <script>
         *         nwf.system.ErrorManager.initialize();
         *     </script>
         *
         * It is also possible to add event listeners to handle specific errors while allowing the Error Manager to handle the rest:
         *
         *      nwf.system.ErrorManager.addEventListener(
         *          nwf.events.SystemErrorEvent.ERROR,
         *          function(err) {
         *              if(err.errorCode === 1234567) {
         *                  // handle the error
         *                  return false;
         *              }
         *          }
         *      );
         *
         * Any listeners added to the Error Manager will be called before the Error Manager uses its default handling mechanism (usually displaying the error dialog).
         * If a listener returns `false`, the Error Manager will not attempt to handle the error itself, assuming that a listener has handled it already.
         * Event listeners can be added at any point during a run of an application--the Error Manager will begin to fire the attached listener for each error as soon as the listener is added.
         *
         * @author Nate Long
         * @author Shawn Gates
         * @class nwf.system.ErrorManager
         * @lib SupportLibraries.js
         */
        var ErrorManager = (function () {
            function ErrorManager() {
            }
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Begin listening for errors and firing listeners
             *
             * @method initialize
             * @static
             * @since 1.8.3
             */
            ErrorManager.initialize = function () {
            };
            /**
             * Registers an event listener handler so that the listener can be notified when events are dispatched. Subsequent calls to `addEventListener` with a different listener and/or scope will result in the separate registration of the listener.
             *
             * To prevent possible memory leaks, when you no longer need an event listener, remove it by calling `#removeEventListener` or `#removeAllEventListeners`. This is especially true when switching contexts by changing pages.
             *
             * _If multiple identical `EventListeners` are registered on the same `EventTarget` with the same parameters, the duplicate instances are discarded._
             *
             * @param {String} type The event type for which the user is registering.
             * @param {Function} listener  The listener function that processes the event. This function must accept an `Event` object as its only parameter.
             * @param {Object} [scope=null]  The scope on which to apply the listener call. This will effect the value of `this` within the listener function block. By default the scope will be set to the window or "root" scope of the dispatcher object.
             * @static
             * @since 1.8.3
             */
            ErrorManager.prototype.addEventListener = function (type, listener, scope) {
            };
            /**
             * Allows the removal of event listeners from the event target.
             *
             * _The `listener` function and `scope` must match that which was used to register the event._
             *
             * @see {@link #removeAllEventListeners}
             * @param {String} type Specifies the event type of the `EventListener` being removed.
             * @param {Function} listener  The listener function to be removed.
             * @param {Object} [scope=null]  The scope object of the `EventListener` being removed. If a listener was registered twice with different scopes, each must be removed separately.
             * @static
             * @since 1.8.3
             */
            ErrorManager.prototype.removeEventListener = function (type, listener, scope) {
            };
            /**
             * Removes **ALL** event listeners from the event target. Always double-check to make sure you really want to remove every event listener.
             * @static
             * @since 1.8.3
             */
            ErrorManager.prototype.removeAllEventListeners = function () {
            };
            /**
             * Checks whether the `EventDispatcher` object has any listeners registered for a specific type of event.
             *
             * __Note:__ This will return `true` by default because the library adds some common error handlers. Calling `#removeAllEventListeners` will cause it to return `false`.
             *
             * @param {String} type The type of event to check.
             * @returns {Boolean} Returns `true` if a listener of the specified type is registered, or `false` otherwise.
             * @static
             * @since 1.8.3
             */
            ErrorManager.prototype.hasEventListener = function (type) {
                return false;
            };
            return ErrorManager;
        })();
        system.ErrorManager = ErrorManager;
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.system
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var system;
    (function (system) {
        /**
         * `EShopPage` constants.
         *
         * @enum nwf.system.EShopPage
         * @author Shawn Gates
         */
        system.EShopPage = {
            /**
             * The front page of the Nintendo eShop.
             * @property {Number}
             * @since 1.8.1
             * @static @constant
             */
            FRONT_PAGE: 0,
            /**
             * The eShop page detailing the current application.
             * @property {Number}
             * @since 1.8.1
             * @static @constant
             */
            TITLE: 1,
            /**
             * The eShop page that lists all of the `{@link nwf.aoc.AOCItem AOCItem}`'s for the specified `{@link nwf.aoc.AOCTitle AOCTitle}`.
             * @property {Number}
             * @since 1.8.1
             * @static @constant
             */
            AOC_LIST: 2,
            /**
             * The eShop page for a specific Add-on Content `{@link nwf.aoc.AOCItem Item}` for the application.
             * @property {Number}
             * @since 1.8.1
             * @static @constant
             */
            SPECIFIC_AOC: 3,
            /**
             * The eShop page for purchasing a subscription or consumable service.
             * @property {Number}
             * @since 1.8.1
             * @static @constant
             */
            SERVICE_TICKET: 4,
            /**
             * The eShop page for redeeming a software download code.
             * @property {Number}
             * @since 1.8.1
             * @static @constant
             */
            REDEEM: 5,
        };
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.system
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var system;
    (function (system) {
        /**
         * EShopSortKey constants.
         *
         * @enum nwf.system.EShopSortKey
         * @author Shawn Gates
         */
        system.EShopSortKey = {
            /**
             * Sort the list of `{@link nwf.aoc.AOCItem AOCItem}`'s from newest to oldest.
             * @property {String}
             * @since 1.8.1
             * @static @constant
             */
            NEW: 'new',
            /**
             * Sort the list of `{@link nwf.aoc.AOCItem AOCItem}`'s by popularity.
             * @property {String}
             * @since 1.8.1
             * @static @constant
             */
            POPULAR: 'popular',
            /**
             * Sort the list of `{@link nwf.aoc.AOCItem AOCItem}`'s by name.
             * @property {String}
             * @since 1.8.1
             * @static @constant
             */
            NAME: 'name',
        };
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/// <reference path="./EShopPage.ts" />
/// <reference path="./EShopSortKey.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var system;
    (function (system) {
        var EShopSwitchParam = (function () {
            /**
             * Class defining the parameters to use when switching to the eShop with `nwf.system.WiiUSystem.switchToEShop`.
             *
             * @class nwf.system.EShopSwitchParam
             * @author Shawn Gates
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new `EShopSwitchParam` object.
             * @method constructor
             * @since 1.8.1
             */
            function EShopSwitchParam() {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The page in the eShop to switch to.
                 *
                 * @property {Number} [startPage=nwf.system.EShopPage.TITLE]
                 * @see nwf.system.EShopPage
                 * @since 1.8.1
                 */
                this.startPage = 0;
                /**
                 * The `UniqueID` of the application or `{@link nwf.aoc.AOCTitle AOCTitle}` to load.
                 * This property and `#dstTitleID` do not both need to be set; if they are both set then the value specified on `#dstUniqueID` will be used.
                 *
                 * The value to use here will be different depending on which `#startPage` is specified.
                 * For `nwf.system.EShopPage.TITLE` or `nwf.system.EShopPage.SERVICE_TICKET` this should correspond to the target applications `UniqueID`, but for `nwf.system.EShopPage.AOC_LIST` and `nwf.system.EShopPage.SPECIFIC_AOC` this should correspond to the `UniqueID` of the `{@link nwf.aoc.AOCTitle AOCTitle}` to load.
                 * If `#startPage` is set to `nwf.system.EShopPage.FRONT_PAGE` or `nwf.system.EShopPage.REDEEM` then this property will be ignored.
                 *
                 * __IMPORTANT:__   By default, it is not possible to jump to a Nintendo eShop page of a different application.
                 * If you want to do this, contact Nintendo developer support and provide the name of your title and the titles that you want to jump to, so that the servers can be configured appropriately.
                 *
                 * @property {String} [dstUniqueID='']
                 * @since 1.8.1
                 */
                this.dstUniqueID = '000000';
                /**
                 * The `titleID` of the application or `{@link nwf.aoc.AOCTitle AOCTitle}` to load.
                 * This property and `#dstUniqueID` do not both need to be set, if they are both set then the value specified on `#dstUniqueID` will be used.
                 *
                 * The value to use here will be different depending on which `#startPage` is specified.
                 * For `nwf.system.EShopPage.TITLE` or `nwf.system.EShopPage.SERVICE_TICKET` this should correspond to the target applications `titleID`, but for `nwf.system.EShopPage.AOC_LIST` and `nwf.system.EShopPage.SPECIFIC_AOC` this should correspond to the `titleID` of the `{@link nwf.aoc.AOCTitle AOCTitle}` to load.
                 * If `#startPage` is set to `nwf.system.EShopPage.FRONT_PAGE` or `nwf.system.EShopPage.REDEEM` then this property will be ignored.
                 *
                 * __IMPORTANT:__   By default, it is not possible to jump to a Nintendo eShop page of a different application.
                 * If you want to do this, contact Nintendo developer support and provide the name of your title and the titles that you want to jump to, so that the servers can be configured appropriately.
                 *
                 * @property {String} [dstTitleID='']
                 * @since 1.8.1
                 */
                this.dstTitleID = '000000';
                /**
                 * The product code of the `{@link nwf.aoc.AOCItem AOCItem}` to the load.
                 * This property is only used when `#startPage` is set to `nwf.system.EShopPage.SPECIFIC_AOC`, for any other value this property will be ignored.
                 * @property {String} [itemCode='']
                 * @since 1.8.1
                 */
                this.itemCode = '000000';
                /**
                 * When displaying a list of `{@link nwf.aoc.AOCItem AOCItem}`'s the results will be filtered by the `searchWord`.
                 * This property is only used when `#startPage` is set to `nwf.system.EShopPage.AOC_LIST`, for any other value this property will be ignored.
                 * If this is left blank then all of the `{@link nwf.aoc.AOCItem AOCItem}`'s for the specified `{@link nwf.aoc.AOCTitle AOCTitle}` will be listed.
                 * Must be a URL-encoded `UTF-8` string that is no more than 50 characters when decoded.
                 * @property {String} [searchWord='']
                 * @since 1.8.1
                 */
                this.searchWord = '000000';
                /**
                 * When displaying a list of `{@link nwf.aoc.AOCItem AOCItem}`'s the results will be sorted according to the specified `sortKey`.
                 * This property is only used when `#startPage` is set to `nwf.system.EShopPage.AOC_LIST`, for any other value this property will be ignored.
                 * @property {String} [sortKey=nwf.system.EShopSortKey.NEW]
                 * @see nwf.system.EShopSortKey
                 * @since 1.8.1
                 */
                this.sortKey = nwf.system.EShopSortKey.NEW;
                /**
                 * The `titleID` of the current application.
                 * This value must be set for the application jump to the Nintendo eShop to be successful.
                 *
                 * @property {String} [srcTitleID='']
                 * @since 1.8.1
                 */
                this.srcTitleID = '000000';
                /**
                 * The download code to pass to the redeem page of the eShop.
                 * This property is only used when `#startPage` is set to `nwf.system.EShopPage.REDEEM`, for any other value this property will be ignored.
                 * If this is left empty then the user will be prompted to enter the code on the page.
                 * @property {String} [downloadCode='']
                 * @since 1.8.1
                 */
                this.downloadCode = '';
            }
            return EShopSwitchParam;
        })();
        system.EShopSwitchParam = EShopSwitchParam;
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.system
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var system;
    (function (system) {
        /**
         * WiiUSettingsScreen constants.
         *
         * @enum nwf.system.WiiUSettingsScreen
         * @author Ryan Lynd
         */
        system.WiiUSettingsScreen = {
            /**
             * Main settings screen.
             * @type int
             * @since 1.0
             * @static @constant
             */
            MAIN_SETTINGS_SCREEN: 0,
            /**
             * Internet settings screen.
             * @type int
             * @since 1.0
             * @static @constant
             */
            INTERNET_SETTINGS_SCREEN: 1,
            /**
             * Data management.
             * @type int
             * @since 1.0
             * @static @constant
             */
            DATA_MANAGEMENT_SCREEN: 2,
            /**
             * TV Remote settings.
             * @type int
             * @since 1.0
             * @static @constant
             */
            TV_REMOTE_SCREEN: 3,
            /**
             * Date/Time settings.
             * @type int
             * @since 1.0
             * @static @constant
             */
            DATE_TIME_SCREEN: 4,
            /**
             * Region settings.
             * @type int
             * @since 1.0
             * @static @constant
             */
            REGION_SCREEN: 5,
            /**
             * System update.
             * @type int
             * @since 1.0
             * @static @constant
             */
            SYSTEM_UPDATE_SCREEN: 6
        };
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.system
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var system;
    (function (system) {
        /**
         * WiiULanguageCode constants.
         *
         * @enum nwf.system.WiiULanguageCode
         * @author Ryan Lynd
         */
        system.WiiULanguageCode = {
            /**
             * Chinese.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            CHINESE: 6,
            /**
             * Dutch.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            DUTCH: 8,
            /**
             * English.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            ENGLISH: 1,
            /**
             * French.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            FRENCH: 2,
            /**
             * German.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            GERMAN: 3,
            /**
             * Invalid.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            INVALID: 255,
            /**
             * Japanese.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            JAPAN: 0,
            /**
             * Korean.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            KOREAN: 7,
            /**
            * Portuguese.
            * @property {uint32}
            * @since 1.0
            * @static @constant
            */
            PORTUGUESE: 9,
            /**
            * Russian.
            * @property {uint32}
            * @since 1.0
            * @static @constant
            */
            RUSSIAN: 10,
            /**
            * Spanish.
            * @property {uint32}
            * @since 1.0
            * @static @constant
            */
            SPANISH: 5,
            /**
            * Taiwanese.
            * @property {uint32}
            * @since 1.0
            * @static @constant
            */
            TAIWANESE: 11,
            /**
            * All Languages.
            *
            * __Note:__ _This is only used as a parameter and should not be returned by nwf.system.WiiUSystem.languageCode._
            * @property {uint32}
            * @since 1.7
            * @static @constant
            */
            ALL: 254,
            /**
             * The current language of the Wii U Console.
             *
             * __Note:__ _This is only used as a parameter and should not be returned by nwf.system.WiiUSystem.languageCode._
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            SYSTEM: 200,
        };
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.system
     * @author Ryan Lynd
     */
    var system;
    (function (system) {
        /**
         * WiiURegionCode constants.
         *
         * @enum nwf.system.WiiURegionCode
         * @author Ryan Lynd
         */
        system.WiiURegionCode = {
            /**
             * All.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            ALL: 255,
            /**
             * China.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            CHN: 16,
            /**
             * Europe/Australia (+ South Africa).
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            EUR: 4,
            /**
             * Inavlid.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            INVALID: 0,
            /**
             * Japan.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            JPN: 1,
            /**
             * Korea.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            KOR: 32,
            /**
             * Taiwan.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            TWN: 64,
            /**
             * North/South America.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            USA: 2,
        };
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.system
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var system;
    (function (system) {
        /**
         * WiiUCountryCode constants.
         *
         * @enum nwf.system.WiiUCountryCode
         * @author Ryan Lynd
         */
        system.WiiUCountryCode = {
            /**
              * Japan.
              * @property {uint32}
              * @since 1.0
              * @static @constant
              */
            JAPAN: 0x00000001,
            /**
             * Anguilla.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            ANGUILLA: 0x00000008,
            /**
             * Antigua and Barbuda.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            ANTIGUA_AND_BARBUDA: 0x00000009,
            /**
             * Argentine Republic.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            ARGENTINE_REPUBLIC: 0x0000000a,
            /**
             * Aruba.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            ARUBA: 0x0000000b,
            /**
             * Commonwealth of the Bahamas.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            COMMONWEALTH_OF_THE_BAHAMAS: 0x0000000c,
            /**
             * Barbados.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            BARBADOS: 0x0000000d,
            /**
             * Belize.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            BELIZE: 0x0000000e,
            /**
             * Republic of Boliva.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_BOLIVIA: 0x0000000f,
            /**
             * Federative Republic of Brazil.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            FEDERATIVE_REPUBLIC_OF_BRAZIL: 0x00000010,
            /**
             * British Virgin Islands.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            BRITISH_VIRGIN_ISLANDS: 0x00000011,
            /**
             * Canada.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            CANADA: 0x00000012,
            /**
             * Cayman Islands.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            CAYMAN_ISLANDS: 0x00000013,
            /**
             * Republic of Chile.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_CHILE: 0x00000014,
            /**
             * Republic of Colombia.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_COLOMBIA: 0x00000015,
            /**
             * Republic of Costa Rica.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_COSTA_RICA: 0x00000016,
            /**
             * Commonwealth of Dominica.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            COMMONWEALTH_OF_DOMINICA: 0x00000017,
            /**
             * Dominican Republic.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            DOMINICAN_REPUBLIC: 0x00000018,
            /**
             * Republic of Ecuador.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_ECUADOR: 0x00000019,
            /**
             * Republic of El Salvador.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_EL_SALVADOR: 0x0000001a,
            /**
             * Guiana.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            GUIANA: 0x0000001b,
            /**
             * Grenada.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            GRENADA: 0x0000001c,
            /**
             * Guadeloupe.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            GUADELOUPE: 0x0000001d,
            /**
             * Republic of Guatemala.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_GUATEMALA: 0x0000001e,
            /**
             * Co-Operative Republic of Guyana.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            CO_OPERATIVE_REPUBLIC_OF_GUYANA: 0x0000001f,
            /**
             * Republic of Haiti.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_HAITI: 0x00000020,
            /**
             * Republic of Honduras.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_HONDURAS: 0x00000021,
            /**
             * Jamaica.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            JAMAICA: 0x00000022,
            /**
             * Martinique.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            MARTINIQUE: 0x00000023,
            /**
             * United Mexican States.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            UNITED_MEXICAN_STATES: 0x00000024,
            /**
             * Montserrat.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            MONTSERRAT: 0x00000025,
            /**
             * Nederlandse Antillen.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            NEDERLANDSE_ANTILLEN: 0x00000026,
            /**
             * Republic of Nicaragua.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_NICARAGUA: 0x00000027,
            /**
             * Republic of Panama.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_PANAMA: 0x00000028,
            /**
             * Republic of Paraguay.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_PARAGUAY: 0x00000029,
            /**
             * Republic of Peru.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_PERU: 0x0000002a,
            /**
             * Saint Christopher and Nevis.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            SAINT_CHRISTOPHER_AND_NEVIS: 0x0000002b,
            /**
             * Saint Lucia.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            SAINT_LUCIA: 0x0000002c,
            /**
             * Saint Vincent and the Grenadines.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            SAINT_VINCENT_AND_THE_GRENADINES: 0x0000002d,
            /**
             * Republic of Suriname.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_SURINAME: 0x0000002e,
            /**
             * Republic of Trinidad and Tobago.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_TRINIDAD_AND_TOBAGO: 0x0000002f,
            /**
             * Turks and Caicos Islands.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            TURKS_AND_CAICOS_ISLANDS: 0x00000030,
            /**
             * United States of America.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            UNITED_STATES_OF_AMERICA: 0x00000031,
            /**
             * Oriental Republic of Uraguay.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            ORIENTAL_REPUBLIC_OF_URUGUAY: 0x00000032,
            /**
             * Virgin Islands of the United States.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            VIRGIN_ISLANDS_OF_THE_UNITED_STATES: 0x00000033,
            /**
             * Bolivarian Repbulic of Venezuela.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            BOLIVARIAN_REPUBLIC_OF_VENEZUELA: 0x00000034,
            /**
             * Republic of Albania.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_ALBANIA: 0x00000040,
            /**
             * Australia.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            AUSTRALIA: 0x00000041,
            /**
             * Republic of Austria.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_AUSTRIA: 0x00000042,
            /**
             * Kingdom of Belgium.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            KINGDOM_OF_BELGIUM: 0x00000043,
            /**
             * Bosnia and Herzegovina.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            BOSNIA_AND_HERZEGOVINA: 0x00000044,
            /**
             * Republic of Botswana.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_BOTSWANA: 0x00000045,
            /**
             * Republic of Bulgaria.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_BULGARIA: 0x00000046,
            /**
             * Republic of Croatia.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_CROATIA: 0x00000047,
            /**
             * Republic of Cyprus.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_CYPRUS: 0x00000048,
            /**
             * Czech Republic.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            CZECH_REPUBLIC: 0x00000049,
            /**
             * Kingdom of Denmark.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            KINGDOM_OF_DENMARK: 0x0000004a,
            /**
             * Republic of Estonia.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_ESTONIA: 0x0000004b,
            /**
             * Republic of Finland.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_FINLAND: 0x0000004c,
            /**
             * French Republic.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            FRENCH_REPUBLIC: 0x0000004d,
            /**
             * Federal Republic of Germany.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            FEDERAL_REPUBLIC_OF_GERMANY: 0x0000004e,
            /**
             * Hellenic Republic.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            HELLENIC_REPUBLIC: 0x0000004f,
            /**
             * Republic of Hungary.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_HUNGARY: 0x00000050,
            /**
             * Republic of Iceland.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_ICELAND: 0x00000051,
            /**
             * Ireland.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            IRELAND: 0x00000052,
            /**
             * Republic of Italy.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_ITALY: 0x00000053,
            /**
             * Republic of Latvia.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_LATVIA: 0x00000054,
            /**
             * Kingdom of Lesotho.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            KINGDOM_OF_LESOTHO: 0x00000055,
            /**
             * Principality of Liechtenstein.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            PRINCIPALITY_OF_LIECHTENSTEIN: 0x00000056,
            /**
             * Republic of Lithuania.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_LITHUANIA: 0x00000057,
            /**
             * Grand Duchy of Luxembourg.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            GRAND_DUCHY_OF_LUXEMBOURG: 0x00000058,
            /**
             * Former Yugoslav Republic of Macedonia.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            FORMER_YUGOSLAV_REPUBLIC_OF_MACEDONIA: 0x00000059,
            /**
             * Republic of Malta.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_MALTA: 0x0000005a,
            /**
             * Republic of Montenegro.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_MONTENEGRO: 0x0000005b,
            /**
             * Republic of Mozambique.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_MOZAMBIQUE: 0x0000005c,
            /**
             * Republic of Namibia.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_NAMIBIA: 0x0000005d,
            /**
             * Kingdom of the Netherlands.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            KINGDOM_OF_THE_NETHERLANDS: 0x0000005e,
            /**
             * New Zealand.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            NEW_ZEALAND: 0x0000005f,
            /**
             * Kingdom of Norway.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            KINGDOM_OF_NORWAY: 0x00000060,
            /**
             * Republic of Poland.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_POLAND: 0x00000061,
            /**
             * Portuguese Republic.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            PORTUGUESE_REPUBLIC: 0x00000062,
            /**
             * Romania.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            ROMANIA: 0x00000063,
            /**
             * Russian Federation.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            RUSSIAN_FEDERATION: 0x00000064,
            /**
             * Republic of Serbia & Republic of Kosovo.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_SERBIA_AND_REPUBLIC_OF_KOSOVO: 0x00000065,
            /**
             * Slovak Republic.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            SLOVAK_REPUBLIC: 0x00000066,
            /**
             * Republic of Slovenia.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_SLOVENIA: 0x00000067,
            /**
             * Republic of South Africa.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_SOUTH_AFRICA: 0x00000068,
            /**
             * Spain.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            SPAIN: 0x00000069,
            /**
             * Kingdom of Swaziland.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            KINGDOM_OF_SWAZILAND: 0x0000006a,
            /**
             * Kingdom of Sweden.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            KINGDOM_OF_SWEDEN: 0x0000006b,
            /**
             * Swiss Confederation.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            SWISS_CONFEDERATION: 0x0000006c,
            /**
             * Republic of Turkey.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_TURKEY: 0x0000006d,
            /**
             * United Kingdom of Great Britain and Northern Ireland.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            UNITED_KINGDOM_OF_GREAT_BRITAIN_AND_NORTHERN_IRELAND: 0x0000006e,
            /**
             * Republic of Zambia.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_ZAMBIA: 0x0000006f,
            /**
             * Republic of Zimbabwe.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_ZIMBABWE: 0x00000070,
            /**
             * Azerbaijan.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            AZERBAIJAN: 0x00000071,
            /**
             * Mauritania.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            MAURITANIA: 0x00000072,
            /**
             * Mali.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            MALI: 0x00000073,
            /**
             * Niger.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            NIGER: 0x00000074,
            /**
             * Chad.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            CHAD: 0x00000075,
            /**
             * Sudan.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            SUDAN: 0x00000076,
            /**
             * Eritrea.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            ERITREA: 0x00000077,
            /**
             * Djibouti.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            DJIBOUTI: 0x00000078,
            /**
             * Somalia.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            SOMALIA: 0x00000079,
            /**
             * Andorra.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            ANDORRA: 0x0000007a,
            /**
             * Gibraltar.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            GIBRALTAR: 0x0000007b,
            /**
             * Guernsey.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            GUERNSEY: 0x0000007c,
            /**
             * Isle of Man.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            ISLE_OF_MAN: 0x0000007d,
            /**
             * Jersey.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            JERSEY: 0x0000007e,
            /**
             * Monaco.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            MONACO: 0x0000007f,
            /**
             * Taiwan.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            TAIWAN: 0x00000080,
            /**
             * Rebublic of Korea.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_KOREA: 0x00000088,
            /**
             * Hong Kong.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            HONG_KONG: 0x00000090,
            /**
             * Macau.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            MACAU: 0x00000091,
            /**
             * Republic of Indonesia.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_INDONESIA: 0x00000098,
            /**
             * Republic of Singapore.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_SINGAPORE: 0x00000099,
            /**
             * Kingdom of Thailand.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            KINGDOM_OF_THAILAND: 0x0000009a,
            /**
             * Republic of the Philippines.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            REPUBLIC_OF_THE_PHILIPPINES: 0x0000009b,
            /**
             * Malaysia.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            MALAYSIA: 0x0000009c,
            /**
             * People's Republic of China.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            PEOPLES_REPUBLIC_OF_CHINA: 0x000000a0,
            /**
             * United Arab Emirates.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            UNITED_ARAB_EMIRATES: 0x000000a8,
            /**
             * India.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            INDIA: 0x000000a9,
            /**
             * Arab Republic of Egypt.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            ARAB_REPUBLIC_OF_EGYPT: 0x000000aa,
            /**
             * Sultanate of Oman.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            SULTANATE_OF_OMAN: 0x000000ab,
            /**
             * State of Qatar.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            STATE_OF_QATAR: 0x000000ac,
            /**
             * State of Kuwait.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            STATE_OF_KUWAIT: 0x000000ad,
            /**
             * Kingdom of Saudi Arabia.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            KINGDOM_OF_SAUDI_ARABIA: 0x000000ae,
            /**
             * Syrian Arab Republic.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            SYRIAN_ARAB_REPUBLIC: 0x000000af,
            /**
             * Kingdom of Bahrain.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            KINGDOM_OF_BAHRAIN: 0x000000b0,
            /**
             * Hashemite Kingdom of Jordan.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            HASHEMITE_KINGDOM_OF_JORDAN: 0x000000b1,
            /**
             * San Marino.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            SAN_MARINO: 0x000000b8,
            /**
             * Vatican City.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            VATICAN_CITY: 0x000000b9,
            /**
             * Bermuda.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            BERMUDA: 0x000000ba,
            /**
             * Nigeria.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            NIGERIA: 0x000000c0,
            /**
             * Angola.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            ANGOLA: 0x000000c1,
            /**
             * Ghana.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            GHANA: 0x000000c2,
            /**
             * Others.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            OTHERS: 0x000000fe,
            /**
             * Unknown.
             * @property {uint32}
             * @since 1.0
             * @static @constant
             */
            UNKNOWN: 0x000000ff,
        };
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     *
     * @class nwf.system
     * @author Ryan Lynd
     */
    var system;
    (function (system) {
        /**
         * SystemErrorType constants.
         *
         * @enum nwf.system.SystemErrorType
         * @author Ryan Lynd
         */
        system.SystemErrorType = {
            //-------------------------------------------------------------------------
            // STATIC PUBLIC CONSTANTS
            //-------------------------------------------------------------------------
            /**
             * Automatic Internet Connection (AC)
             * <table>
             *     <tr><td>      Error Code       </td><td>Meaning                      </td></tr>
             *     <tr><td><code>103-0xxx  </code></td><td>Prior to connection          </td></tr>
             *     <tr><td><code>103-1xxx  </code></td><td>Connecting to access point   </td></tr>
             *     <tr><td><code>103-2xxx  </code></td><td>While connecting to Internet </td></tr>
             *     <tr><td><code>103-41xx  </code></td><td>Other                        </td></tr>
             * </table>
             * @type Number
             * @since 1.0
             * @static @constant
             */
            AC: 103,
            /**
             * Launch
             * <table>
             *     <tr><td>      Error Code     </td><td>Meaning                       </td></tr>
             *     <tr><td><code>157-01xx</code></td><td>Status of ACPCheckTitleLaunch<br>(Occurs during application jump.)                                                               </td></tr>
             *     <tr><td><code>157-11xx</code></td><td>ACPCheckTitleLaunch status<br>(This message is for the system menu. The application will never notify the user of these errors.) </td></tr>
             * </table>
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP: 157,
            /**
             * Nintendo Accounts
             * <table>
             *     <tr><td>      Error Code                </td><td>Meaning                </td></tr>
             *     <tr><td><code>102-0xxx to 102-1xx</code></td><td>Account library        </td></tr>
             *     <tr><td><code>102-2xxx+          </code></td><td>Account server-related </td></tr>
             * </table>
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACT: 102,
            /**
             * Common Application Messages
             * <table>
             *     <tr><td>      Error Code     </td><td>Meaning            </td></tr>
             *     <tr><td><code>199-00xx</code></td><td>Application Jumps  </td></tr>
             *     <tr><td><code>199-01xx</code></td><td>Text Input         </td></tr>
             *     <tr><td><code>199-02xx</code></td><td>Controller Devices </td></tr>
             *     <tr><td><code>199-03xx</code></td><td>Controller Notes   </td></tr>
             *     <tr><td><code>199-04xx</code></td><td>FFL                </td></tr>
             *     <tr><td><code>199-05xx</code></td><td>Parental Controls  </td></tr>
             * </table>
             * _Common messages available for general applications. Triggered manually by the application._
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG: 199,
            /**
             * Friend Presence
             * <table>
             *     <tr><td>      Error Code     </td><td>Meaning                                     </td></tr>
             *     <tr><td><code>101-01xx</code></td><td>Unexpected                                  </td></tr>
             *     <tr><td><code>101-02xx</code></td><td>Unexpected                                  </td></tr>
             *     <tr><td><code>101-03xx</code></td><td>Connection between friend server and client </td></tr>
             *     <tr><td><code>101-04xx</code></td><td>Server-side processing                      </td></tr>
             *     <tr><td><code>101-05xx</code></td><td>Communication processing                    </td></tr>
             *     <tr><td><code>101-06xx</code></td><td>Reserved                                    </td></tr>
             *     <tr><td><code>101-07xx</code></td><td>Friend presence                             </td></tr>
             *     <tr><td><code>101-08xx</code></td><td>Authentication errors                       </td></tr>
             * </table>
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FP: 101,
            /**
             * File System
             * <table>
             *     <tr><td>      Error Code     </td><td>Meaning                   </td></tr>
             *     <tr><td><code>150-1xxx</code></td><td>File system status codes  </td></tr>
             * </table>
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS: 150,
            /**
             * Wii Remote Library (KPAD)
             * <table>
             *     <tr><td>      Error Code     </td><td>Meaning                                       </td></tr>
             *     <tr><td><code>151-01xx</code></td><td>Errors when getting Wii Remote sampling data  </td></tr>
             *     <tr><td><code>151-02xx</code></td><td>Wii Balance Board sensor value errors         </td></tr>
             * </table>
             * @type Number
             * @since 1.0
             * @static @constant
             */
            KPAD: 151,
            /**
             * Nintendo Web Framework (NWF) specific errors
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NWF: 117,
            /**
             * Save Data Errors
             *
             * _Errors for the SAVE functions used by most developers._
             * @type Number
             * @since 1.0
             * @static @constant
             */
            SAVE: 155,
            /**
             * System Settings Information
             * <table>
             *     <tr><td>      Error Code     </td><td>Meaning                                                                            </td></tr>
             *     <tr><td><code>158-01xx</code></td><td>Error in SDK library reading or writing information registered in system settings  </td></tr>
             * </table>
             * @type Number
             * @since 1.0
             * @static @constant
             */
            SSI: 158,
            /**
             * General UDS/RDT Errors
             * @type Number
             * @since 1.0
             * @static @constant
             */
            UDS: 156,
            /**
             * Miiverse
             * <table>
             *     <tr><td>      Error Code     </td><td>Meaning                               </td></tr>
             *     <tr><td><code>115-0xxx</code></td><td>General Miiverse library errors </td></tr>
             *     <tr><td><code>115-1xxx</code></td><td>Parental Control and system errors </td></tr>
             *     <tr><td><code>115-2xxx</code></td><td>Internal Miiverse errors </td></tr>
             *     <tr><td><code>115-3xxx</code></td><td>Miiverse CURL errors </td></tr>
             *     <tr><td><code>115-4xxx</code></td><td>Miiverse HTTP errors </td></tr>
             *     <tr><td><code>115-5xxx</code></td><td>Miiverse server and usage errors </td></tr>
             * </table>
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV: 115,
            /**
             * Wii U GamePad
             * <table>
             *     <tr><td>      Error Code     </td><td>Meaning                               </td></tr>
             *     <tr><td><code>165-01xx</code></td><td>General GamePad library (VPAD) errors </td></tr>
             * </table>
             * @type Number
             * @since 1.0
             * @static @constant
             */
            VPAD: 165,
            /**
             * Wii Remote
             * <table>
             *     <tr><td>      Error Code     </td><td>Meaning                                   </td></tr>
             *     <tr><td><code>152-01xx</code></td><td>General Wii Remote Library (WPAD) errors </td></tr>
             * </table>
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WPAD: 152,
            /**
             * NEX Library
             * <table>
             *     <tr><td>      Error Code               </td><td>Meaning                                   </td></tr>
             *     <tr><td><code>106-01xx          </code></td><td>Unexpected                                </td></tr>
             *     <tr><td><code>106-02xx          </code></td><td>Unexpected                                </td></tr>
             *     <tr><td><code>106-03xx          </code></td><td>Connection between game server and client </td></tr>
             *     <tr><td><code>106-04xx          </code></td><td>Server-side processing                    </td></tr>
             *     <tr><td><code>106-05xx          </code></td><td>Communication processing                  </td></tr>
             *     <tr><td><code>106-06xx          </code></td><td>Matchmaking                               </td></tr>
             *     <tr><td><code>106-07xx          </code></td><td>Reserved                                  </td></tr>
             *     <tr><td><code>106-08xx          </code></td><td>Authentication                            </td></tr>
             *     <tr><td><code>106-09xx, 106-10xx</code></td><td>P2P communication                         </td></tr>
             *     <tr><td><code>106-11xx          </code></td><td>Ranking                                   </td></tr>
             *     <tr><td><code>106-12xx          </code></td><td>Data store                                </td></tr>
             * </table>
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX: 106,
            /**
             * ECommerce
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            EC: 124,
            /**
             * ECommerce Applet
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            EC_APPLET: 123,
            /**
             * eShop Server
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST: 109,
        };
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     *
     * @class nwf.system
     * @author Ryan Lynd
     */
    var system;
    (function (system) {
        /**
         * SystemErrorLevel constants.
         *
         * @enum nwf.system.SystemErrorLevel
         * @author Aaron Ward
         * @author Nate Long
         * @author Shawn Gates
         */
        system.SystemErrorLevel = {
            //-------------------------------------------------------------------------
            // STATIC PUBLIC CONSTANTS
            //-------------------------------------------------------------------------
            /**
             * Warning level errors are informational.
             * They can be handled or ignored at the developer's discretion.
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ERROR_LEVEL_WARNING: 1,
            /**
             * Error level errors are the majority of errors.
             * They should be displayed to the user in most cases, but can be handled by the application or ignored in some situations.
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ERROR_LEVEL_ERROR: 2,
            /**
             * Fatal level errors are application ending errors.
             * These must be displayed to the user, and they usually indicate that a portion of the application will not function as intended.
             * After displaying such an error, the application should most likely call `{@link nwf.system.WiiUSystem#returnToMenu returnToMenu}` or `{@link nwf.system.WiiUSystem#reloadTitle reloadTitle}`.
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ERROR_LEVEL_FATAL: 3,
        };
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.system
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var system;
    (function (system) {
        /**
         * SystemErrorCode constants.
         *
         * @enum nwf.system.SystemErrorCode
         * @author Ryan Lynd
         */
        system.SystemErrorCode = {
            //-------------------------------------------------------------------------
            // STATIC PUBLIC CONSTANTS
            //-------------------------------------------------------------------------
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACCOUNT_ALREADY_DELETED: 1022631,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACCOUNT_ALREADY_LOADED: 1021012,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACCOUNT_ID_ALREADY_EXISTS: 1022571,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACCOUNT_ID_CHANGED: 1022632,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACCOUNT_ID_FORMAT_INVALID: 1022576,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACCOUNT_ID_NOT_ACCEPTABLE: 1022572,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACCOUNT_ID_PASSWORD_SAME: 1022577,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACCOUNT_LOCKED: 1021013,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACCOUNT_NOT_COMMITTED: 1021023,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACCOUNT_NOT_FOUND: 1021001,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACCOUNT_NOT_LOADED: 1021011,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACCOUNT_PASSWORD_NOT_ACCEPTABLE: 1022573,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACCOUNT_TOKEN_EXPIRED: 1022641,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_ACCOUNT_ERROR: 1550203,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_BROWSER_REQUIRED: 1570108,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_DEVICE_FULL: 1550200,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_DEVICE_NOT_FOUND: 1550202,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_DIR_NOT_FOUND: 1550207,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_GAMEPAD_REQUIRED: 1570115,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_FILE_NOT_FOUND: 1550208,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_INCORRECT_PINCODE: 1570114,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_INVALID_LOGO: 1570103,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_INVALID_PARAM: 1570100,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_INVALID_REGION: 1570104,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_INVALID_XML_FILE: 1550209,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_MEDIA_NOTREADY: 1550205,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_NETACCOUNT_ERROR: 1570113,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_NETACCOUNT_REQUIRED: 1570112,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_NETSETTING_REQUIRED: 1570111,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_NOT_FOUND: 1570101,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_NOTPRESENT_RATING: 1570106,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_OLV_REQUIRED: 1570109,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_PENDING_RATING: 1570107,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_PERMISSION_ERROR: 1550211,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_RESOURCE_ERROR: 1550204,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_RESTRICTED_RATING: 1570105,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_SYSTEM_MEMORY: 1550212,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_TITLE_NOT_FOUND: 1550206,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_UNSUPPORTED: 1550201,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            ACP_STATUS_XML_ITEM_NOT_FOUND: 1550210,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            APPLICATION_UPDATE_REQUIRED: 1022512,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            AUTHENTICATION_HTTP_CONNECTION_ERROR: 1010803,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            AUTHENTICATION_HTTP_DNS_ERROR: 1010804,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            AUTHENTICATION_HTTP_GET_PROXY_SETTING: 1010805,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            AUTHENTICATION_INVALID_PARAM: 1010808,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            AUTHENTICATION_LOCKED: 1022633,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            AUTHENTICATION_MOVE_COUNT_UNMATCH: 1010810,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            AUTHENTICATION_PRINCIPAL_ID_UNMATCHED: 1010809,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            AUTHENTICATION_TOKEN_EXPIRED: 1010806,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            AUTHENTICATION_TOKEN_PARSE_ERROR: 1010802,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            AUTHENTICATION_UNDER_MAINTENANCE: 1010811,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            AUTHENTICATION_UNKNOWN: 1010813,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            AUTHENTICATION_UNSUPPORTED_VERSION: 1010812,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            AUTHENTICATION_VALIDATION_FAILED: 1010807,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            BAD_FORMAT_PARAMETER: 1022401,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            BAD_FORMAT_REQUEST: 1022402,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            BAD_FORMAT_RESPONSE: 1022421,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            BANNED_ACCOUNT_ALL: 1022802,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            BANNED_ACCOUNT_IN_APPLICATION: 1022803,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            BANNED_ACCOUNT_IN_INDEPENDENT_SERVICE: 1022805,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            BANNED_ACCOUNT_IN_NEX_SERVICE: 1022804,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            BANNED_DEVICE_ALL: 1022812,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            BANNED_DEVICE_IN_APPLICATION: 1022813,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            BANNED_DEVICE_IN_INDEPENDENT_SERVICE: 1022815,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            BANNED_DEVICE_IN_NEX_SERVICE: 1022814,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_FATAL: 1999999,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_FORGET_PIN_CODE: 1990140,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_FUNCTION_PROTECTED: 1990501,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_INTERNET_BROWSER_PROTECTED: 1990503,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_JUMP_ACCOUNT_SETTING: 1990020,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_JUMP_ACCOUNT_SETTING_2: 1990021,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_JUMP_APP_REBOOT: 1990030,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_JUMP_SETTING_COUNTRY: 1990015,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_JUMP_SETTING_DATA_MANAGE: 1990012,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_JUMP_SETTING_DATE_TIME: 1990014,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_JUMP_SETTING_INTERNET: 1990011,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_JUMP_SETTING_TOP: 1990010,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_JUMP_SETTING_UPDATE: 1990016,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_MII_ALREADY_SAVED: 1990401,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_MII_CANT_SAVE: 1990402,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_MII_NO_SPACE: 1990404,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_MII_OVER_WRITE_CONFIRM: 1990403,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NEED_WII_BALANCE_BOARD: 1990204,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NEED_WII_CLASSIC_CONTROLLER: 1990205,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NEED_WII_NUNCHUK: 1990201,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NEED_WII_REMOTE: 1990200,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NEED_WII_REMOTE_PLUS: 1990202,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NEED_WII_U_GAMEPAD: 1990210,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NEED_WII_U_PRO_CONTROLLER: 1990203,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NETWORK_FUNCTION_PROTECTED: 1990502,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NGWORD_ACCEPTABLE: 1990102,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NGWORD_NOT_ACCEPTABLE: 1990101,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NOT_MATCH_EMAIL: 1990121,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NOT_MATCH_PASSWORD: 1990120,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NUMBER_NOT_ACCEPTABLE: 1990110,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NUMBER_OVER_LIMIT_1: 1990111,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NUMBER_OVER_LIMIT_2: 1990112,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NUMBER_OVER_LIMIT_3: 1990113,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NUMBER_OVER_LIMIT_4: 1990114,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NUMBER_OVER_LIMIT_5: 1990115,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NUMBER_OVER_LIMIT_6: 1990116,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NUMBER_OVER_LIMIT_7: 1990117,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NUMBER_OVER_LIMIT_8: 1990118,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_NUMBER_OVER_LIMIT_9: 1990119,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_PROTECTION_RELEASED: 1990510,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_RELEASE_PARENTAL_CONTROL: 1990040,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_SWKBD_FATAL: 1990199,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_TEXT_NO_INPUT: 1990106,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_TEXT_OVER_LIMIT: 1990105,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_WII_BALANCE_BOARD_NO_BATTERY: 1990304,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_WII_REMOTE_NO_BATTERY: 1990301,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_WII_U_GAMEPAD_NO_BATTERY: 1990302,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_WII_U_PRO_CONTROLLER_NO_BATTERY: 1990303,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_WIIEMAIL_NOT_ACCEPTABLE: 1990136,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_WRONG_FRIEND_CODE: 1990133,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_WRONG_INPUT: 1990135,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_WRONG_NNID: 1990134,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_WRONG_PASSWORD: 1990131,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CMN_MSG_WRONG_PIN_CODE: 1990132,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CONFIRMATION_CODE_EXPIRED: 1022651,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CONNECTED: 1010705,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            COPPA_NOT_ACCEPTED: 1022593,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_ACCESS_DENIED: 1010107,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_BUFFER_OVERFLOW: 1010116,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_CALL_INITIATION_FAILURE: 1010114,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_EXCEPTION: 1010106,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_INITIALIZATION_FAILURE: 1010113,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_INVALID_ARGUMENT: 1010111,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_INVALID_HANDLE: 1010108,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_INVALID_INDEX: 1010109,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_INVALID_LOCK_STATE: 1010117,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_INVALID_POINTER: 1010104,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_NOT_IMPLEMENTED: 1010103,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_OPERATION_ABORTED: 1010105,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_OUT_OF_MEMORY: 1010110,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_REGISTRATION_ERROR: 1010115,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_TIMEOUT: 1010112,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CORE_UNKNOWN: 1010102,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            COUNTRY_MISMATCH: 1022502,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CREDIT_CARD_BLACKLISTED: 1022673,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CREDIT_CARD_DATE_EXPIRED: 1022679,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CREDIT_CARD_DECLINED: 1022672,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CREDIT_CARD_GENERAL_FAILURE: 1022671,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CREDIT_CARD_NUMBER_WRONG: 1022680,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CREDIT_CARD_PIN_WRONG: 1022681,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_ABORTED_BY_CALLBACK: 1172023,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_AGAIN: 1172044,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_BAD_CONTENT_ENCODING: 1172037,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_BAD_DOWNLOAD_RESUME: 1172020,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_BAD_FUNCTION_ARGUMEN: 1172024,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_CHUNK_FAILED: 1172049,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_CONV_FAILED: 1172038,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_CONV_REQD: 1172039,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_COULDNT_CONNECT: 1172007,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_COULDNT_RESOLVE_HOST: 1172006,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_COULDNT_RESOLVE_PROXY: 1172005,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_CURLE_POST_ERROR: 1172018,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_CURLE_RETURNED_ERROR: 1172011,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_FAILED_INIT: 1172002,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_FILE_COULDNT_READ_FILE: 1172021,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_FUNCTION_NOT_FOUND: 1172022,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_GOT_NOTHING: 1172029,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_INTERFACE_FAILED: 1172025,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_NOT_BUILT_IN: 1172004,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_OPERATION_TIMEDOUT: 1172016,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_OUT_OF_MEMORY: 1172015,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_PARTIAL_FILE: 1172009,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_PEER_FAILED_VERIFICATION: 1172028,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_QUOTE_ERROR: 1172010,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_RANGE_ERROR: 1172017,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_READ_ERROR: 1172014,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_RECV_ERROR: 1172033,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_REMOTE_ACCESS_DENIED: 1172008,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_REMOTE_FILE_NOT_FOUND: 1172041,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_RTSP_CSEQ_ERROR: 1172047,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_RTSP_SESSION_ERROR: 1172048,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_SEND_ERROR: 1172032,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_SSH: 1172042,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_SSL_CACERT: 1172036,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_SSL_CACERT_BADFILE: 1172040,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_SSL_CERTPROBLEM: 1172034,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_SSL_CIPHER: 1172035,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_SSL_CONNECT_ERROR: 1172019,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_SSL_CRL_BADFILE: 1172045,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_SSL_ENGINE_NOTFOUND: 1172030,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_SSL_ENGINE_SETFAILED: 1172031,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_SSL_ISSUER_ERROR: 1172046,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_SSL_RECONNECT: 1172050,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_SSL_SHUTDOWN_FAILED: 1172043,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_TOO_MANY_REDIRECTS: 1172026,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_UNKNOWN_OPTION: 1172027,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_UNSUPPORTED_PROTOCOL: 1172001,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_UPLOAD_FAILED: 1172013,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_URL_MALFORMAT: 1172003,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CURLE_WRITE_ERROR: 1172012,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            DAEMON_ALREADY_INITIALIZED: 1010703,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            DAEMON_NOT_INITIALIZED: 1010702,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            DDL_INCORRECT_VERSION: 1010202,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            DDL_INVALID_SIGNATURE: 1010201,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            DESCRIPTION_CONFLICT_IP_ADDRESS: 1031200,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            DESCRIPTION_FAILED_CONNECT_AP: 1031100,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            DESCRIPTION_FAILED_FILE_ACCESS: 1035000,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            DESCRIPTION_INVALID: 1034100,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            DESCRIPTION_NOT_FOUND_ACCESS_POINT: 1031000,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            DEVICE_EULA_COUNTRY_MISMATCH: 1022596,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            DEVICE_ID_EMPTY: 1022459,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            DEVICE_MISMATCH: 1022501,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            EULA_NOT_ACCEPTED: 1022503,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            EULA_NOT_FOUND: 1022543,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            EXCESSIVE_MAIL_SEND_REQUEST: 1022662,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FILE_IO_ERROR: 1010720,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_ADD_FRIEND_PROHIBITED: 1010725,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_BLACKLISTED_BY_ME: 1010728,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_BLOCK_SETTING_CHANGE_NOT_ALLOWED: 1010741,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_FRIEND_ALREADY_ADDED: 1010730,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_FRIEND_LISTED_BY_ME: 1010738,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_FRIEND_REQUEST_BLOCKED: 1010736,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_INCOMPATIBLE_ACCOUNT: 1010740,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_INVALID_ACCOUNT: 1010727,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_INVALID_MESSAGE_ID: 1010733,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_INVALID_PRINCIPAL_ID: 1010711,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_INVALID_STATE: 1010723,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_MESSAGE_IS_NOT_FOR_ME: 1010735,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_MESSAGE_IS_NOT_MINE: 1010734,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_MY_FRIEND_LIST_LIMIT_EXCEED: 1010731,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_NOT_IN_MY_BLACKLIST: 1010739,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_NOT_IN_MY_FRIEND_LIST: 1010737,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_NOT_NETWORK_ACCOUNT: 1010744,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_NOTIFICATION_NOT_FOUND: 1010745,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_OPERATION_NOT_ALLOWED: 1010743,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_REQUEST_LIMIT_EXCEED: 1010732,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_SIZE_LIMIT_EXCEEDED: 1010742,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FPD_UNKNOWN: 1010722,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_STATUS_DATA_CORRUPTED: 1501054,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_STATUS_FATAL_ERROR: 1501090,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_STATUS_INVALID_MEDIA: 1501024,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_STATUS_JOURNAL_FULL: 1550102,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_STATUS_MEDIA_ERROR: 1501044,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_STATUS_MEDIA_NOT_READY: 1501014,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_STATUS_NOT_FOUND: 1550101,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_STATUS_WRITE_PROTECTED: 1501064,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_VOLSTATE_DATA_CORRUPTED: 1501051,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_VOLSTATE_DIRTY_MEDIA: 1501031,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_VOLSTATE_INITIAL: 1501000,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_VOLSTATE_INVALID_MEDIA: 1501021,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_VOLSTATE_JOURNAL_FULL: 1501082,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_VOLSTATE_MEDIA_ERROR: 1501042,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_VOLSTATE_NO_MEDIA: 1501011,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_VOLSTATE_WRITE_PROTECTED: 1501063,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            FS_VOLSTATE_WRONG_MEDIA: 1501071,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            GENERATE_TOKEN_FAILURE: 1022533,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_ABORTED_BY_CALLBACK: 1022142,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_AGAIN: 1022181,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_BAD_CONTENT_ENCODING: 1022161,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_BAD_DOWNLOAD_RESUME: 1022136,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_BAD_FUNCTION_ARGUMEN: 1022143,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_CHUNK_FAILED: 1022188,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_CONV_FAILED: 1022175,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_CONV_REQD: 1022176,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_COULDNT_CONNECT: 1022107,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_COULDNT_RESOLVE_HOST: 1022106,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_COULDNT_RESOLVE_PROXY: 1022105,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_FAILED_INIT: 1022102,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_FILE_COULDNT_READ_FILE: 1022137,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_FUNCTION_NOT_FOUND: 1022141,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_GOT_NOTHING: 1022152,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_HTTP_POST_ERROR: 1022134,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_HTTP_RETURNED_ERROR: 1022122,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_INTERFACE_FAILED: 1022145,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_NOT_BUILT_IN: 1022104,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_NSSL_NO_CTX: 1022189,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_OPERATION_TIMEDOUT: 1022128,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_OUT_OF_MEMORY: 1022127,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_PARTIAL_FILE: 1022118,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_PEER_FAILED_VERIFICATION: 1022151,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_QUOTE_ERROR: 1022121,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_RANGE_ERROR: 1022133,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_READ_ERROR: 1022126,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_RECV_ERROR: 1022156,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_REMOTE_ACCESS_DENIED: 1022109,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_REMOTE_FILE_NOT_FOUND: 1022178,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_RTSP_CSEQ_ERROR: 1022185,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_RTSP_SESSION_ERROR: 1022186,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_SEND_ERROR: 1022155,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_SSH: 1022179,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_SSL_CACERT: 1022160,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_SSL_CACERT_BADFILE: 1022177,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_SSL_CERTPROBLEM: 1022158,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_SSL_CIPHER: 1022159,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_SSL_CONNECT_ERROR: 1022135,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_SSL_CRL_BADFILE: 1022182,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_SSL_ENGINE_NOTFOUND: 1022153,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_SSL_ENGINE_SETFAILED: 1022154,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_SSL_ISSUER_ERROR: 1022183,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_SSL_SHUTDOWN_FAILED: 1022180,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_TOO_MANY_REDIRECTS: 1022147,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_UNKNOWN_OPTION: 1022148,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_UNSUPPORTED_PROTOCOL: 1022101,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_UPLOAD_FAILED: 1022125,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_URL_MALFORMAT: 1022103,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            HTTP_WRITE_ERROR: 1022123,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INITIALIZATION_FAILURE: 1010706,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INTERNAL_SERVER_ERROR: 1022931,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_ACCOUNT_TOKEN: 1022642,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_ARGUMENT: 1010709,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_COUNTRY: 1022456,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_CREDIT_CARD_DATE: 1022675,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_CREDIT_CARD_NUMBER: 1022674,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_CREDIT_CARD_PIN: 1022676,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_EULA_COUNTRY: 1022541,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_EULA_COUNTRY_AND_VERSION: 1022542,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_LANGUAGE: 1022457,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_LOCATION: 1022678,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_MAC_ADDRESS: 1022454,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_PLATFORM_ID: 1022451,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_POSTAL_CODE: 1022677,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_REGION: 1022455,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_SERIAL_ID: 1022453,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            KPAD_READ_ERR_INIT: 1510104,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            KPAD_READ_ERR_LOCKED: 1510103,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            KPAD_READ_ERR_NO_CONTROLLER: 1510101,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            KPAD_READ_ERR_NO_DATA: 1510100,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            KPAD_READ_ERR_SETUP: 1510102,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            KPAD_WBC_ERR_CALIBRATION: 1510205,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            KPAD_WBC_ERR_NO_BATTERY: 1510201,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            KPAD_WBC_ERR_NO_ZEROPOINT: 1510206,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            KPAD_WBC_ERR_SETUP: 1510202,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            KPAD_WBC_ERR_WEIGHT_OVER: 1510204,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            KPAD_WBC_ERR_WRONG_ZERO: 1510203,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            MAIL_ADDRESS_NOT_ACCEPTABLE: 1022575,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            MAIL_ADDRESS_NOT_VALIDATED: 1022661,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            MAIL_TEXT_NOT_FOUND: 1022536,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            MASTER_PIN_NOT_FOUND: 1022535,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            MII_NAME_NOT_ACCEPTABLE: 1022574,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            MII_NOT_REGISTERD: 1022595,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_MEM_ALLOC_FAIL: 1150101,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_INVALID_ACCOUNT: 1150102,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_NOT_IMPLEMENTED: 1150103,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_INIT_ERROR: 1150104,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_INVALID_PARAM: 1150201,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_INVALID_FORMAT: 1150202,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_INVALID_SIZE: 1150203,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_INVALID_POINTER: 1150204,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_NOT_INITIALIZED: 1150205,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_ALREADY_INITIALIZED: 1150206,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_ALREADY_OFFLINE: 1150207,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_NO_VALID_DATA: 1150208,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_OPERATION_CANCELED: 1150301,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_NO_OP_TO_CANCEL: 1150302,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_PORTAL_APP_NOT_FOUND: 1151001,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_TOTALLY_RESTRICTED: 1151002,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_POSTING_RESTRICTED: 1151003,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_SETTINGS_LOAD_FAIL: 1151004,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_ACP_FAILED: 1151005,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_PRELOAD_FAILED: 1151006,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_LIB_VERSION_MISMATCH: 1152001,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_EXPIRED: 1152002,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_EMPTY_HTTP_RESPONSE: 1152003,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_XML_PARSE_ERROR: 1152004,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_DATA_NOT_ON_SERVER: 1152005,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_DECODE_FAILED: 1152006,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_COMMUNICATION_LIB_FAILED: 1152007,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_LANGUAGES_UNMATCHED: 1152008,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_UNSUPPORTED_PROTOCOL: 1153003,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_FAILED_INIT: 1153004,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_URL_MALFORMAT: 1153005,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_NOT_BUILT_IN: 1153006,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_COULDNT_RESOLVE_PROXY: 1153007,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_COULDNT_RESOLVE_HOST: 1153009,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_COULDNT_CONNECT: 1153018,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_REMOTE_ACCESS_DENIED: 1153021,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_PARTIAL_FILE: 1153022,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_QUOTE_ERROR: 1153023,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_HTTP_RETURNED_ERROR: 1153025,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_WRITE_ERROR: 1153026,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_UPLOAD_FAILED: 1153027,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_READ_ERROR: 1153028,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_OUT_OF_MEMORY: 1153033,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_OPERATION_TIMEDOUT: 1153034,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_RANGE_ERROR: 1153035,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_HTTP_POST_ERROR: 1153036,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_SSL_CONNECT_ERROR: 1153045,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_BAD_DOWNLOAD_RESUME: 1153047,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_INTERFACE_FAILED: 1153048,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_TOO_MANY_REDIRECTS: 1153051,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_UNKNOWN_OPTION: 1153052,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_PEER_FAILED_VERIFICATION: 1153053,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_GOT_NOTHING: 1153054,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_SSL_ENGINE_NOTFOUND: 1153055,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_SSL_ENGINE_SETFAILED: 1153056,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_SEND_ERROR: 1153058,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_RECV_ERROR: 1153059,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_SSL_CERTPROBLEM: 1153060,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_SSL_CIPHER: 1153064,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_SSL_CACERT: 1153065,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_USE_SSL_FAILED: 1153066,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_SEND_FAIL_REWIND: 1153067,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_SSL_ENGINE_INITFAILED: 1153075,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_LOGIN_DENIED: 1153076,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_CONV_FAILED: 1153077,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_CONV_REQD: 1153080,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_SSL_CACERT_BADFILE: 1153081,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_SSL_SHUTDOWN_FAILED: 1153082,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_AGAIN: 1153083,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_SSL_CRL_BADFILE: 1153088,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_SSL_ISSUER_ERROR: 1153089,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_CHUNK_FAILED: 1153401,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CURLE_NSSL_NO_CTX: 1153403,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_HTTP_UNAUTHORIZED: 1154401,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_HTTP_FORBIDDEN: 1154403,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_HTTP_NOT_FOUND: 1154404,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_HTTP_TIMEOUT: 1154408,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_HTTP_RANGE_ERROR: 1154416,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_HTTP_SERVER_ERROR: 1154500,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_HTTP_BAD_GATEWAY: 1154502,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_HTTP_SERVICE_UNAVAILABLE: 1154503,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_HTTP_GATEWAY_TIMEOUT: 1154504,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_HTTP_VERSION_UNSUPPORTED: 1154505,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_VERSION_UNSUPPORTED: 1155001,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_MUST_RUN_ONCE: 1155002,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_SERVER_DOWN: 1155003,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_SERVICE_DISCONTINUED: 1155004,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_PARENTAL_CONTROL_RESTRICTED: 1155005,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_PARENTAL_CONTROL_POSTING_RESTRICTED: 1155006,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_ACCOUNT_BANNED: 1155007,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_ACCOUNT_BANNED_FROM_POSTING: 1155008,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CONSOLE_BANNED: 1155009,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_CONSOLE_BANNED_FROM_POSTING: 1155010,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_DIRECT_MESSAGE_FAIL: 1155011,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_INVALID_SERVICE_TOKEN: 1155101,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_MISSING_PARAMETER: 1155102,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_INVALID_PARAMETER_TYPE: 1155103,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_ATTACHMENT_TOO_LARGE: 1155104,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_PARAMETER_OUT_OF_BOUNDS: 1155105,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_INVALID_REQUEST: 1155106,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_ACCESS_KEY_MISMATCH: 1155108,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_RECIPIENT_NOT_FRIEND: 1155109,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_COMMUNITY_NONEXIST: 1155110,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_TITLE_NONEXIST: 1155111,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OLV_INAPPROPRIATE_LANGUAGE: 1155901,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NETWORK_CLOCK_INVALID: 1021101,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_ACCOUNT_NOT_FOUND: 1022532,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NINTENDO_NETWORK_CLOSED: 1022883,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NOT_CONNECTED: 1010704,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NOT_LOCAL_ACCOUNT: 1021022,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NOT_NETWORK_ACCOUNT: 1021021,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NOT_PROVIDED_COUNTRY: 1022884,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_AKID_ISSUER_SERIAL_MISMATCH: 1173032,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_AKID_SKID_MISMATCH: 1173031,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_APPLICATION_VERIFICATION: 1173051,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_CERT_CHAIN_TOO_LONG: 1173023,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_CERT_HAS_EXPIRED: 1173011,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_CERT_NOT_YET_VALID: 1173010,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_CERT_REJECTED: 1173029,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_CERT_REVOKED: 1173024,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_CERT_SIGNATURE_FAILURE: 1173008,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_CERT_UNTRUSTED: 1173028,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_CRL_HAS_EXPIRED: 1173013,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_CRL_NOT_YET_VALID: 1173012,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_CRL_PATH_VALIDATION_ERROR: 1173055,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_CRL_SIGNATURE_FAILURE: 1173009,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_DEPTH_ZERO_SELF_SIGNED_CERT: 1173019,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_DIFFERENT_CRL_SCOPE: 1173045,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_ERROR_IN_CERT_NOT_AFTER_FIELD: 1173015,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_ERROR_IN_CERT_NOT_BEFORE_FIELD: 1173014,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_ERROR_IN_CRL_LAST_UPDATE_FIELD: 1173016,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_ERROR_IN_CRL_NEXT_UPDATE_FIELD: 1173017,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_EXCLUDED_VIOLATION: 1173049,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_ILLEGAL: 1173002,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_INVALID_CA: 1173025,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_INVALID_EXTENSION: 1173042,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_INVALID_NON_CA: 1173038,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_INVALID_POLICY_EXTENSION: 1173043,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_INVALID_PURPOSE: 1173027,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_KEYUSAGE_NO_CERTSIGN: 1173033,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_KEYUSAGE_NO_CRL_SIGN: 1173036,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_KEYUSAGE_NO_DIGITAL_SIGNATURE: 1173040,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_NO_EXPLICIT_POLICY: 1173044,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_OUT_OF_MEM: 1173018,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_PATH_LENGTH_EXCEEDED: 1173026,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_PERMITTED_VIOLATION: 1173048,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_PROXY_CERTIFICATES_NOT_ALLOWED: 1173041,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_PROXY_PATH_LENGTH_EXCEEDED: 1173039,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_SELF_SIGNED_CERT_IN_CHAIN: 1173020,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_SUBJECT_ISSUER_MISMATCH: 1173030,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_SUBTREE_MINMAX: 1173050,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: 1173007,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNABLE_TO_DECRYPT_CERT_SIGNATURE: 1173005,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNABLE_TO_DECRYPT_CRL_SIGNATURE: 1173006,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNABLE_TO_GET_CRL: 1173004,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNABLE_TO_GET_CRL_ISSUER: 1173034,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNABLE_TO_GET_ISSUER_CERT: 1173003,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: 1173021,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNABLE_TO_VERIFY_LEAF_SIGNATURE: 1173022,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNHANDLED_CRITICAL_CRL_EXTENSION: 1173037,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNHANDLED_CRITICAL_EXTENSION: 1173035,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNNESTED_RESOURCE: 1173047,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNSUPPORTED_CONSTRAINT_SYNTAX: 1173053,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNSUPPORTED_CONSTRAINT_TYPE: 1173052,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNSUPPORTED_EXTENSION_FEATURE: 1173046,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OPEN_SSL_UNSUPPORTED_NAME_SYNTAX: 1173054,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            OUT_OF_MEMORY: 1010707,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            PARENTAL_CONTROLS_REQUIRED: 1022594,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            PID_NOT_FOUND: 1022531,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            PLATFORM_ID_EMPTY: 1022461,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            PYTHONCORE_CALL_FAILURE: 1010405,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            PYTHONCORE_CONVERSION_ERROR: 1010409,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            PYTHONCORE_EXCEPTION: 1010401,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            PYTHONCORE_INDEX_ERROR: 1010403,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            PYTHONCORE_INVALID_REFERENCE: 1010404,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            PYTHONCORE_KEY_ERROR: 1010407,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            PYTHONCORE_MEMORY_ERROR: 1010406,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            PYTHONCORE_OPERATION_ERROR: 1010408,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            PYTHONCORE_TYPE_ERROR: 1010402,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            PYTHONCORE_VALIDATION_ERROR: 1010410,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            REACHED_ASSOCIATION_LIMIT: 1022591,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            REACHED_REGISTRATION_LIMIT: 1022592,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_ACCOUNT_DISABLED: 1010306,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_ACCOUNT_EXPIRED: 1010307,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_CLASS_NOT_FOUND: 1010317,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_CONCURRENT_LOGIN_DENIED: 1010308,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_CONNECTION_FAILURE: 1010301,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_CONTROL_SCRIPT_FAILURE: 1010316,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_DDL_MISMATCH: 1010320,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_DUPLICATE_ENTRY: 1010315,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_ENCRYPTION_FAILURE: 1010309,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_INVALID_GID: 1010312,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_INVALID_OPERATION_IN_LIVE_ENVIRONMENT: 1010314,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_INVALID_PASSWORD: 1010304,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_INVALID_PID: 1010310,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_INVALID_THREAD_ID: 1010313,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_INVALID_USERNAME: 1010303,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_MAX_CONNECTIONS_REACHED: 1010311,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_NOT_AUTHENTICATED: 1010302,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RENDEZVOUS_USERNAME_ALREADY_EXISTS: 1010305,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            REQUEST_FORBIDDEN: 1022522,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            REQUEST_NOT_FOUND: 1022534,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            REQUEST_PARAMETER_MISSING: 1022403,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RESPONSE_ITEM_MISSING: 1022422,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RESPONSE_TOO_LARGE: 1022423,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RESTRICTED_BY_AGE: 1022901,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RMC_FAILED: 1010708,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            SAVE_STATUS_STORAGE_FULL: 1550100,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            SEND_MAIL_FAILURE: 1022537,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            SERIAL_ID_EMPTY: 1022460,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_UNIQUE_ID: 1022471,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_CLIENT_ID: 1022472,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_CLIENT_KEY: 1022473,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_NEX_CLIENT_ID: 1022481,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            INVALID_GAME_SERVER_ID: 1022482,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            GAME_SERVER_ID_ENVIRONMENT_NOT_FOUND: 1022483,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            GAME_SERVER_ID_UNIQUE_ID_NOT_LINKED: 1022484,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            CLIENT_ID_UNIQUE_ID_NOT_LINKED: 1022485,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            SERVICE_CLOSED: 1022882,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            SLOTS_FULL: 1021002,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            SO_SELECT_ERROR: 1022211,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            SYSTEM_UPDATE_REQUIRED: 1022511,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_CONGESTED_END_POINT: 1010513,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_CONNECTION_FAILURE: 1010502,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_CONNECTION_RESET: 1010509,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_DATA_REMAINING: 1010522,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_DECOMPRESSION_FAILURE: 1010512,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_DNS_ERROR: 1010520,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_DUPLICATE_ENDPOINT: 1010506,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_INCORRECT_REMOTE_AUTHENTICATION: 1010510,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_INVALID_KEY: 1010504,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_INVALID_URL: 1010503,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_INVALID_URL_TYPE: 1010505,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_IO_ERROR: 1010507,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_NO_BUFFER: 1010523,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_NOT_FOUND: 1010524,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_PROXY_ERROR: 1010521,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_SERVER_REQUEST_ERROR: 1010511,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_SOCKET_SEND_WARNING: 1010518,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_TIMEOUT: 1010508,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_UNKNOWN: 1010501,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            TRANSPORT_UNSUPPORTED_NAT: 1010519,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            UNAUTHORIZED_CLIENT: 1022458,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            UNAUTHORIZED_DEVIC: 1022452,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            UNDER_MAINTENANCE: 1022881,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            VPAD_READ_ERR_NO_CONTROLLER: 1650101,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_ADDRESS_BLOCKED_BY_WHITELIST: 1170301,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_ASSET_LOAD_FAIL: 1170121,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_EXTENSION_RPL_NOT_FOUND: 1174001,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_INIT_ERROR: 1170122,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_INVALID_CONFIG_XML: 1170101,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_JAVASCRIPT_EXEC_TIMEOUT: 1170204,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_JAVASCRIPT_OUT_OF_MEMORY: 1170202,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_LIBRARY_ALREADY_INIT: 1170124,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_LIBRARY_UNINIT: 1170123,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_MALFORMATTED_HTML: 1170211,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_MEM_ALLOC_FAIL: 1170203,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_BAD_GATEWAY: 1171400,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_CONFLICT: 1171409,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_EXPECTATION_FAILED: 1171417,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_FORBIDDEN: 1171403,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_GATEWAY_TIMEOUT: 1171504,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_GONE: 1171410,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_HTTP_VERSION_UNSUPPORTED: 1171505,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_INTERNAL_SERVER_ERROR: 1171500,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_LENGTH_REQUIRED: 1171411,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_METHOD_NOT_ALLOWED: 1171405,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_NOT_ACCEPTABLE: 1171406,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_NOT_FOUND: 1171404,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_NOT_IMPLEMENTED: 1171501,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_PAYMENT_REQUIRED: 1171402,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_PRECONDITION_FAILED: 1171412,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_PROXY_AUTH_REQ: 1171407,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_RANGE_NOT_SATISFIABLE: 1171416,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_REQUEST_ENTITY_TOO_LARGE: 1171413,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_REQUEST_TIMEOUT: 1171408,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_REQUEST_URI_TOO_LONG: 1171414,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_SERVICE_UNAVAILABLE: 1171503,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_UNAUTHORIZED: 1171401,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_NETWORK_UNSUPPORTED_MEDIA_TYPE: 1171415,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_RESERVED: 1170102,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_SAVE_DATA_FULL: 1170209,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_SAVE_DATA_FULL_REQUIRED: 1170210,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_THREAD_EXEC_TIMEOUT: 1170205,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_UNSUPPORTED_AUDIO_FORMAT: 1170207,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_UNSUPPORTED_IMAGE_FORMAT: 1170208,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_UNSUPPORTED_VIDEO_FORMAT: 1170206,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WEBKIT_WEBKIT_OUT_OF_MEMORY: 1170201,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WPAD_ERR_BROKEN: 1520105,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WPAD_ERR_BUSY: 1520101,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WPAD_ERR_CORRUPTED: 1520106,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WPAD_ERR_INVALID: 1520103,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WPAD_ERR_NO_CONTROLLER: 1520100,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WPAD_ERR_NOPERM: 1520104,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WPAD_ERR_TRANSFER: 1520102,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WRONG_ACCOUNT_MAIL: 1022616,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WRONG_ACCOUNT_PASSWORD: 1022611,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WRONG_ACCOUNT_PASSWORD_OR_MAIL_ADDRESS: 1022613,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WRONG_BIRTH_DATE_OR_MAIL_ADDRESS: 1022615,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WRONG_CONFIRMATION_CODE: 1022614,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WRONG_HTTP_METHOD: 1022404,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            WRONG_MAIL_ADDRESS: 1022612,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_UNKNOWN: 1060102,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_NOT_IMPLEMENTED: 1060103,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_INVALID_POINTER: 1060104,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_OPERATION_ABORTED: 1060105,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_EXCEPTION: 1060106,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_ACCESS_DENIED: 1060107,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_INVALID_HANDLE: 1060108,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_INVALID_INDEX: 1060109,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_OUT_OF_MEMORY: 1060110,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_INVALID_ARGUMENT: 1060111,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_TIMEOUT: 1060112,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_INITIALIZATION_FAILURE: 1060113,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_CALL_INITIATION_FAILURE: 1060114,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_REGISTRATION_ERROR: 1060115,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_BUFFER_OVERFLOW: 1060116,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_CORE_INVALID_LOCK_STATE: 1060117,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DDL_INVALID_SIGNATURE: 1060201,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DDL_INCORRECT_VERSION: 1060202,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_CONNECTION_FAILURE: 1060301,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_NOT_AUTHENTICATED: 1060302,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_INVALID_USERNAME: 1060303,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_INVALID_PASSWORD: 1060304,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_USERNAME_ALREADY_EXISTS: 1060305,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_ACCOUNT_DISABLED: 1060306,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_ACCOUNT_EXPIRED: 1060307,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_CONCURRENT_LOGIN_DENIED: 1060308,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_ENCRYPTION_FAILURE: 1060309,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_INVALID_PID: 1060310,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_MAX_CONNECTIONS_REACHED: 1060311,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_INVALID_GID: 1060312,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_INVALID_THREAD_ID: 1060313,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_INVALID_OPERATION_IN_LIVE_ENVIRONMENT: 1060314,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_DUPLICATE_ENTRY: 1060315,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_CONTROL_SCRIPT_FAILURE: 1060316,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_CLASS_NOT_FOUND: 1060317,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_SESSION_VOID: 1060318,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_LSP_GATEWAY_UNREACHABLE: 1060319,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_DDL_MISMATCH: 1060320,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_INVALID_FTP_INFO: 1060321,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_SESSION_FULL: 1060322,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_INVALID_GATHERING_PASSWORD: 1060323,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_WITHOUT_PARTICIPATION_PERIOD: 1060324,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_COMMUNITY_CREATION_MAX: 1060325,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_COMMUNITY_PARTICIPATION_MAX: 1060326,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_DENIED_BY_PARTICIPANTS: 1060327,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RENDEZVOUS_PARTICIPANT_IN_BLACKLIST: 1060328,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_PYTHONCORE_EXCEPTION: 1060401,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_PYTHONCORE_TYPE_ERROR: 1060402,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_PYTHONCORE_INDEX_ERROR: 1060403,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_PYTHONCORE_INVALID_REFERENCE: 1060404,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_PYTHONCORE_CALL_FAILURE: 1060405,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_PYTHONCORE_MEMORY_ERROR: 1060406,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_PYTHONCORE_KEY_ERROR: 1060407,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_PYTHONCORE_OPERATION_ERROR: 1060408,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_PYTHONCORE_CONVERSION_ERROR: 1060409,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_PYTHONCORE_VALIDATION_ERROR: 1060410,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_UNKNOWN: 1060501,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_CONNECTION_FAILURE: 1060502,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_INVALID_URL: 1060503,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_INVALID_KEY: 1060504,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_INVALID_URL_TYPE: 1060505,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_IO_ERROR: 1060507,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_TIMEOUT: 1060508,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_INCORRECT_REMOTE_AUTHENTICATION: 1060510,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_SERVER_REQUEST_ERROR: 1060511,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_CONGESTED_END_POINT: 1060513,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_SOCKET_OVERFLOW: 1060518,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_UNSUPPORTED_NAT: 1060519,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_DNS_RESOLUTION_FAIL: 1060520,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_PROXY_FAIL: 1060521,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_BUFFER_LEFTOVER: 1060522,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_BUFFER_FULL: 1060523,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_RESOURCE_NOT_FOUND: 1060524,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_TEMP_SERVER_ERROR: 1060525,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_PERM_SERVER_ERROR: 1060526,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_SERVER_MAINTENANCE: 1060527,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_SEND_BUFFER_FULL: 1060528,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TRANSPORT_INVALID_STATION: 1060529,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_STATION_NOT_REACHED: 1060602,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_TARGET_STATION_DISCONNECT: 1060603,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_LOCAL_STATION_LEAVING: 1060604,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_OBJECT_NOT_FOUND: 1060605,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_INVALID_ROLE: 1060606,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_CALL_TIMEOUT: 1060607,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_RMC_DISPATCH_FAILED: 1060608,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_MIGRATION_IN_PROGRESS: 1060609,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_NO_AUTHORITY: 1060610,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_NO_TARGET_STATION_SPECIFIED: 1060611,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_JOIN_FAILED: 1060612,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_JOIN_DENIED: 1060613,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_CONNECTIVITY_TEST_FAILED: 1060614,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_UNKNOWN: 1060615,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_UNFREED_REFERENCES: 1060616,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_JOB_TERMINATION_FAILED: 1060617,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_INVALID_STATE: 1060618,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_FAULT_RECOVERY_FATAL: 1060619,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_FAULT_RECOVERY_JOB_STATUS_FAIL: 1060620,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_STATION_INCONSISTENCY: 1060621,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_ABNORMAL_MASTER_STATE: 1060622,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DOCORE_VERSION_MISMATCH: 1060623,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_FPD_NOT_INITIALIZED: 1060702,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_FILE_IO_ERROR: 1060720,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_AUTHENTICATION_NAS_AUTHENTICATE_ERROR: 1060801,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_AUTHENTICATION_TOKEN_PARSE_ERROR: 1060802,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_AUTHENTICATION_HTTP_CONNECTION_ERROR: 1060803,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_AUTHENTICATION_HTTP_DNS_ERROR: 1060804,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_AUTHENTICATION_HTTP_GET_PROXY_SETTING: 1060805,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_AUTHENTICATION_TOKEN_EXPIRED: 1060806,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_AUTHENTICATION_VALIDATION_FAILED: 1060807,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_AUTHENTICATION_INVALID_PARAM: 1060808,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_AUTHENTICATION_PRINCIPAL_ID_UNMATCHED: 1060809,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_AUTHENTICATION_MOVE_COUNT_UNMATCH: 1060810,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_AUTHENTICATION_UNDER_MAINTENANCE: 1060811,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_AUTHENTICATION_UNSUPPORTED_VERSION: 1060812,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_AUTHENTICATION_SERVER_VERSION_IS_OLD: 1060813,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_FACADE_NOT_INITIALIZED: 1060901,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_NOT_ENOUGH_MEM: 1060902,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_ILLEGAL_ACCESS: 1060903,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_WIN32_ERROR: 1060904,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_INDEX_OOB: 1060905,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_DUPLICATED_KEY: 1060906,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_ITEM_NOT_DELETED: 1060907,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_ITEM_NOT_FOUND: 1060908,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_END_OF_COLLECTION: 1060909,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_OBJ_NOT_INIT: 1060910,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_NOT_IMPLEMENTED: 1060911,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_OUT_OF_ID: 1060912,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_INTERNAL: 1060913,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_TIMEOUT: 1060914,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_CHILDPROCESS_FAILED: 1060915,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_INVALID_OPERATION: 1060916,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_MULTIPLE_INSTANCES: 1060917,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_MULTIPLE_EXCEPTION_HANDLER: 1060918,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_EXPIRED: 1060919,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_OUT_OF_RANGE: 1060920,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_ASSERTION_FAILED: 1060921,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_DEADLOCK_DETECTED: 1060922,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_NOT_INITIALIZED: 1060923,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_INVALID_PARAMETER: 1060924,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_IO_ERROR: 1060925,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_INVALID_PRODUCT_KEY: 1060926,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_BUFFER_EXTRACTION_OVERFLOW: 1060927,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_INVALID_WAIT: 1060928,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_ACCESS_DENIED: 1060929,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_OP_DENIED: 1060930,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_GEN_INVALID_OPERATION_WARNING: 1060931,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_TRANSPORT_SOCKET_SEND_WARNING: 1060936,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_INVALID_ON_DUPLICA: 1060951,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_INVALID_ON_MASTER: 1060952,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_INVALID_PROPERTY_TRANSITION: 1060953,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_UNDEFINED_CALLBACK: 1060954,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_DO_NOT_FOUND: 1060955,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_INVALID_PARAMETER: 1060956,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_CANNOT_EMIGRATE: 1060957,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_INVALID_CONSTRUCTION: 1060958,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_ALREADY_PUBLISHED: 1060959,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_MISSING_DATASET_CALLBACK: 1060960,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_WKHANDLE_NOT_INITIALIZED: 1060961,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_WKHANDLE_WERE_CREATED: 1060962,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_MISMATCHED_DOCLASS: 1060963,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_WKHANDLE_EXISTS: 1060964,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_CANNOT_PUBLISH: 1060965,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_STATION_NOT_FOUND: 1060966,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_DC_CLUSTER_REDEFINITION: 1060967,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_DC_CLUSTER_JOIN_DENIED: 1060968,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_DC_CLUSTER_JOIN_FAILED: 1060969,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_DC_MISMATCHED_BARRIER_ID: 1060970,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_DC_BARRIER_TIMEOUT: 1060971,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_DC_CLUSTER_NOT_INITIALIZED: 1060972,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_DC_NOT_CLUSTER_MASTER: 1060973,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_DC_INVALID_STATE_TRANSITION: 1060974,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_DC_CLUSTER_ALREADY_INITIALIZED: 1060975,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_TRANSPORT_NOT_FOUND: 1060976,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_SYSTEMERROR_OBJDUP_RELIABLE_SEND_WARNING: 1060978,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_OUT_OF_BOUNDARY: 1061001,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_DUPLICATED_KEY: 1061002,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_ITEM_NOT_FOUND: 1061003,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_END_OF_COLLECTION: 1061004,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_OBJ_NOT_INIT: 1061005,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_NOT_IMPLEMENTED: 1061006,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_TIMEOUT: 1061007,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_INVALID_OPERATION: 1061009,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_MULTIPLE_INSTANCES: 1061010,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_OUT_OF_RANGE: 1061012,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_INVALID_PARAMETER: 1061013,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_BUFFER_EXTRACTION_OVERFLOW: 1061015,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_INVALID_WAIT: 1061016,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_ACCESS_DENIED: 1061017,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_ROLE_MISMATCH: 1061020,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_INVALID_OPERATION_WARNING: 1061021,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RELIEABLE_SEND_WARNING: 1061023,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_OBJDUP_DO_NOT_FOUND: 1061024,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_OUT_OF_MEMORY: 1061026,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_SOCKET_SEND_WARNING: 1061027,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_INVALID_NEW_STATION: 1061028,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RANKING_NOT_INITIALIZED: 1061101,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RANKING_INVALID_ARGUMENT: 1061102,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RANKING_REGISTRATION_ERROR: 1061103,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RANKING_NOT_FOUND: 1061105,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RANKING_INVALID_SCORE: 1061106,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RANKING_INVALID_DATA_SIZE: 1061107,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RANKING_PERMISSION_DENIED: 1061109,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RANKING_UNKNOWN: 1061110,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DESCRIPTION_RANKING_NOT_IMPLEMENTED: 1061111,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DATA_STORE_UNKNOWN_ERROR: 1061201,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DATA_STORE_INVALID_ARGUMENT: 1061202,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DATA_STORE_NO_ACCESS_RIGHTS: 1061203,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DATA_STORE_ID_NOT_FOUND: 1061204,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DATA_STORE_OBJECT_UNDER_REVIEW: 1061206,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DATA_STORE_OBJECT_EXPIRED: 1061207,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DATA_STORE_INVALID_CHECK_TOKEN: 1061208,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DATA_STORE_SYS_FILE_LOAD_FAIL: 1061209,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DATA_STORE_BATCH_PROCESS_COUNT_EXCEEDED: 1061210,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            NEX_DATA_STORE_OPERATION_NOT_ALLOWED: 1061211,
            /**
             * @type Number
             * @since 1.7
             * @static @constant
             */
            NEX_DATA_STORE_VALUE_DOES_NOT_MATCH: 1061213,
            /**
             * @type Number
             * @since 1.0
             * @static @constant
             */
            RESTRICTED_BY_PARENTAL_CONTROL: 1022911,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_ALREADY_INITIALIZED: 1240111,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_ACP_ERROR: 1239005,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_BALANCE_EXCEED_MAX_CASH: 1231301,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_BALANCE_NO_ADD_METHOD: 1231300,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_CC_INVALID_CARD: 1231310,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_CC_PASSWORD_IS_SAME_STRING: 1231312,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_CC_TWO_PASSWORD_NOT_MATCH: 1231311,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_CONTENT_ALREADY_INSTALLED: 1231004,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_DATATITLE_CANNOT_LOCK: 1239007,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_ERROR_CODE_REDEEMABLE_ITEM_WRONG_PAIR: 1231103,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_EXCEED_MAX_CASH: 1231011,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_FS_NOT_FOUND: 1239002,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_FS_PERMISSION_ERROR: 1239003,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_FS_UNKNOWN: 1239004,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_NEEDS_NETWORK_UPDATE: 1239008,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_NFC_DRC_NOT_CONNECTED: 1231321,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_NFC_GW_SERVER_NETWORK_ERROR: 1231324,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_NFC_GW_SERVER_UNDER_MAINTENANCE: 1231323,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_NFC_INITIALIZE_FAILED: 1231322,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_NFC_REQUEST_FAILED: 1231320,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_REDEEMABLE_ITEM_ALREADY_HAVE_RIGHT: 1231102,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_REDEEMABLE_ITEM_NOT_FOUND: 1231100,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_REDEEMABLE_ITEM_TOO_MANY: 1231101,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_SPM_EXT_STORAGE_NOT_RESOLVED: 1239000,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_SPM_GET_STORAGEINFO_FAILE: 1239001,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_STORAGE_FULL: 1231010,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_TASK_IS_FULL: 1231003,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_TASK_MUST_FINISH_INSTALL: 1231000,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_TASK_STATE_ERROR: 1231001,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_TASK_VERSION_OLD: 1231002,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_UPDATE_DATATITLE_NONE: 1231200,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_UPDATE_DATATITLE_TASK_VERSION_OLD: 1231202,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_UPDATE_DATATITLE_TOO_MANY_UPDATES: 1231201,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_APPLET_VCTL_UNKNOWN: 1239006,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CANCELED: 1240211,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CASH_DOWNLOAD_CODE: 1240243,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_ABORTED_BY_CALLBACK: 1241042,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_AGAIN: 1241081,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_BAD_CONTENT_ENCODING: 1241061,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_BAD_DOWNLOAD_RESUME: 1241036,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_BAD_FUNCTION_ARGUMENT: 1241043,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_CHUNK_FAILED: 1241088,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_CONV_FAILED: 1241075,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_CONV_REQD: 1241076,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_COULDNT_CONNECT: 1241007,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_COULDNT_RESOLVE_HOST: 1241006,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_COULDNT_RESOLVE_PROXY: 1241005,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_FAILED_INIT: 1241002,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_FILE_COULDNT_READ_FILE: 1241037,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_FUNCTION_NOT_FOUND: 1241041,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_GOT_NOTHING: 1241052,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_HTTP_POST_ERROR: 1241034,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_HTTP_RETURNED_ERROR: 1241022,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_INTERFACE_FAILED: 1241045,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_NOT_BUILT_IN: 1241004,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_NSSL_NO_CTX: 1241089,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_OPERATION_TIMEDOUT: 1241028,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_OUT_OF_MEMORY: 1241027,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_PARTIAL_FILE: 1241018,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_PEER_FAILED_VERIFICATION: 1241051,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_QUOTE_ERROR: 1241021,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_RANGE_ERROR: 1241033,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_READ_ERROR: 1241026,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_RECV_ERROR: 1241056,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_REMOTE_ACCESS_DENIED: 1241009,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_REMOTE_FILE_NOT_FOUND: 1241078,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_RTSP_CSEQ_ERROR: 1241085,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_RTSP_SESSION_ERROR: 1241086,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_SEND_ERROR: 1241055,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_SSH: 1241079,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_SSL_CACERT: 1241060,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_SSL_CACERT_BADFILE: 1241077,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_SSL_CERTPROBLEM: 1241058,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_SSL_CIPHER: 1241059,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_SSL_CONNECT_ERROR: 1241035,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_SSL_CRL_BADFILE: 1241082,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_SSL_ENGINE_NOTFOUND: 1241053,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_SSL_ENGINE_SETFAILED: 1241054,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_SSL_ISSUER_ERROR: 1241083,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_SSL_SHUTDOWN_FAILED: 1241080,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_TOO_MANY_REDIRECTS: 1241047,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_UNKNOWN_OPTION: 1241048,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_UNSUPPORTED_PROTOCOL: 1241001,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_UPLOAD_FAILED: 1241025,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_URL_MALFORMAT: 1241003,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_CURL_WRITE_ERROR: 1241023,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_DOWNLOAD_CART_ALREADY_ADDED: 1240282,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_DOWNLOAD_CART_FULL: 1240281,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_ESHOP_NOT_INITIALIZED: 1240221,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_EXCLUDED: 1240212,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INTERNAL_ERROR_AOC_TITLE_INFO: 1240071,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INTERNAL_ERROR_MCP_CONTENT: 1240063,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INTERNAL_ERROR_MCP_HANDLE: 1240061,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INTERNAL_ERROR_MCP_TICKET: 1240066,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INTERNAL_ERROR_MCP_TITLE_VERSION: 1240062,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INTERNAL_ERROR_OTHER: 1240099,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INTERNAL_ERROR_SYSAPP: 1240051,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INVALID_ARGUMENT: 1240121,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INVALID_COUNTRY: 1240001,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INVALID_DATA: 1240124,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INVALID_LANGUAGE: 1240002,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INVALID_META: 1240003,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INVALID_MODULE: 1240122,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INVALID_RESPONSE: 1240302,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INVALID_SESSION: 1240123,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_INVALID_XML: 1240301,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_ITEM_ALREADY_INSTALLED: 1240260,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_ITEM_ALREADY_PURCHASED: 1240253,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_ITEM_DOWNLOAD_CODE: 1240242,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_ITEM_NOT_PURCHASED: 1240252,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_ITEM_NOT_REDEEMABLE: 1240261,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_ITEM_NOT_SOLD: 1240259,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_ITEM_PARTIALLY_PURCHASED: 1240254,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_ITEM_UNIQUE_ID_MISMATCH: 1240251,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_ITEM_UNRELEASED: 1240258,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_NEEDS_NETWORK_UPDATE: 1240222,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_NOT_CONNECTED: 1240202,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_NOT_FOUND: 1240201,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_NOT_INITIALIZED: 1240101,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_NOT_IN_FOREGROUND: 1240103,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_NOT_IN_SERVICE: 1240223,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_NOT_LOGGED_IN: 1240102,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_NOT_REDEEMABLE_ITEM_DOWNLOAD_CODE: 1240241,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_OTHER_PLATFORM_DOWNLOAD_CODE: 1240249,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_OUT_OF_MEMORY: 1240131,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_OUT_OF_REQUEST_BUFFER: 1240132,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_SERVICE_CLOSED: 1240304,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_SHOPPING_CART_ALREADY_ADDED: 1240272,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_SHOPPING_CART_FULL: 1240271,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_SHOPPING_CART_PARTIALLY_ADDED: 1240273,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_TITLE_DOWNLOAD_CODE: 1240244,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_UNDER_MAINTENANCE: 1240303,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECOMMERCE_UNEXPECTED_RESPONSE: 1240399,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECS_EXCEEDS_SERVICE_CAP: 1096634,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECS_ITEM_ALREADY_PURCHASED: 1096626,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECS_NEW_TICKET_ONLY: 1096635,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ECS_REFID_ERROR: 1096678,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_ACCOUNT_NOT_REGISTERED: 1093550,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_AKINDO_MAINTENANCE: 1093698,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_AKINDO_SEVICE_CLOSED: 1093699,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_AKINDO_UNEXPECTED_LOAD_ERROR: 1093697,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_AUTHORIZATION_HEADER_REQUIRED: 1093501,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_BALANCE_REQUIRED: 1093520,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_CURRENT_BALANCE_NOT_MATCH: 1093554,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_DECRIPT_EC_TOKEN_FAILED: 1093533,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_EC_SERVICE_TOKEN_REQUIRED: 1093524,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_EC_TOKEN_EXPIRED: 1093534,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_EC_TOKEN_PID_UNMATCH: 1093541,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_EXT_TRANSACTION_ID_REQUIRED: 1093539,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_INTERNAL_SERVER_ERROR: 1093560,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_INVALID_BALANCE: 1093521,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_INVALID_EC_SERVICE_TOKEN: 1093525,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_INVALID_EXT_TRANSACTION_ID: 1093540,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_INVALID_ITEM_CODE: 1093515,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_INVALID_ITEM_NAME: 1093523,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_INVALID_LANG_CODE: 1093526,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_INVALID_LIMIT: 1093528,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_INVALID_OFFSET: 1093527,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_INVALID_PRICE_ID: 1093517,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_INVALID_PRINCIPAL_ID: 1093513,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_INVALID_REFERENCE_ID: 1093519,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_INVALID_TAX_LOCATION_ID_REGISTERED: 1093552,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_INVALID_TITLE_CODE: 1093511,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_ITEM_CODE_REQUIRED: 1093514,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_ITEM_NAME_REQUIRED: 1093522,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_ITEM_NOT_EXIST: 1093532,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_NNAS_ACCESS_ERROR: 1093561,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_NOT_ENOUGH_BALANCE: 1093553,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_NO_AVAILABLE_PRICING: 1093536,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_PRICE_ID_EXPIRED: 1093538,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_PRICE_ID_REQUIRED: 1093516,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_PRINCIPAL_ID_REQUIRED: 1093512,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_REFERENCE_ID_REQUIRED: 1093518,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_SIGNATURE_REQUIRED: 1093529,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_TAX_LOCATION_ID_NOT_REGISTERED: 1093551,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_TITLE_CODE_AUTH_FAILED: 1093502,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_TITLE_CODE_REQUIRED: 1093510,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_TITLE_NOT_AVAILABLE: 1093531,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_TITLE_NOT_EXIST: 1093530,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_UNAUTHORIZED_TITLE_ACCESS: 1093503,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_UNSUPPORTED_LANG_CODE: 1093537,
            /**
             * @type Number
             * @since 1.8.1
             * @static @constant
             */
            ESHOP_REST_VERIFY_SIGNATURE_FAILED: 1093535,
        };
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var SystemEvent = (function (_super) {
            __extends(SystemEvent, _super);
            /**
             * Defines events dispatched by the `{@link nwf.system.WiiUSystem}` class when Nintendo Web Framework generated notifications occur.
             *
             * @see {@link nwf.system.WiiUSystem}
             * @class nwf.events.SystemEvent
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function SystemEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(SystemEvent.prototype, "USBKEYBOARD_DISCONNECTED", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when the USB Keyboard is disconnected.
                 *
                 * _Note: #USBKEYBOARD_DISCONNECTED or #USBKEYBOARD_CONNECTED will fire once immediately when a listener is added. This is to handle cases where the USB Keyboard was attached or removed while the system was in a state that could not detect the change._
                 *
                 * @property {String} [USBKEYBOARD_DISCONNECTED='usbKeyboardDisconnected']
                 * @since 1.0
                 * @static @constant
                 */
                // public static USBKEYBOARD_DISCONNECTED: string = 'usbKeyboardDisconnected';
                get: function () {
                    return 'usbKeyboardDisconnected';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SystemEvent.prototype, "USBKEYBOARD_CONNECTED", {
                /**
                 * Dispatched when the USB Keyboard is connected.
                 *
                 * _Note: #USBKEYBOARD_DISCONNECTED or #USBKEYBOARD_CONNECTED will fire once immediately when a listener is added. This is to handle cases where the USB Keyboard was attached or removed while the system was in a state that could not detect the change._
                 *
                 * @property {String} [USBKEYBOARD_CONNECTED='usbKeyboardConnected']
                 * @since 1.0
                 * @static @constant
                 */
                // public static USBKEYBOARD_CONNECTED: string = 'usbKeyboardConnected';
                get: function () {
                    return 'usbKeyboardConnected';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SystemEvent.prototype, "PARENTAL_CONTROLS_SERVICE_RESTRICTED", {
                /**
                 * Dispatched if the application is a service application (not a game) and the Parental Controls are restricted.
                 * <p/> Service applications must listen for this event and, if it is fired, must display a dialog box about the content of the application.
                 * <p/> Then, using nwf.system.WiiUSystem, the Parental Control PIN must be checked before the user may continue.
                 * @property {String} [PARENTAL_CONTROLS_SERVICE_RESTRICTED='parentalControlServiceApplicationRestricted']
                 * @static @constant
                 * @since 1.2
                 */
                // public static PARENTAL_CONTROLS_SERVICE_RESTRICTED: string = 'parentalControlServiceApplicationRestricted';
                get: function () {
                    return 'parentalControlServiceApplicationRestricted';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SystemEvent.prototype, "FLUSH_STORAGE_COMPLETE", {
                /**
                 * Dispatched when the asynchronous storage flushing process has completed. This is started by calling `{@link nwf.system.WiiUSystem#flushStorageAsync}`.
                 * @property {String} [FLUSH_STORAGE_COMPLETE='flushStorageComplete']
                 * @static @constant
                 * @since 1.7
                 */
                // public static FLUSH_STORAGE_COMPLETE: string = 'flushStorageComplete';
                get: function () {
                    return 'flushStorageComplete';
                },
                enumerable: true,
                configurable: true
            });
            return SystemEvent;
        })(events.Event);
        events.SystemEvent = SystemEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var events;
    (function (events) {
        var SystemErrorEvent = (function (_super) {
            __extends(SystemErrorEvent, _super);
            /**
             * Defines events dispatched by the `{@link nwf.system.WiiUSystem}` class when the Nintendo Web Framework generates warnings, notifications and/or errors.
             *
             *      var wiiUSystem = nwf.system.WiiUSystem.getInstance();
             *      wiiUSystem.addEventListener( nwf.events.SystemErrorEvent.ERROR, onSystemError, this );
             *
             *      function onSystemError( evt ) {
             *          // Filter errors and handle based on severity and type
             *          // See nwf.system.SystemErrorLevel for the list of possible error severities
             *          // See nwf.system.SystemErrorType for a list of error categories
             *          if (evt.errorLevel === nwf.system.SystemErrorLevel.ERROR_LEVEL_FATAL || evt.errorLevel === nwf.system.SystemErrorLevel.ERROR_LEVEL_ERROR) {
             *              // Fatal and Error level errors should almost always be reported to the user
             *              switch (evt.errorType) {
             *                  // Catch Automatic Internet Connection Errors
             *                  case SystemErrorType.AC:
             *                      // Handle any connection errors from the system in `handleConnectionError()` below
             *                      handleConnectionError( evt );
             *                      break;
             *                  //catch any Common Messages
             *                  case SystemErrorType.CMN_MSG:
             *                      // Handle error range by type...
             *                      // In this case any common message from the system will be handled in `handleCommonMessages()` below
             *                      handleCommonMessages( evt );
             *                      break;
             *                  default:
             *                      // Handle all uncaught errors...
             *                      // Print error to console. errorText is localized by the system based on the user's selected language
             *                      console.log( '[SystemErrorEvent] errorType: ' + evt.errorType + '; errorText: ' + evt.errorText );
             *                      break;
             *              }
             *              // Exit the application if the error was fatal
             *              if (evt.errorLevel === nwf.system.SystemErrorLevel.ERROR_LEVEL_FATAL) {
             *                  wiiUSystem.returnToMenu();
             *              }
             *          } else {
             *              // Print other errors to console. errorText is localized by the system based on the user's selected language
             *              console.log( '[SystemErrorEvent] errorLevel: ' + evt.errorLevel + '; errorType: ' + evt.errorType + '; errorText: ' + evt.errorText );
             *              break;
             *          }
             *      }
             *
             *      function handleConnectionError( evt ) {
             *      // Handle specific error based on `errorCode`...
             *          if(evt.errorCode === SystemErrorCode.DESCRIPTION_NOT_FOUND_ACCESS_POINT){
             *              displayWithSysDialog( evt );
             *          }
             *      }
             *
             *      function handleCommonMessages( evt ) {
             *          // Handle specific error based on `errorCode`...
             *          if(evt.errorCode === SystemErrorCode.CMN_MSG_NGWORD_ACCEPTABLE){
             *              displayWithSysDialog( evt );
             *          }
             *      }
             *
             *      function displayWithSysDialog( evt ) {
             *          // Display message with nwf `Dialog` class
             *          // By passing the error the message is pre-formatted to pass Lotcheck
             *          // An application can decide to display the message without this dialog box,
             *          // But you will need to refer to the Wii U Guidelines for displaying errors
             *          nwf.ui.Dialog.displaySystemError( onUIDialogClose, evt.errorCode );
             *      }
             *
             *      function onUIDialogClose(evt) {
             *          console.log( '[menu-helper] onUIDialogClose() - System Dialog closed! User selected: ' + evt.user_select );
             *      }
             *
             * @see {@link nwf.system.WiiUSystem}
             * @see {@link nwf.system.SystemErrorCode}
             * @see {@link nwf.system.SystemErrorLevel}
             * @see {@link nwf.system.SystemErrorType}
             * @class nwf.events.SystemErrorEvent
             * @extends nwf.events.Event
             * @author Ryan Lynd
             * @author Shawn Gates
             */
            function SystemErrorEvent() {
                _super.call(this, '');
            }
            Object.defineProperty(SystemErrorEvent.prototype, "errorType", {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * System Message type. i.e. {@link nwf.system.SystemErrorType#OLV SystemErrorType.OLV}
                 *
                 * _Note: Only set when an nwf.events.SystemErrorEvent.ERROR is dispatched._
                 *
                 * @property {uint8} [errorType=null]
                 * @readonly
                 * @since 1.0
                 * @see nwf.system.SystemErrorType
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SystemErrorEvent.prototype, "errorCode", {
                /**
                 * Error code to be displayed with message.
                 *
                 * _Note: Only set when an nwf.events.SystemErrorEvent.ERROR is dispatched._
                 *
                 * @property {uint32} [errorCode=null]
                 * @readonly
                 * @since 1.0
                 * @see nwf.system.SystemErrorCode
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SystemErrorEvent.prototype, "errorText", {
                /**
                 * Localized error text to be displayed.
                 *
                 * _Note: Only set when an nwf.events.SystemErrorEvent.ERROR is dispatched._
                 *
                 * @property {String} [errorText=null]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SystemErrorEvent.prototype, "errorOrigin", {
                /**
                 * The type of function the error originated from (i.e., {@link nwf.system.SystemErrorType#OLV SystemErrorType.OLV}).
                 * If this is non-zero and doesn't match `errorType`, the error came from a different extension.
                 * Example: {@link nwf.mv.Miiverse#initialize Miiverse.initialize} fails to connect because the account is banned.
                 *
                 * _Note: Only set when an nwf.events.SystemErrorEvent.ERROR is dispatched._
                 *
                 * @property {uint8} [errorOrigin=0]
                 * @readonly
                 * @since 1.3
                 * @see nwf.system.SystemErrorType
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SystemErrorEvent.prototype, "errorSource", {
                /**
                 * The name of the function that caused the error.
                 *
                 * _Note: Only set when an nwf.events.SystemErrorEvent.ERROR is dispatched._
                 *
                 * @property {String} [errorSource=null]
                 * @readonly
                 * @since 1.3
                 */
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SystemErrorEvent.prototype, "errorLevel", {
                /**
                 * The severity of the error that occurred.
                 *
                 * _Note: Only set when an nwf.events.SystemErrorEvent.ERROR is dispatched._
                 *
                 * @property {Number} [errorLevel=nwf.system.SystemErrorLevel.ERROR_LEVEL_ERROR]
                 * @see nwf.system.SystemErrorLevel
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return nwf.system.SystemErrorLevel.ERROR_LEVEL_ERROR;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SystemErrorEvent.prototype, "ERROR", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Dispatched when Nintendo Web Framework generates warnings, notifications and/or errors occur.
                 * @property {String} [ERROR='error']
                 * @since 1.0
                 * @static @constant
                 */
                // public static ERROR: string = 'error';
                get: function () {
                    return 'error';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SystemErrorEvent.prototype, "CRASH", {
                /**
                 * Dispatched when Nintendo Web Framework detects a high probability of crashing due to memory consumption.
                 *
                 * This event warns developers that their application is consuming high amounts of memory and that more allocations could cause a title relaunch or a crash.
                 * Upon receiving this event we recommend that the application release unnecessary resources and save any necessary state information.
                 *
                 * @property {String} [CRASH='crash']
                 * @since 1.0
                 * @static @constant
                 */
                // public static CRASH: string = 'crash';
                get: function () {
                    return 'crash';
                },
                enumerable: true,
                configurable: true
            });
            return SystemErrorEvent;
        })(events.Event);
        events.SystemErrorEvent = SystemErrorEvent;
    })(events = nwf.events || (nwf.events = {}));
})(nwf || (nwf = {}));
/// <reference path="./Stats.ts" />
/// <reference path="./Performance.ts" />
/// <reference path="./Memory.ts" />
/// <reference path="./APD.ts" />
/// <reference path="./Config.ts" />
/// <reference path="./ErrorManager.ts" />
/// <reference path="./EShopSwitchParam.ts" />
/// <reference path="./WiiUSettingsScreen.ts" />
/// <reference path="./WiiULanguageCode.ts" />
/// <reference path="./WiiURegionCode.ts" />
/// <reference path="./WiiUCountryCode.ts" />
/// <reference path="./SystemErrorType.ts" />
/// <reference path="./SystemErrorLevel.ts" />
/// <reference path="./SystemErrorCode.ts" />
/// <reference path="../events/SystemEvent.ts" />
/// <reference path="../events/SystemErrorEvent.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.system
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var system;
    (function (system) {
        var WiiUSystem = (function (_super) {
            __extends(WiiUSystem, _super);
            /**
             * The `WiiUSystem` class provides access to system-level properties and methods.
             *
             * The `WiiUSystem` class dispatches the following events:
             *
             * - `nwf.events.SystemErrorEvent.CRASH`
             * - `nwf.events.SystemErrorEvent.ERROR`
             * - `nwf.events.SystemEvent.PARENTAL_CONTROLS_SERVICE_RESTRICTED`
             * - `nwf.events.SystemEvent.USBKEYBOARD_CONNECTED`
             * - `nwf.events.SystemEvent.USBKEYBOARD_DISCONNECTED`
             * - `nwf.events.SystemEvent.FLUSH_STORAGE_COMPLETE`
             *
             * @class nwf.system.WiiUSystem
             * @author Ryan Lynd
             * @author Shawn Gates
             * @author Cory O'Regan
             * @singleton
             * @extends nwf.events.EventDispatcher
             */
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * @private
             * The `new` method is not used to get an instance of the `WiiUSystem` singleton; use `#getInstance` instead.
             * @method constructor
             * @since 1.0
             */
            function WiiUSystem() {
                _super.call(this);
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * A Boolean value that enables or disables access to the HOME Menu.
                 *
                 * The Default value of `homeButtonEnabled` is `true`.
                 * If `homeButtonEnabled` is set to `true`, access to the HOME Menu will be granted.
                 * If `homeButtonEnabled` is set to `false`, access to the HOME Menu will be disabled.
                 * If the HOME Button is pressed when the HOME Menu is disabled, an icon will appear to indicate that access is denied.
                 * @property {Boolean} [homeButtonEnabled=true]
                 * @since 1.0
                 */
                this.homeButtonEnabled = false;
                /**
                 * Enables or disables system level screen capture on process switching.
                 *
                 * When an application is sent to the background the last frame is stored and other processes (applications) can access that frame as a screenshot. (by default)
                 *
                 * If `true` the system will store and make available a screenshot of the application for other applications (e.g., Miiverse and/or the HOME Menu). When `false` this feature is disabled.
                 *
                 * A developer may want to disable this feature if the content in the application is rights protected (e.g., paid-for video) or for any other reason.
                 *
                 * @property {Boolean} [screenCaptureEnabled=true]
                 * @since 1.0
                 */
                this.screenCaptureEnabled = false;
            }
            Object.defineProperty(WiiUSystem.prototype, "version", {
                //-------------------------------------------------------------------------
                // ACCESSORS
                //-------------------------------------------------------------------------
                /**
                 * Nintendo Web Framework version.
                 * @property {String} version
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return '1.4';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUSystem.prototype, "systemSDKVersion", {
                /**
                 * Native system SDK version.
                 * @property {String} systemSDKVersion
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return 'Cafe OS SDK Version 2.0.8.01 Build 39948';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUSystem.prototype, "consoleType", {
                /**
                 * Checks the console type. The uppermost four bits of the return value are used to distinguish production systems from development systems. The upper four bits are 0x0 in the production system and 0x1 in the development system. The other 28 bits show the minor revision number of the console.
                 * @property {int} consoleType
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return WiiUSystem.OS_CONSOLE_CAT_1_0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUSystem.prototype, "languageCode", {
                /**
                 * Current language setting as defined by the user in the Wii U settings.
                 * @property {int} languageCode
                 * @readonly
                 * @since 1.0
                 * @see nwf.system.WiiULanguageCode
                 */
                get: function () {
                    return 0; //nwf.system.WiiULanguageCode.ENGLISH;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUSystem.prototype, "regionCode", {
                /**
                 * Current region setting of the console. Not configurable by the user.
                 * @property {int} regionCode
                 * @readonly
                 * @since 1.0
                 * @see nwf.system.WiiURegionCode
                 */
                get: function () {
                    return 0; //nwf.system.WiiURegionCode.NORTH_AMERICA;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUSystem.prototype, "countryCode", {
                /**
                 * Current country setting as defined by the user in the Wii U settings.
                 * @property {int} countryCode
                 * @readonly
                 * @since 1.0
                 * @see nwf.system.WiiUCountryCode
                 */
                get: function () {
                    return 0; //nwf.system.WiiUCountryCode.UNITED_STATES;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUSystem.prototype, "parentalControlEnabled", {
                /**
                 * Returns `true` when "Use Parental Control" is set in system config setting file, or `false` if it is not.
                 * @property {Boolean} [parentalControlEnabled=false]
                 * @readonly
                 * @since 1.0
                 */
                get: function () {
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUSystem.prototype, "reloadCount", {
                /**
                 * Number of times `#reloadTitle` has been used to  reinitialize the application.
                 * If `0`, then the application is in a first-run state.
                 * @property {int} reloadCount
                 * @readonly
                 * @since 1.6
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Exits the application and returns to the Wii U Menu.
             *
             * _Note: If the Wii U Menu isn't installed on the system, this function will simply open the HOME Menu._
             * @method returnToMenu
             * @since 1.0
             */
            WiiUSystem.prototype.returnToMenu = function () {
                // console.log('[WiiUSystem] returnToMenu()');
            };
            /**
             * This API can be used to restart the current title with new parameters.
             *
             * Arguments passed to this function will be returned as an array of strings when the title is reloaded and #getSystemArgs is called.
             * @see nwf.system.WiiUSystem.getSystemArgs
             * @param {Array} [varArgs] Array of argument strings to pass to the title when relaunched.
             * @since 1.0
             */
            WiiUSystem.prototype.relaunchTitle = function (args) {
                // console.log('[WiiUSystem] relaunchTitle()');
            };
            /**
             * Reloads and reinitializes the current application internally without returning to the Wii U system. Upon reload, the initial page(s) specified as the start page(s) will be loaded.
             *
             * __Note:__ _This function is intended to be used as a last resort to reclaim memory in exceptional situations when it's not possible to proactively manage memory. It is not appropriate for use in normal operation, such as returning to the title screen._
             *
             * This completely destroys all existing WebViews along with all application memory. The network connection will also be reinitialized and it will be necessary to reconnect to any Nintendo services.
             *
             * For applications with extreme and inevitable memory constraints, it's recommended to call this function either as necessary when memory is running low (which can be monitored with `nwf.system.Memory.getMemoryStats`) or preemptively when transitioning between major application modes.
             *
             * This is the equivalent of using the Restart command (Shift+F5) in the Dashboard.
             * @param  {uint16} [fadeDelay=1000] Controls the number of milliseconds to fade the current displays before reloading the title. Min 0. Max 10000.
             * @param  {Object} [startPage={}] Specifies what page(s) to load after the reload completes. If not provided then the default start pages will be used.
             * @param  {String} [startPage.gp=null] The URI of the page to load on the GamePad display. An empty string will load a blank page.
             * @param  {String} [startPage.tv=null] The URI of the page to load on the TV display. An empty string will load a blank page.
             * @param  {String} [startPage.shared=null] The URI of the page to load on both displays using the Shared WebView. An empty string will load a blank page. __Note:__ _If this is specified then the `gp` and `tv` properties will be ignored.
             */
            WiiUSystem.prototype.reloadTitle = function (fadeDelay, startPage) {
                return null;
            };
            /**
             * System Jump parameters from the TV application.
             * @return {Object/null} Object containing the passed argument(s).
             * @return {String} return.url String passed from the TV Application. Max length is 2048 bytes.
             * @since 1.0
             */
            WiiUSystem.prototype.getVODArgs = function () {
                return { url: "jump string (cp_URL) max len 2048" };
            };
            /**
             * System parameters used when launching the application.
             *
             * Arguments passed to #relaunchTitle will be retrievable with this function.
             *
             * @see nwf.system.WiiUSystem.relaunchTitle
             * @return {Array[]} Array of arguments. _Note:This will be an empty array if no arguments are passed at launch._
             * @since 1.0
             */
            WiiUSystem.prototype.getSystemArgs = function () {
                return ["--arg1", "jump string"];
            };
            /**
             * Launches the Nintendo Browser to the page specified in the `url` parameter.
             *
             * The URL string needs to contain either the `http://` or `https://` protocol prefix. The maximum size for the string, including the prefix is 1024 characters.
             *
             * _Processing on the current application will be moved to the background while the Browser is open._
             *
             * @param {String} url The URL to the page the browser will open to. Max length is 1024 characters. An invalid URL will result in an error.
             * @return {uint32} The error code of the operation. 0 = Success.
             * @since 1.0
             */
            WiiUSystem.prototype.switchToBrowser = function (url) {
                return 0;
            };
            /**
             * Launches the eShop to the specified page. If no page is specified then the page corresponding to the current application will be loaded.
             *
             * <div style="color:#aa0000; font-weight:bold;">
             * Note: This method has changed significantly in version 1.8.1. It no longer accepts 4 parameters. Instead it accepts an <code>{@link nwf.system.EShopSwitchParam}</code> object that can specify the same information as the previous version but also gives access to many more options.
             * </div><br>
             *
             * @param {nwf.system.EShopSwitchParam} [target=null] An `{@link nwf.system.EShopSwitchParam}` object specifying which eShop page to switch to.
             * @return {Number} The error code of the operation. 0 = Success.
             * @since 1.8.1
             */
            WiiUSystem.prototype.switchToEShop = function (target) {
                return 0;
            };
            /**
             * Invokes the Account Management application for the current account.
             *
             * _Calling this API will cause the current application to exit._
             *
             * @return {uint32} The error code of the operation. 0 = Success.
             * @since 1.0
             * @removed 1.8.3
             */
            WiiUSystem.prototype.launchAccountManager = function () {
                return 0;
            };
            /**
             * Invokes the System Settings application. Deep link to a specific section of the settings with the `jumpTo` parameter.
             *
             * _Calling this API will cause the current application to exit._
             *
             * @param {nwf.system.WiiUSettingsScreen} jumpTo Specify which settings screen to jump to.
             * @return {uint32} The error code of the operation. 0 = Success.
             * @since 1.0
             */
            WiiUSystem.prototype.launchSystemSettings = function (jumpTo) {
                return 0;
            };
            /**
             * Passes a 4-digit number and verifies it against the system's PIN.
             * @param {String} value String representing a 4-digit PIN.
             * @returns {Boolean} Status of verification. Returns `true` if the PIN is verified, or `false` if not.
             * @since 1.0
             */
            WiiUSystem.prototype.verifyParentalControlPIN = function (value) {
                return true;
            };
            /**
             * Manually flushes the storage to the disk.
             *
             * When using `localStorage`, `localStorage.sync` needs to be called before manually flushing.
             *
             * __Note:__ _When automatic flushing is disabled, calling this or `#flushStorageAsync` is the only way to flush storage to the disk. Storage will also be flushed synchronously when the application exits._
             * @see localStorage.sync
             * @see nwf.system.WiiUSystem.flushStorageAsync
             * @since 1.4
             */
            WiiUSystem.prototype.flushStorage = function () {
            };
            /**
             * Manually flushes the storage to the disk. When this asynchronous process completes, a `{@link nwf.events.SystemEvent#FLUSH_STORAGE_COMPLETE}` event is dispatched.
             *
             * When using `localStorage`, `localStorage.sync` needs to be called before manually flushing.
             *
             * __Note:__ _When automatic flushing is disabled, calling this or `#flushStorage` is the only way to flush storage to the disk. Storage will also be flushed synchronously when the application exits._
             * @returns {Boolean} Returns `true` if the asynchronous flushing process has started succesfully, or returns `false` if there was an error.
             * @see localStorage.sync
             * @see nwf.system.WiiUSystem.flushStorage
             * @since 1.7
             * @async
             */
            WiiUSystem.prototype.flushStorageAsync = function () {
                return false;
            };
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Accesses an instance of the `WiiUSystem` singleton.
             * @method getInstance
             * @return {nwf.system.WiiUSystem}
             * @static
             * @since 1.0
             */
            WiiUSystem.getInstance = function () {
                if (!this.s_instance) {
                    this.s_instance = new WiiUSystem();
                    this.s_instance.constructor = null;
                }
                return this.s_instance;
            };
            /**
             * @method isSupported
             * Method to test for class availability.
             * @returns {Boolean} Returns `false` if the class is not supported, or `true` if the class is available.
             * @since 1.0
             * @static
             */
            WiiUSystem.isSupported = function () {
                return false;
            };
            Object.defineProperty(WiiUSystem.prototype, "OS_CONSOLE_RETAIL", {
                /**
                 * Console Type Retail.
                 * @property {uint32} [OS_CONSOLE_RETAIL=0x00000000]
                 * @since 1.0
                 * @static @constant
                 */
                get: function () {
                    return 0x00000000;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUSystem.prototype, "OS_CONSOLE_DEVELOPMENT", {
                //public static OS_CONSOLE_RETAIL: number      =   0x00000000;
                /**
                 * Console Type Development.
                 * @property {uint32} [OS_CONSOLE_DEVELOPMENT=0x10000000]
                 * @since 1.0
                 * @static @constant
                 */
                get: function () {
                    return 0x10000000;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WiiUSystem.prototype, "OS_CONSOLE_CAT_1_0", {
                //public static OS_CONSOLE_DEVELOPMENT: number =   0x10000000;
                /**
                 * Console Type Cat-Dev.
                 * @property {uint32} [OS_CONSOLE_CAT_1_0=0x13000048]
                 * @since 1.0
                 * @static @constant
                 */
                get: function () {
                    return 0x13000048;
                },
                enumerable: true,
                configurable: true
            });
            WiiUSystem.OS_CONSOLE_CAT_1_0 = 0x13000048;
            return WiiUSystem;
        })(nwf.events.EventDispatcher);
        system.WiiUSystem = WiiUSystem;
    })(system = nwf.system || (nwf.system = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var ui;
    (function (ui) {
        /**
         * Animation objects can be used to provide thread independent animations that persist across page transitions.
         * These animations can be used as loading or saving animations that will not be affected by JavaScript execution or page load times.
         *
         * The source image should be a single row animation strip that will be played sequentially from left to right.
         * Each frame of the strip should be equal to the `cellWidth` parameter passed to the `Animation` constructor.
         *
         *       // Declare the variable that will contain the Animation; it is declared as null and will be constructed after the sprite strip is loaded
         *       var animation = null;
         *
         *       // Animations are added to display objects, so the first step is to get an instance of the display
         *       var displayManager = nwf.display.DisplayManager.getInstance();
         *       var gamePadDisplay = displayManager.getGamePadDisplay();
         *
         *       // An HTMLImage element is needed as the source for the animation
         *       var img = new Image();
         *
         *       // Listen for the sprite strip image to be loaded to create the animation
         *       img.addEventListener('load', onImageLoad, true);
         *
         *       // Set the src property of the image object to start the loading process
         *       img.src = 'icon.png';
         *
         *       // Handler for the load event on the HTMLImageElement
         *       function onImageLoad(evt){
         *          // Construct an Animation object with the source image
         *          // The cellWidth parameter should be evenly divisible by the width of the sprite strip image.
         *          animation = new nwf.ui.Animation(img, 16, 16);
         *
         *          // Add the Animation to the display
         *          gamePadDisplay.addAnimation(animation, 500, 500);
         *       }
         *
         *
         * @class nwf.ui.Animation
         * @author Ryan Lynd
         * @author Nick Hahn
         * @author Nate Long
         * @author Shawn Gates
         * @see nwf.display.GamePadDisplay.addAnimation
         * @see nwf.display.TVDisplay.addAnimation
         * @see nwf.display.GamePadDisplay.translateAnimation
         * @see nwf.display.TVDisplay.translateAnimation
         * @see nwf.display.GamePadDisplay.removeAnimation
         * @see nwf.display.TVDisplay.removeAnimation
         * @see nwf.display.GamePadDisplay.removeAllAnimations
         * @see nwf.display.TVDisplay.removeAllAnimations
         */
        var Animation = (function () {
            //-------------------------------------------------------------------------
            // CONSTRUCTOR
            //-------------------------------------------------------------------------
            /**
             * Creates a new `Animation` object.
             *
             * @method constructor
             * @param {HTMLImageElement} img The animation strip to use.
             * @param {Number} cellWidth The width of a single animation frame.
             *                           If the `cellWidth` parameter is more than half the width of the source `HTMLImageElement`, the animation will be only one frame.
             * @param {Number} cellHeight The height of a single animation frame.
             * @param {Boolean} [loop = true] Specifies whether the animation should loop.
             * @param {Number} [loopStart = 0] The frame to begin the loop.
             * @param {Number} [loopEnd = 0] The frame to end the loop.
             */
            function Animation(img, cellWidth, cellHeight, loop, loopStart, loopEnd) {
                /**
                 * Playback rate of the animation normalized to 60 frames per second.
                 * When set to the default of `1`, the animation plays at 60 frames per second.
                 * Setting this to multiples of `1` will change the playback rate accordingly.
                 * For example, setting the value to `0.5` will make the animation play at 30 frames per second.
                 *
                 * @property {Number} playrate
                 * @since 1.8.1
                 */
                this.playrate = 1;
                return new nwf.ui.Animation(img, cellWidth, cellHeight, loop, loopStart, loopEnd);
            }
            Object.defineProperty(Animation.prototype, "cellHeight", {
                //-------------------------------------------------------------------------
                // PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * The `height` of a single cell of the animation.
                 *
                 * @property {Number} cellHeight
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Animation.prototype, "cellWidth", {
                /**
                 * The `width` of a single cell of the animation.
                 *
                 * @property {Number} cellWidth
                 * @see `#frameCount`
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Animation.prototype, "frameCount", {
                /**
                 * The number of frames in the animation.
                 * This is determined by dividing the total width of the source image by the `#cellWidth`.
                 *
                 * @property {Number} frameCount
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Animation.prototype, "looping", {
                /**
                 * Sets whether or not the animation will loop.
                 * This is set by the `loop` parameter when constructing an `Animation` object.
                 *
                 * @property {Boolean} looping
                 * @readonly
                 * @since 1.8.1
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            return Animation;
        })();
        ui.Animation = Animation;
    })(ui = nwf.ui || (nwf.ui = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    var ui;
    (function (ui) {
        var Dialog = (function () {
            function Dialog() {
            }
            Object.defineProperty(Dialog.prototype, "DISPLAY_TV", {
                /**
                 * Class for displaying and formatting system dialog boxes.
                 *
                 * @class nwf.ui.Dialog
                 * @author Ryan Lynd
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // STATIC PUBLIC CONSTANTS
                //-------------------------------------------------------------------------
                /**
                 * Constant for displaying the dialog box on the TV display.
                 * @property {Number} [DISPLAY_TV=0]
                 * @static @constant
                 * @since 1.0
                 */
                // public static DISPLAY_TV: number = 0;
                get: function () {
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Dialog.prototype, "DISPLAY_GAMEPAD", {
                /**
                 * Constant for displaying the dialog box on the GamePad display.
                 * @property {Number} [DISPLAY_GAMEPAD=1]
                 * @static @constant
                 * @since 1.0
                 */
                // public static DISPLAY_GAMEPAD: number = 1;
                get: function () {
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Dialog.prototype, "DISPLAY_ALL", {
                /**
                 * Constant for displaying the dialog box on all displays.
                 * @property {Number} [DISPLAY_ALL=3]
                 * @static @constant
                 * @since 1.0
                 */
                // public static DISPLAY_ALL: number = 3;
                get: function () {
                    return 3;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Dialog.prototype, "USER_BTN_1", {
                /**
                 * Constant returned in the callback object when the user selects custom button 1.
                 * @property {String} [USER_BTN_1='btn_1']
                 * @static @constant
                 * @since 1.0
                 */
                // public static USER_BTN_1: string = 'btn_1';
                get: function () {
                    return 'btn_1';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Dialog.prototype, "USER_BTN_2", {
                /**
                 * Constant returned in the callback object when the user selects custom button 2.
                 * @property {String} [USER_BTN_2='btn_2']
                 * @static @constant
                 * @since 1.0
                 */
                // public static USER_BTN_2: string = 'btn_2';
                get: function () {
                    return 'btn_2';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Dialog.prototype, "USER_OK", {
                /**
                 * Constant returned in the callback object when the user selects the OK button.
                 * @property {String} [USER_OK='ok']
                 * @static @constant
                 * @since 1.0
                 */
                // public static USER_OK: string = 'ok';
                get: function () {
                    return 'ok';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Dialog.prototype, "USER_CANCEL", {
                /**
                 * Constant returned in the callback object when the user selects the CANCEL button.
                 * @property {String} [USER_CANCEL='cancel']
                 * @static @constant
                 * @since 1.0
                 */
                // public static USER_CANCEL: string = 'cancel';
                get: function () {
                    return 'cancel';
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Dialog.prototype, "NONE", {
                /**
                 * Constant returned in the callback object when the `Dialog` is closed with `#closeDialog` from JavaScript.
                 * @property {String} [NONE='none']
                 * @static @constant
                 * @since 1.0
                 */
                // public static NONE: string = 'none';
                get: function () {
                    return 'none';
                },
                enumerable: true,
                configurable: true
            });
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Creates a custom Wii U Alert Dialog and displays it on the screen specified in the options object.
             * The results of the user input are passed in the arguments of the callback function when the user exits the dialog box.
             *
             *  __Note:__ _If an options object is not provided, the body will be 'undefined' and an 'OK' button wil be provided._
             *
             * @param {Function} callback Function to call when the dialog returns.
             * @param {Object} callback.output Object containing the results of user input.
             * @param {Number} callback.output.dialog_id The ID of the terminated dialog box.
             * @param {String} callback.output.user_select Determines whether the user selected Button 1 (left) or Button 2 (right) to terminate the dialog box.
             * @param {Object} [options=null] Optional parameters to set up the dialog box when it's invoked.
             * @param {String} [options.body=''] The text to display in the dialog box when it is invoked.
             * @param {String} [options.btn_1=''] The text to display on the first button. Max (24) characters.
             * @param {String} [options.btn_2=''] The text to display on the second button. Max (24) characters.
             * @param {Number} [options.display=nwf.ui.Dialog.DISPLAY_ALL] The screen on which to display the dialog box.
             * @param {Boolean} [pauseWebKit=false] When set to `true`, the dialog box pauses WebKit upon opening. When set to `false`, it does not.
             * @returns {Number} The ID of the Dialog.
             * @since 1.0
             * @static
             * @async
             */
            Dialog.prototype.displayAlert = function (callback, options, pauseWebKit) {
                return 0;
            };
            /**
             * Formats a system-dispatched error event and displays it on the screen for user confirmation. Errors are formated for Wii U Guidelines.
             * The results of the user input are passed in the arguments of the callback function when the user exits the dialog.
             * Refer to Wii U guidelines for how to properly handle system generated errors.
             *
             * _Can also be used to trigger common messages without a system dispatched event by passing in the error code of the message you would like displayed._
             *
             * @see {@link nwf.system.SystemErrorCode}
             * @param {Function} callback Function to call when the dialog box returns.
             * @param {Object} callback.output Object containing the results of user input.
             * @param {Number} callback.output.dialog_id The ID of the terminated dialog box.
             * @param {Number} callback.output.error_code The `systemErrorCode` passed to #displaySystemError.
             * @param {String} callback.output.user_select Determines whether the user selected Button 1 (left) or Button 2 (right) to terminate the dialog box.
             * @param {Number} systemErrorCode The system-dispatched error code to be displayed.
             * @param {Number} [display=nwf.ui.Dialog.DISPLAY_ALL] The screen on which to display the dialog box.
             * @param {Boolean} [pauseWebKit=false] When set to `true`, the dialog box pauses WebKit upon opening. When set to `false`, it does not. Warning: Some system error dialog boxes do not have any buttons. If Webkit is paused with a buttonless system error dialog box open, the user will be stuck on this screen.
             * @returns {Number} The ID of the Dialog.
             * @since 1.0
             * @static
             * @async
             */
            Dialog.prototype.displaySystemError = function (callback, systemErrorCode, display, pauseWebKit) {
                return 0;
            };
            /**
             * Removes a `Dialog` from the `Dialog` queue.
             *
             * If not given the ID of a `Dialog` then the active (top) `Dialog` will be closed. If there are other `Dialog`s in the queue, the next `Dialog` will be displayed.
             * @param {Number} [dialog_id] The ID of the `Dialog` to close. If not provided then the active (top) `Dialog` will be closed.
             * @since 1.0
             * @static
             */
            Dialog.prototype.closeDialog = function (dialog_id) {
                return null;
            };
            return Dialog;
        })();
        ui.Dialog = Dialog;
    })(ui = nwf.ui || (nwf.ui = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.utils
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var utils;
    (function (utils) {
        //-------------------------------------------------------------------------
        // STATIC PUBLIC METHODS
        //-------------------------------------------------------------------------
        /**
         * Method to unpack a Wii U Texture format (.gtx) file containing a number of appended textures. Each texture is returned as a separate `HTMLImageElement` in the returned array.
         *
         *      // Use the nwf.io.File class to access a .gtx file.
         *      var gtxFile = new nwf.io.File( 'images.gtx', nwf.io.Directory.appRootDirectory );
         *
         *      gtxFile.addEventListener( nwf.events.IOEvent.READ_COMPLETE, function( evt ){
         *          // After the file is read, you can unpack it and use the `HTMLImageElements` contained within.
         *          var newImage = nwf.utils.unpackTextureBundle( evt.data )[0];
         *          document.body.appendChild( newImage );
         *      }, this );
         *
         *      gtxFile.read();
         *
         * @param {Blob} textureBundle The .gtx file data as a blob.
         * @returns {HTMLImageElement[]|null} Returns an array of `HTMLImageElements` each representing a separate texture form the file. If the data is bad `null` is returned.
         * @since 1.5
         */
        function unpackTextureBundle(textureBundle) {
            return [new Image()];
        }
        utils.unpackTextureBundle = unpackTextureBundle;
        /**
         * Custom log function for Nintendo Web Framework that will print the passed value to the Output Log directly without going through the Inspector console. These log messages will appear in mastered titles, unlike Inspector console log messages.
         *
         * __Note:__ _Debug log messages using this function must be removed prior to submission._
         *
         * __Note:__ _Unlike `console.log`, `nwf.utils.log` will not perform type coercion and must be passed a valid `String`._
         *
         * @param {String} value The value to be logged.
         * @since 1.8.2
         */
        function log(value) {
            console.log(value);
        }
        utils.log = log;
    })(utils = nwf.utils || (nwf.utils = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwf;
(function (nwf) {
    /**
     * @class nwf.utils
     * @author Ryan Lynd
     * @author Shawn Gates
     */
    var utils;
    (function (utils) {
        var ProfanityFilter = (function () {
            function ProfanityFilter() {
            }
            Object.defineProperty(ProfanityFilter.prototype, "MAX_TEXT_LENGTH", {
                /**
                 * Class that handles profanity filtering.
                 *
                 * You can use this class to refer to the profanity list installed on the system, and check whether a user input string contains profanity. Refer to the latest version of the UGC Guidelines for detailed information, including when to run the profanity filter.
                 *
                 * __Note:__ The Profanity Filter feature must be enabled in the Features page of Project Settings for the feature to work and for `nwf.utils.ProfanityFilter` to be defined.
                 *
                 * @class nwf.utils.ProfanityFilter
                 * @author Ryan Lynd
                 * @author Shawn Gates
                 */
                //-------------------------------------------------------------------------
                // STATIC PUBLIC CONSTANTS
                //-------------------------------------------------------------------------
                /**
                 * The maximum number of characters for text when checking text with `#maskProfaneWords()`.
                 * @property {Number} [MAX_TEXT_LENGTH=512]
                 * @static @constant
                 * @since 1.0
                 */
                // public static MAX_TEXT_LENGTH: number = 512;
                get: function () {
                    return 512;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProfanityFilter.prototype, "MAX_WORD_LENGTH", {
                /**
                 * The maximum number of characters per word when checking words with `#filterWordList()`.
                 * @property {Number} [MAX_WORD_LENGTH=64]
                 * @static @constant
                 * @since 1.0
                 */
                // public static MAX_WORD_LENGTH: number = 64;
                get: function () {
                    return 64;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProfanityFilter.prototype, "MAX_WORD_LIST_SIZE", {
                /**
                 * The maximum number of words that can be checked at one time when checking words with `#filterWordList()`.
                 * @property {Number} [MAX_WORD_LIST_SIZE=16]
                 * @static @constant
                 * @since 1.0
                 */
                // public static MAX_WORD_LIST_SIZE: number = 16;
                get: function () {
                    return 16;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ProfanityFilter.prototype, "maskAllCharacters", {
                //-------------------------------------------------------------------------
                // STATIC PUBLIC PROPERTIES
                //-------------------------------------------------------------------------
                /**
                 * Sets how to behave when text is checked and profanity is discovered.
                 *
                 * When set to `true`, the entire word is overwritten with asterisk symbols when profanity is discovered. In some cases, this can result in display of text outside of the area of the box on the screen. For example, the asterisk symbol "*" is wider than the letter "i" when a proportional font is being used, so when overwriting the text with asterisk symbols there is a risk that the result will extend beyond the screen.
                 *
                 * By specifying `false` for this property, when a profanity word is discovered only one asterisk symbol is displayed in substitution for that word, and as a result there is no danger to the integrity of the user interface.
                 *
                 * @property {Boolean} [maskAllCharacters=true]
                 * @static
                 * @since 1.0
                 */
                get: function () {
                    return true;
                },
                enumerable: true,
                configurable: true
            });
            // public static maskAllCharacters: boolean = true;
            //-------------------------------------------------------------------------
            // STATIC PUBLIC METHODS
            //-------------------------------------------------------------------------
            /**
             * Checks a number of specified words against the pattern list specified in the UGC guidelines to determine if strings contain profanity and should not be displayed. When profanity is found, that word is removed from the list and a new array of "clean" words is returned with the callback parameter.
             *
             * @param {Function} callback Function to call when the operation returns.
             * @param {Object} callback.output An object that stores the array of clean words.
             * @param {Array} callback.output.wordList An array of clean words.
             * @param {Array} wordList An array of words to check.
             * @see nwf.utils.ProfanityFilter.MAX_WORD_LENGTH
             * @see nwf.utils.ProfanityFilter.MAX_WORD_LIST_SIZE
             * @static
             * @async
             * @since 1.0
             */
            ProfanityFilter.prototype.filterWordList = function (callback, wordList) {
                return null;
            };
            /**
             * Checks the specified text against the pattern list specified in the UGC guidelines to determine if the string contains profanity and should be masked.
             *
             * When you call this function, the specified string is checked for the presence of profanity, and places where profanity appears are masked by asterisk "*" symbols.
             *
             * @param {Function} callback Function to call when the operation returns.
             * @param {Object} callback.output An object that stores the masked text.
             * @param {String} callback.output.text The scanned and masked text.
             * @param {String} text The text to check.
             * @see nwf.utils.ProfanityFilter.MAX_TEXT_LENGTH
             * @static
             * @async
             * @since 1.0
             */
            ProfanityFilter.prototype.maskProfaneWords = function (callback, text) {
                return null;
            };
            /**
             * Returns the number of numeric characters in the passed string.
             *
             * Since telephone numbers and certain other types of personal information take the form of strings that contain many numeric characters, there are restrictions on the number of numeric characters that can be displayed at the same time on the screen when users enter strings. Use this function to get the total number of numeric characters within strings on screen at once to avoid exceeding the restrictions within the UGC Guidelines.
             *
             * @param {String} text The text to check.
             * @returns {Number} Returns the number of numeric characters in the specified string. If the process fails, a negative value is returned.
             * @static
             * @since 1.0
             */
            ProfanityFilter.prototype.countNumbers = function (text) {
                return -1;
            };
            return ProfanityFilter;
        })();
        utils.ProfanityFilter = ProfanityFilter;
    })(utils = nwf.utils || (nwf.utils = {}));
})(nwf || (nwf = {}));
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
/**
 * Nintendo Web Framework specific customizations to APIs for the Web Audio API.
 *
 * Click here for more information on the <a href="https://developer.mozilla.org/en-US/docs/Web_Audio_API">Web Audio API</a>.
 *
 * @class webkitAudioContext
 */
var webkitAudioContext = webkitAudioContext;
window['_webkitAudioContext'] = new webkitAudioContext();
/**
    * Returns a Web Audio node that will route audio to the specified device's speakers.
    *
    *       // we need the name of the Wii U GamePad to play audio to its speakers, so we get an instance of it first
    *       var gamePad = nwf.input.WiiUGamePad.getController();
    *
    *       // create an audio context and buffer source node
    *       var context = new webkitAudioContext();
    *       var source = context.createBufferSource();
    *       // create a node that routes the audio to the Wii U GamePad's speakers
    *       var audioDeviceGamePad = context.createOutputDeviceNode(gamePad.name);
    *
    *       // connect the audio source to the device node and it to the destination
    *       source.connect(audioDeviceGamePad);
    *       audioDeviceGamePad.connect(context.destination);
    *
    *
    * @param {String} deviceName The string representation of the device that the audio should play from. This should be the `name` property of a `{@link nwf.input.WiiUGamePad WiiUGamePad}` instance, the name property of a `{@link nwf.input.WiiRemote WiiRemote}` or `"TV"`.
    * @return {AudioOutputDeviceNode} A Web Audio node that routes the sound to a specific device's speakers.
    * @since 1.3
    */
webkitAudioContext.prototype.createOutputDeviceNode = function createOutputDeviceNode(deviceName) {
    return new AudioOutputDeviceNode('GamePad');
};
/**
* Returns a Web Audio node that applies a reverb effect to the audio passing through it. This functions as a specific form of the ConvolverNode.
*
*       // create an audio context and buffer source node
*       var context = new webkitAudioContext();
*       var source = context.createBufferSource();
*       // create a node that applies a reverb effect
*       var reverb = context.createReverbNode();
*
*       // connect the audio source to the reverb node and it to the destination
*       source.connect(reverb);
*       reverb.connect(context.destination);
*
* @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode">MDN Convolver Node</a>
* @return {ReverbNode} A Web Audio node that applies a reverb effect.
* @since 1.4
*/
webkitAudioContext.prototype.createReverbNode = function createReverbNode() {
    return new ReverbNode();
};
/**
* Returns a Web Audio node that applies a chorus effect to the audio passing through it. This functions as a specific form of the ConvolverNode.
*
*       // create an audio context and buffer source node
*       var context = new webkitAudioContext();
*       var source = context.createBufferSource();
*       // create a node that applies a chorus effect
*       var chorus = context.createChorusNode();
*
*       // connect the audio source to the chorus node and it to the destination
*       source.connect(chorus);
*       chorus.connect(context.destination);
*
* @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode">MDN Convolver Node</a>
* @return {ChorusNode} A Web Audio node that applies a chorus effect.
* @since 1.4
*/
webkitAudioContext.prototype.createChorusNode = function createChorusNode() {
    return new ChorusNode();
};
/// <reference path="webkitAudioContext.ts" />
/**
 * Nintendo Web Framework specific extensions to the Web Audio API AudioBuffer.
 *
 * @class AudioBuffer
 */
var AudioBuffer = new webkitAudioContext().createBuffer(1, 30, 22050).__proto__;
//-------------------------------------------------------------------------
// PUBLIC METHODS
//-------------------------------------------------------------------------
/**
* Sets the channel data of a specific channel of an `AudioBuffer`.
*
* __Note:__ _If the length of the passed `{@link Float32Array Float32Array}` is different from the length of the current data, any other channels of the AudioBuffer will be cleared.
* This occurs because all of the channels of an `AudioBuffer` must be of the same length._
*
* @method setChannelData
* @param {Number} channel The audio channel to apply the data to.
* @param {Float32Array} data A `{@link Float32Array Float32Array}` of data to assign to the given channel of the buffer.
* @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer">MDN AudioBuffer</a>
* @since 1.4
*/
AudioBuffer.setChannelData = function setChannelData(channel, data) {
    return null;
};
/// <reference path="webkitAudioContext.ts" />
/**
 * Nintendo Web Framework specific extensions to the Web Audio API AudioBufferSourceNode.
 *
 * @class AudioBufferSourceNode
 */
var AudioBufferSourceNode = new webkitAudioContext().createBufferSource().__proto__;
//-------------------------------------------------------------------------
// PUBLIC PROPERTIES
//-------------------------------------------------------------------------
/**
* A value indicating, in samples, where in the AudioBuffer the restart of the play must happen. Its default value is 0.
*
* __Note:__ _When a wav file that has loop points already defined in it is loaded, this property defaults to the existing value._
*
* @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode">MDN AudioBufferSourceNode</a>
* @since 1.3
*/
AudioBufferSourceNode.loopStartSamples = 0;
/**
* A value indicating, in samples, where in the AudioBuffer the replay of the play must stop (and eventually loop again). Its default value is 0.
*
* __Note:__ _When a wav file that has loop points already defined in it is loaded, this property defaults to the existing value._
*
* @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode">MDN AudioBufferSourceNode</a>
* @since 1.3
*/
AudioBufferSourceNode.loopEndSamples = 0;
/**
* A value indicating, in seconds, where in the AudioBuffer the restart of the play must happen. Its default value is 0.
*
* __Note:__ _When a wav file that has loop points already defined in it is loaded, this property defaults to the existing value._
*
* @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode">MDN AudioBufferSourceNode</a>
* @since 1.3
*/
AudioBufferSourceNode.loopStart = 0;
/**
* A value indicating, in seconds, where in the AudioBuffer the replay of the play must stop (and eventually loop again). Its default value is 0.
*
* __Note:__ _When a wav file that has loop points already defined in it is loaded, this property defaults to the existing value._
*
* @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode">MDN AudioBufferSourceNode</a>
* @since 1.3
*/
AudioBufferSourceNode.loopEnd = 0;
/**
* A boolean value indicating whether the buffer source is currently playing audio.
*
* @since 1.8.1
*/
AudioBufferSourceNode.playing = false;
//-------------------------------------------------------------------------
// PUBLIC METHODS
//-------------------------------------------------------------------------
/**
 * Resets the `AudioBufferSourceNode` to its default state, allowing the `Node` to be re-used as if it was freshly created.  This will only succeed if the `Node` has finished playing.
 *
 * @returns {Boolean} `True` if the reset is successful. `False` if the `Node` has not finished playing.
 * @since 1.8.1
 */
AudioBufferSourceNode.resetAll = function resetAll() {
    return false;
};
/// <reference path="webkitAudioContext.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
// declare var GainNode;
/**
 * Nintendo Web Framework specific Web Audio API node that routes the sound to a specific device's speakers.
 *
 * @class AudioOutputDeviceNode
 */
var AudioOutputDeviceNode = (function () {
    function AudioOutputDeviceNode(device) {
        this._device = device;
        this._gain = new webkitAudioContext().createGain().gain;
    }
    Object.defineProperty(AudioOutputDeviceNode.prototype, "context", {
        //-------------------------------------------------------------------------
        // PUBLIC PROPERTIES
        //-------------------------------------------------------------------------
        /**
        * The <a href="https://developer.mozilla.org/en-US/Web/API/AudioContext">`webkitAudioContext`</a> that contains this node.
        * @property {webkitAudioContext} context=webkitAudioContext
        * @readonly
        * @since 1.3
        */
        get: function () {
            return webkitAudioContext;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AudioOutputDeviceNode.prototype, "device", {
        /**
        * The device this node is routing audio to.
        * @property {String} device=''
        * @see webkitAudioContext.createOutputDeviceNode
        * @readonly
        * @since 1.3
        */
        get: function () {
            return this._device;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AudioOutputDeviceNode.prototype, "gain", {
        /**
        * An AudioGain Web Audio interface that is similar to the gain of an <a href="https://developer.mozilla.org/en-US/docs/Web/API/GainNode">AudioGainNode</a>.
        * @property {Number} [gain=1]
        * @since 1.3
        */
        get: function () {
            return this._gain;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AudioOutputDeviceNode.prototype, "numberOfInputs", {
        /**
        * The number of inbound connections possible to this node.
        * @property {Number} numberOfInputs=1
        * @readonly
        * @since 1.3
        */
        get: function () {
            return 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AudioOutputDeviceNode.prototype, "numberOfOutputs", {
        /**
        * The number of outbound connections possible from this node.
        * @property {Number} numberOfOutputs=1
        * @readonly
        * @since 1.3
        */
        get: function () {
            return 1;
        },
        enumerable: true,
        configurable: true
    });
    return AudioOutputDeviceNode;
})();
/// <reference path="webkitAudioContext.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
/**
* Nintendo Web Framework specific extensions to the Web Audio API AudioContext.
*
* The ChorusNode produces the chorus effect normally created with the ConvolverNode.
*
* @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode">MDN ConvolverNode</a>
* @class ChorusNode
*/
var ChorusNode = (function () {
    function ChorusNode() {
        //-------------------------------------------------------------------------
        // PUBLIC PROPERTIES
        //-------------------------------------------------------------------------
        /**
        * This value specifies, in milliseconds, the delay after which the input signal is mixed back into itself. The valid range is between 5 and 15.
        *
        * @since 1.4
        */
        this.baseDelay = 5.0;
        /**
        * A value between 0 and 5, and specifies, in milliseconds, the maximum amount of time by which the base delay may be varied. When the base delay is at its boundary values (5 or 15 milliseconds), this parameter is ignored as there cannot be any variation.
        *
        * __Note:__ _This parameter is typically known as "chorus depth" in other products._
        *
        * @since 1.4
        */
        this.variation = 0.0;
        /**
        * A value between 500 and 10000 that specifies, in milliseconds, the period of the delay variation.
        *
        * __Note:__ _This parameter is typically referred to as "chorus rate" or "chorus speed" in other products._
        *
        * @since 1.4
        */
        this.period = 1000.0;
    }
    return ChorusNode;
})();
/// <reference path="webkitAudioContext.ts" />
/**
* Nintendo Web Framework specific extensions to the Web Audio API PannerNode.
*
* @class PannerNode
*/
var PannerNode = new webkitAudioContext().createPanner().__proto__;
//-------------------------------------------------------------------------
// PUBLIC PROPERTIES
//-------------------------------------------------------------------------
/**
* Controls the left to right position of the pan. 0.0 is left, 0.5 is center, 1.0 is right.
*
* @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PannerNode">MDN PannerNode</a>
* @since 1.4
*/
PannerNode.pan = 0.5;
/**
* Sets the mode to use with the `PannerNode`. The default works just like the normal specification.
*
* @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PannerNode">MDN PannerNode</a>
* @since 1.4
*/
PannerNode.panMode = 0;
/**
* Controls the front to back position of the pan. 0.0 is back, 1.0 is front.
*
* @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PannerNode">MDN PannerNode</a>
* @since 1.4
*/
PannerNode.surroundPan = 0;
/**
* In LISTENER mode uses the Listener node position and behaves the same as the normal specification.
*
* @property {number} [LISTENER=0]
* @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PannerNode">MDN PannerNode</a>
* @constant
* @since 1.4
*/
PannerNode.LISTENER = 0;
// PannerNode.get LISTENER(): number {
//     return 0;
// }
/**
* In DIRECT mode, the #pan and #surroundPan properties control the pan position directly.
*
* @property {number} [DIRECT=0]
* @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/PannerNode">MDN PannerNode</a>
* @constant
* @since 1.4
*/
PannerNode.DIRECT = 1;
// PannerNode.get DIRECT(): number {
//     return 1;
// }
/// <reference path="webkitAudioContext.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
/**
     * Nintendo Web Framework specific extensions to the Web Audio API AudioContext.
     *
     * The ReverbNode produces the reverb effect normally created with the ConvolverNode.
     *
     * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode">MDN ConvolverNode</a>
     * @class ReverbNode
     */
var ReverbNode = (function () {
    function ReverbNode() {
        //-------------------------------------------------------------------------
        // PUBLIC PROPERTIES
        //-------------------------------------------------------------------------
        /**
        * A value between 0.0 and 1.0. This value modulates the coefficients of the algorithm's all-pass filters and can be used to simulate the acoustic properties of the surfaces in a room.
        *
        * @since 1.4
        */
        this.coloration = 0.5;
        /**
        * A value between 0.0 and 1.0 that describes the level of interaction between channels. A value of 0.0 means that the channels are strictly independent; in other words, the reverberated signal derived from a given channel will be applied only to that channel. A value of 1.0 means that each channel contributes its reverberation signal to the other channels (as well as itself).
        *
        *__Note:__ _This property will not have any effect unless `#highQuality` is set to `true`._
        *
        * @since 1.4
        */
        this.crosstalk = 0.2;
        /**
        * A value between 0.0 and 1.0 that modulates the algorithm's high-frequency attenuation. When damping is 0.0, lower frequencies are prevalent and the reverberation becomes more pronounced. As damping approaches 1.0, high frequencies are present and the reverberation becomes less pronounced.
        *
        * @since 1.4
        */
        this.damping = 0.3;
        /**
        * Determines whether to use a high-quality reverberation effect. The `#crosstalk` effect is only available in high-quality mode.
        *
        * __Note:__ _The high-quality reverb effect takes significantly more proccesing power than the regular effect. It should only be used when needed._
        *
        * @since 1.4
        */
        this.highQuality = false;
        /**
        * A value between 0.0 and 1.0 that specifies the level of the reverberated signal as a fraction of the output. A value of zero means that only the original signal will be heard. A value of 1.0 means that only the reverberated signal will be heard.
        *
        * @since 1.4
        */
        this.mix = 0.6;
        /**
        * A value between 0.0 and 0.1 that specifies, in seconds, the length of time before the reverberation starts. This parameter is especially useful for large rooms as it simulates the latency for reflected sound waves. A larger value implies a larger distance between the emitter and reflecting surfaces.
        *
        * @since 1.4
        */
        this.preDelay = 0.0;
        /**
        * A value between 0.01 and 10.0 that specifies, in seconds, the length of time before the reverberation decays. A value of 0.01 seconds specifies a very small room while a value of 10.0 specifies a cathedral or stadium, for example.
        *
        * @since 1.4
        */
        this.reverbTime = 1.7;
    }
    return ReverbNode;
})();
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwfjs = nwfjs || {};
HTMLCanvasElement.prototype._getContext = HTMLCanvasElement.prototype.getContext;
/**
* Nintendo Web Framework specific customizations to APIs for the `<canvas>` element DOM API.
*
* @class HTMLCanvasElement
*/
nwfjs.HTMLCanvasElement = HTMLCanvasElement;
//-------------------------------------------------------------------------
// PUBLIC METHODS
//-------------------------------------------------------------------------
// Canvas Extensions
/**
 * Returns a drawing context on the canvas, or null if the context ID is not supported.
 * A drawing context lets you draw on the canvas. The only accepted contextId is currently "2d".
 *
 *
 *     // Get game canvas.
 *     var canvasEle = document.getElementById( '#myCanvas' );
 *
 *     // Init canvas render buffer with specific options.
 *     var config = {
 *         antialias: '2x',
 *         stencil: false,
 *         format: 'rgba5551',
 *         graphicsMemory: true,
 *         dirty: true
 *     };
 *     var ctx = canvasEle.getContext( '2d', config );
 *     if ( ctx ) {
 *         // draw...
 *     } else {
 *         // error context allocation failed!
 *     }
 *
 * ## Notes:
 * * Initializing the context with a higher `antialias` mode will slow the rendering performance and increase memory usage.
 *
 * @param {String} contextId Calling `getContext` with "2d" returns a `CanvasRenderingContext2D` Object
 * @param {Object} [options] Optional object to configure settings when creating the context.
 * @param {Boolean|String} [options.antialias=false] Anti-aliasing settings for this context. Available values: `false` (1x) | `true` (4x) | `"1x"` | `"2x"` | `"4x"` | `"8x"`
 * @param {Boolean} [options.stencil=true] When set to `true`, a stencil buffer is allocated. When `false` the context uses less memory but certain draw operations (sudh as `Path`) do not behave properly.
 * @param {String} [options.format='rgba8888'] Specifies the surface format for the color buffer. Accepts the following strings: 'rgba8888' | 'rgb565' | 'rgba5551' | 'rgba4444' | 'l8' | 'l8a8'
 * @param {Boolean} [options.graphicsMemory=false] If the value is `true`, the context buffers will attempt to allocate from MEM1, or try to allocate from MEM2 if MEM1 cannot be allocated from. If the value is `false`, the context buffers will attempt to allocate from MEM2. MEM1 (graphics memory) is fast, but space is limited. If allocation fails, a `null` reference will be returned.
 * @param {Boolean} [options.dirty=false] If the value is set to `true`, the entire context will be treated as "dirty" when compositing during a paint command. If the value is set to `false`, a dirty rect will be calculated so only areas of the context that have changed are re-composited during the paint cycle. Set to `true` when you know that the entire contents of the context will be re-rendered each frame.
 * @return {CanvasRenderingContext2D|null}
 * @since 1.4
 */
HTMLCanvasElement.prototype.getContext = function getContext(contextId, options) {
    return this._getContext(contextId);
};
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwfjs = nwfjs || {};
/**
 * CanvasExtensions: A collection of functions and properties that extend the `CanvasRenderingContext2D` 2D context.
 *
 * - {@link #imageSmoothingEnabled}
 * - {@link #drawImageStream}
 * - {@link #drawImageInstanced}
 * - {@link #setImageColor}
 *
 * CanvasShaders: An extension to the Canvas 2D context for working with custom GPU shaders.
 *
 * - {@link #colorShader}
 * - {@link #fontShader}
 * - {@link #patternShader}
 * - {@link #textureShader}
 * - {@link #loadShader}
 * - {@link #setVertexUniformFloat}
 * - {@link #setPixelUniformFloat}
 * - {@link #setPixelUniformTexture}
 *
 * @class CanvasRenderingContext2D
 */
nwfjs.CanvasRenderingContext2D = CanvasRenderingContext2D;
//-------------------------------------------------------------------------
// PUBLIC PROPERTIES
//-------------------------------------------------------------------------
// Canvas Extensions
/**
 * Controls the sampler used by the color and pattern shaders in the canvas 2D context.
 *
 * `true`: [DEFAULT] Sets the sampler to use bilinear interpolation. The edge case is automatically handled by the system.
 *
 * `false`: Sets the sampler to point (nearest neighbor).
 *
 *     ctx.imageSmoothingEnabled = false; // Images will scale with nearest neighbor (crisp edges).
 *
 * @type Boolean
 * @since 1.0
 */
CanvasRenderingContext2D.prototype.imageSmoothingEnabled = false;
// CANVAS Shaders
/**
 * Replaces the default color shader with the specified shader. Setting the value to 0 enables the default shader.
 * @type uint8
 * @see {@link #loadShader}
 * @since 1.0
 */
CanvasRenderingContext2D.prototype.colorShader = 0;
/**
 * Replaces the default font shader with the specified shader. Setting the value to 0 enables the default shader.
 * @type uint8
 * @see {@link #loadShader}
 * @since 1.0
 */
CanvasRenderingContext2D.prototype.fontShader = 0;
/**
 * Replaces the default pattern shader with the specified shader. Setting the value to 0 enables the default shader.
 * @type uint8
 * @see {@link #loadShader}
 * @since 1.0
 */
CanvasRenderingContext2D.prototype.patternShader = 0;
/**
 * Replaces the default texture shader with the specified shader. Setting the value to 0 enables the default shader.
 * @type uint8
 * @see {@link #loadShader}
 * @since 1.0
 */
CanvasRenderingContext2D.prototype.textureShader = 0;
//-------------------------------------------------------------------------
// PUBLIC METHODS
//-------------------------------------------------------------------------
// Canvas Extensions
/**
 * Renders the contents of an `ImageStream` into the given canvas context.
 * @param {Number} imageStream Pointer to the live image stream.
 * @param {Number} [x=0] The x offset in pixels to draw the upper left corner of the image stream.
 * @param {Number} [y=0] The y offset in pixels to draw the upper left corner of the image stream.
 * @param {Number} [width=ImageStream.width] The width of `ImageStream` in pixels.
 * @param {Number} [height=ImageStream.height] The height of `ImageStream` in pixels.
 * @see nwf.media.Camera
 * @since 1.0
 */
CanvasRenderingContext2D.prototype.drawImageStream = function drawImageStream(imageStream, x, y, width, height) {
    return null;
};
/**
 * Draws a number of instances of a single image in one draw call.
 *
 * Below is an example of using this method to create a particle effect:
 *
 *      var img = document.createElement( 'canvas' );
 *      img.width = img.height = 10;
 *      var imgCtx = img.getContext( '2d' );
 *      imgCtx.fillStyle = 'white';
 *      imgCtx.fillRect(0,0,10,10);
 *
 *      var c = document.createElement( 'canvas' );
 *      c.height = window.innerHeight;
 *      c.width = window.innerWidth;
 *      var ctx = c.getContext( '2d' );
 *      document.body.appendChild( c );
 *
 *      var PARTICLES = 300;
 *
 *      var _mat32Buffer = new Float32Array( 6 * PARTICLES );
 *      var _rects    = new Float32Array( 4 * PARTICLES );
 *      var _alphaBuffer = new Float32Array( 4 * PARTICLES );
 *
 *      function main() {
 *
 *          // update
 *          for (var i = 0; i < PARTICLES; i++) {
 *
 *              // set source and destination rects
 *              _rects[ i * 4 + 0 ] = 0;
 *              _rects[ i * 4 + 1 ] = 0;
 *              _rects[ i * 4 + 2 ] = 10;
 *              _rects[ i * 4 + 3 ] = 10;
 *
 *              // move particles ( x, y ) only
 *              _mat32Buffer[ i * 6 + 0 ] = 1;
 *              _mat32Buffer[ i * 6 + 3 ] = 1;
 *              _mat32Buffer[ i * 6 + 4 ] = Math.random() * ctx.canvas.width - 10;
 *              _mat32Buffer[ i * 6 + 5 ] = Math.random() * ctx.canvas.height - 10;
 *
 *              // alpha and color
 *              _alphaBuffer[ i * 4 + 0] = Math.random() * 0.7 + 0.3;
 *              _alphaBuffer[ i * 4 + 1] = Math.random() * 0.7 + 0.3;
 *              _alphaBuffer[ i * 4 + 2] = Math.random() * 0.7 + 0.3;
 *              _alphaBuffer[ i * 4 + 3] = Math.random() * 0.7 + 0.3;
 *
 *          }
 *
 *          ctx.clearRect( 0, 0, ctx.canvas.width, ctx.canvas.height );
 *
 *          // draw
 *          ctx.drawImageInstanced(PARTICLES, img,  _rects, _rects, _mat32Buffer, _alphaBuffer );
 *
 *          // reset the matrix position of the context
 *          ctx.setTransform(1, 0, 0, 1, 0, 0);
 *
 *          webkitRequestAnimationFrame( main );
 *      }
 *
 *      webkitRequestAnimationFrame( main );
 *
 * @param {Number} count Number of instances to draw.
 * @param {HTMLImageElement | HTMLCanvasElement} img The source image to be drawn.
 * @param {Float32Array} sourceRects A `Float32Array` of values representing rects (`x, y, width, height`) that specifies the portion of the source image to draw for each count.
 * If `destRects` is omitted, this is used as the destination rect, and the source rect is `{0, 0, img.width, img.height}`.
 * @param {Float32Array} [destRects] A `Float32Array` of values representing rects (`x, y, width, height`) that specifies where to draw for each count.
 * If omitted, the source rect parameter is used as the destination rect, and the source rect is `{0, 0, img.width, img.height}`.
 * @param {Float32Array} [martix32s] A `Float32Array` of `3x2` `matrix2D` data. The data should be provided as it would be for the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D#setTransform()">setTransform</a> method.
 * __Note:__ _The last value applied to the last image instance will be the new matrix position of the context._
 * @param {Float32Array} [colors] A `Float32Array` of 4 component `RGBA` floats to use on each draw. This will default to use the context's current `globalAlpha` and global texture color values.
 * __Note:__ _The last value applied to the last image instance will be the new alpha/color of the context._
 * @see <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D#drawImage()">MDN CanvasRenderingContext2D drawImage</a>
 * @since 1.7
 */
CanvasRenderingContext2D.prototype.drawImageInstanced = function drawImageInstanced(count, img, sourceRects, destRects, matrix32s, color) {
    // TODO: finish this polyfill
    var i = 0;
     for (i; i < count; i++) {

         this.save();

         this.transform(
             matrix32s[ i * 6 + 0 ], matrix32s[ i * 6 + 1 ],
             matrix32s[ i * 6 + 2 ], matrix32s[ i * 6 + 3 ],
             matrix32s[ i * 6 + 4 ], matrix32s[ i * 6 + 5 ]
         );

         this.globalAlpha = color[ i ];

         // this was based of the old spec so needs to be redone
         // Matthew Lewis Polyfill addition
         // Straight copy and paste
         this.drawImage(img,
           destRects[i * 2 + 0],
           destRects[i * 2 + 1],
           destRects[i * 2 + 2],
           destRects[i * 2 + 3],
           sourceRects[i * 2 + 0],
           sourceRects[i * 2 + 1],
           sourceRects[i * 2 + 2],
           sourceRects[i * 2 + 3]
         );


         this.restore();
     }
    return null;
};
// CANVAS Shaders
/**
 * Loads a precompiled shader and returns a pointer for activating the shader.
 *
 * @param {String} shaderFileName The file name of the shader to load, extension included.
 * @returns {uint8} A reference pointer to the shader.
 * @since 1.0
 */
CanvasRenderingContext2D.prototype.loadShader = function loadShader(shaderFileName) {
    return 0;
};
/**
 * Loads a pre-compiled texture to be used by the custom fragment shader. Returns an ID to the texture for use with `#loadPixelUniformTexture()`.
 *
 * @param {String} textureFileName The filename of the texture to load, extension included.
 * @returns {uint8} A reference pointer to the texture.
 * @see CanvasRenderingContext2D.setPixelUniformTexture
 * @since 1.0
 */
CanvasRenderingContext2D.prototype.loadTexture = function loadTexture(textureFileName) {
    return 0;
};
/**
 * Tint images that will be drawn with `drawImage` and `#drawImageInstanced`. Works similarly to `globalAlpha` or `setFillColor()`. Unlike `setFillColor()` it takes a 3 component `RGB` color instead of `RGBA`. Textures rendered as a `CanvasPattern` with `fillRect()` are not tinted.
 * @param {Number} r The red channel to tint the image to. The acceptable range for this value is between 0 and 1. Any value above 1 will be clamped down to 1.
 * @param {Number} g The green channel to tint the image to. The acceptable range for this value is between 0 and 1. Any value above 1 will be clamped down to 1.
 * @param {Number} b The blue channel to tint the image to. The acceptable range for this value is between 0 and 1. Any value above 1 will be clamped down to 1.
 * @since 1.8.1
 */
CanvasRenderingContext2D.prototype.setImageColor = function setImageColor(r, g, b) {
    return null;
};
/**
 * Sets a float or vector of floats as a vertex shader uniform.
 *
 * @param {uint8} register The register the uniform is bound to.
 * @param {float} f1 Value to set in the register.
 * @param {float} [f2=undefined] Value to set in the register.
 * @param {float} [f3=undefined] Value to set in the register.
 * @param {float} [f4=undefined] Value to set in the register.
 * @since 1.0
 */
CanvasRenderingContext2D.prototype.setVertexUniformFloat = function setVertexUniformFloat(register, f1, f2, f3, f4) {
};
/**
 * Sets a float or vector of floats as a fragment shader uniform.
 *
 * @param {uint8} register The register the uniform is bound to.
 * @param {float} f1 Value to set in the register.
 * @param {float} [f2=undefined] Value to set in the register.
 * @param {float} [f3=undefined] Value to set in the register.
 * @param {float} [f4=undefined] Value to set in the register.
 * @since 1.0
 */
CanvasRenderingContext2D.prototype.setPixelUniformFloat = function setPixelUniformFloat(register, f1, f2, f3, f4) {
};
/**
 * Sets a texture value to the specified register.
 *
 * @param {uint8} register The register the uniform is bound to.
 * @param {uint8} textureID A pointer to the texture to set in the register.
 * @since 1.0
 */
CanvasRenderingContext2D.prototype.setPixelUniformTexture = function setPixelUniformTexture(register, textureID) {
};
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwfjs = nwfjs || {};
/**
* @class HTMLImageElement
*
* HTML image element interface
*
* DOM image objects expose the `HTMLImageElement` (or HTML 4 `HTMLImageElement`) interface, which provides special properties and methods (beyond the regular element object interface they also have available to them by inheritance) for manipulating the layout and presentation of input elements.
*
*      var img1 = new Image(); // DOM 0
*      img1.src = 'image1.png';
*      img1.alt = 'alt';
*      document.body.appendChild(img1);
*
*      var img2 = document.createElement('img'); // use DOM HTMLImageElement
*      img2.src = 'image2.jpg';
*      img2.alt = 'alt text';
*      document.body.appendChild(img2);
*
*      // using first image in the document
*      console.log(document.images[0].src);
*
* Supported file types: .png, .jpg, .bmp, .ico, .gtx (Wii U specific texture format, see `#src` below)
*
* <div class="notice">
* Documentation for this class comes from <a href="https://developer.mozilla.org/en-US/docs/DOM/HTMLImageElement">MDN</a> and is available under <a href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons: Attribution-Sharealike license</a>.
* </div>
*/
nwfjs.HTMLImageElement = HTMLImageElement;
//-------------------------------------------------------------------------
// PUBLIC PROPERTIES
//------------------------------------------------------------------------
/**
 * The Nintendo Web Framework extends the `src` attribute of `HTMLImageElements` to allow for `.gtx` files to be loaded.
 *
 *      HTMLImageElement.src = 'image.gtx';
 *
 * @see nwf.utils.unpackTextureBundle
 * @since 1.5
 */
HTMLImageElement.prototype.src = '';
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwfjs = nwfjs || {};
/**
* Nintendo Web Framework specific customizations to APIs for the `<audio>` and `<video>` element DOM APIs.
*
* @class HTMLMediaElement
*/
nwfjs.HTMLMediaElement = HTMLMediaElement;
//-------------------------------------------------------------------------
// PUBLIC PROPERTIES
//-------------------------------------------------------------------------
/**
 * Volume of the element on the TV. This property will be set to 1 if the element is in the TV WebView. The final volume of the element will be multiplied by the `volume` member.
 */
HTMLMediaElement.prototype.tvVolume = 0;
/**
 * Volume of the element on the Wii U GamePad. This property will be set to 1 if the element is in the GamePad WebView. The final volume of the element will be multiplied by the `volume` member.
 */
HTMLMediaElement.prototype.gamepadVolume = 0;
/**
 * Volume of the element on the first player's Wii Remote. The final volume of the element will be multiplied by the `volume` member.
 *
 * __Note:__ _This property is not currently available on `HTMLVideoElements`, only `HTMLAudioElements`._
 */
HTMLMediaElement.prototype.wiiRemote1Volume = 0;
/**
 * Volume of the element on the second player's Wii Remote. The final volume of the element will be multiplied by the `volume` member.
 *
 * __Note:__ _This property is not currently available on `HTMLVideoElements`, only `HTMLAudioElements`._
 */
HTMLMediaElement.prototype.wiiRemote2Volume = 0;
/**
 * Volume of the element on the third player's Wii Remote. The final volume of the element will be multiplied by the `volume` member.
 *
 * __Note:__ _This property is not currently available on `HTMLVideoElements`, only `HTMLAudioElements`._
 */
HTMLMediaElement.prototype.wiiRemote3Volume = 0;
/**
 * Volume of the element on the fourth player's Wii Remote. The final volume of the element will be multiplied by the `volume` member.
 *
 * __Note:__ _This property is not currently available on `HTMLVideoElements`, only `HTMLAudioElements`._
 */
HTMLMediaElement.prototype.wiiRemote4Volume = 0;
/**
 * The number of channels on the current audio source.
 *
 * Will remain 0 until the `canplaythrough` event has fired.
 *
 * __Note:__ _Currently only supported for OGG and WAV files._
 *
 * __Note:__ _This property is not currently available on `HTMLVideoElements`, only `HTMLAudioElements`._
 *
 * @readonly
 * @property {Number} numChannels=0
 */
HTMLMediaElement.prototype.numChannels = 0;
/**
 * This is a `Float32Array` of pan values for each channel of the current audio source, its length will always be 16. The default value for each channel will be -1, which indicates to use the default pan. The range of usable values is 0.0 to 1.0.
 *
 * __Note:__ _Currently only supported for OGG and WAV files._
 *
 * __Note:__ _This property is not currently available on `HTMLVideoElements`, only `HTMLAudioElements`._
 * @property {Float32Array} [channelPan=Float32Array(16)]
 */
HTMLMediaElement.prototype.channelPan = new Float32Array(16);
/**
 * This is a `Float32Array` of volumes for each channel of the current audio source, its length will always be 16. The default value for each channel will be 1.0.
 *
 * __Note:__ _Currently only supported for OGG and WAV files._
 *
 * __Note:__ _This property is not currently available on `HTMLVideoElements`, only `HTMLAudioElements`._
 * @property {Float32Array} [channelVolume=Float32Array(16)]
 */
HTMLMediaElement.prototype.channelVolume = new Float32Array(16);
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
var nwfjs = nwfjs || {};
/**
 * Nintendo Web Framework specific customizations to the `localStorage` object.
 *
 * For more information on `localStorage` see MDN's <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Storage">DOM Storage</a>.
 *
 * @class localStorage
 */
nwfjs.localStorage = localStorage;
//-------------------------------------------------------------------------
// PUBLIC METHODS
//-------------------------------------------------------------------------
/**
 * The `sync` method is necessary when using the manual flush options for `localStorage`. Since this process is asynchronous, a callback should be registered for when the process completes. The syncing process can only sync one hundred `localStorage` items at once, so it may be necessary to call `sync` more than once.
 *
 *      // Call sync before using the nwf.system.WiiUSystem.flushStorageAsync method.
 *      var wiiUSystem = nwf.system.WiiUSystem.getInstance();
 *
 *      // Add a listener for when the flush has completed.
 *      wiiUSystem.addEventListener(nwf.events.SystemEvent.FLUSH_STORAGE_COMPLETE, function onFlush(evt) {
 *          console.log(evt.type);
 *      });
 *
 *      localStorage.sync(onSync);
 *
 *      // Define a callback for when the sync completes.
 *      function onSync(itemsSynced, itemsRemaining){
 *          // Check if all localStorage items have been synced.
 *          if(itemsRemaining === 0){
 *               wiiUSystem.flushStorageAsync();
 *          // If they aren't then continue syncing.
 *          } else {
 *              localStorage.sync(onSync);
 *          }
 *      }
 *
 * @param {Function} [callback] Callback to call when the sync has finished.
 * @param {Number} callback.itemsSynced The number of `localStorage` items that were synced.
 * @param {Number} callback.itemsRemaining The number of `localStorage` items that are still remaining to be synced.
 * @see nwf.system.WiiUSystem.flushStorage
 * @see nwf.system.WiiUSystem.flushStorageAsync
 * @since 1.5
 */
Storage.prototype.sync = function sync(callback) {
    return null;
};
var nwfjs = nwfjs || {};
/**
 * @class Array
 *
 * In JavaScript, the `Array` property of the global object is a constructor for array instances.
 *
 * An array is a JavaScript object. Note that you shouldn't use it as an associative array, use {@link Object} instead.
 *
 * # Creating an Array
 *
 * The following example creates an array, `msgArray`, with a length of 0, then assigns values to `msgArray[0]` and `msgArray[99]`, changing the length of the array to 100.
 *
 *     var msgArray = new Array();
 *     msgArray[0] = "Hello";
 *     msgArray[99] = "world";
 *
 *     if (msgArray.length == 100)
 *     print("The length is 100.");
 *
 * # Creating a Two-Dimensional Array
 *
 * The following creates chess board as a two dimensional array of strings. The first move is made by copying the 'P' in 6,4 to 4,4. The position 4,4 is left blank.
 *
 *     var board =
 *     [ ['R','N','B','Q','K','B','N','R'],
 *     ['P','P','P','P','P','P','P','P'],
 *     [' ',' ',' ',' ',' ',' ',' ',' '],
 *     [' ',' ',' ',' ',' ',' ',' ',' '],
 *     [' ',' ',' ',' ',' ',' ',' ',' '],
 *     [' ',' ',' ',' ',' ',' ',' ',' '],
 *     ['p','p','p','p','p','p','p','p'],
 *     ['r','n','b','q','k','b','n','r']];
 *     print(board.join('\n') + '\n\n');
 *
 *     // Move King's Pawn forward 2
 *     board[4][4] = board[6][4];
 *     board[6][4] = ' ';
 *     print(board.join('\n'));
 *
 * Here is the output:
 *
 *     R,N,B,Q,K,B,N,R
 *     P,P,P,P,P,P,P,P
 *      , , , , , , ,
 *      , , , , , , ,
 *      , , , , , , ,
 *      , , , , , , ,
 *     p,p,p,p,p,p,p,p
 *     r,n,b,q,k,b,n,r
 *
 *     R,N,B,Q,K,B,N,R
 *     P,P,P,P,P,P,P,P
 *      , , , , , , ,
 *      , , , , , , ,
 *      , , , ,p, , ,
 *      , , , , , , ,
 *     p,p,p,p, ,p,p,p
 *     r,n,b,q,k,b,n,r
 *
 * # Accessing array elements
 *
 * Array elements are nothing less than object properties, so they are accessed as such.
 *
 *     var myArray = new Array("Wind", "Rain", "Fire");
 *     myArray[0]; // "Wind"
 *     myArray[1]; // "Rain"
 *     // etc.
 *     myArray.length; // 3
 *
 *     // Even if indices are properties, the following notation throws a syntax error
 *     myArray.2;
 *
 *     // It should be noted that in JavaScript, object property names are strings. Consequently,
 *     myArray[0] === myArray["0"];
 *     myArray[1] === myArray["1"];
 *     // etc.
 *
 *     // However, this should be considered carefully
 *     myArray[02]; // "Fire". The number 02 is converted as the "2" string
 *     myArray["02"]; // undefined. There is no property named "02"
 *
 * # Relationship between length and numerical properties
 *
 * An array's length property and numerical properties are connected. Here is some code explaining how this relationship works.
 *
 *     var a = [];
 *
 *     a[0] = 'a';
 *     console.log(a[0]); // 'a'
 *     console.log(a.length); // 1
 *
 *     a[1] = 32;
 *     console.log(a[1]); // 32
 *     console.log(a.length); // 2
 *
 *     a[13] = 12345;
 *     console.log(a[13]); // 12345
 *     console.log(a.length); // 14
 *
 *     a.length = 10;
 *     console.log(a[13]); // undefined, when reducing the length elements after length+1 are removed
 *     console.log(a.length); // 10
 *
 * # Creating an array using the result of a match
 *
 * The result of a match between a regular expression and a string can create an array.
 * This array has properties and elements that provide information about the match.
 * An array is the return value of `RegExp.exec`, `String.match`, and `String.replace`.
 * To help explain these properties and elements, look at the following example and then refer to the table below:
 *
 *     // Match one d followed by one or more b's followed by one d
 *     // Remember matched b's and the following d
 *     // Ignore case
 *
 *     var myRe = /d(b+)(d)/i;
 *     var myArray = myRe.exec("cdbBdbsbz");
 *
 * The properties and elements returned from this match are as follows:
 *
 *
 * | Property/Element | Description                                                                           | Example
 * |:-----------------|:--------------------------------------------------------------------------------------|:-------------------
 * | `input`          | A read-only property that reflects the original string against which the              | cdbBdbsbz
 * |                  | regular expression was matched.                                                       |
 * | `index`          | A read-only property that is the zero-based index of the match in the string.         | 1
 * | `[0]`            | A read-only element that specifies the last matched characters.                       | dbBd
 * | `[1], ...[n]`    | Read-only elements that specify the parenthesized substring matches, if included in   | [1]: bB [2]: d
 * |                  | the regular expression. The number of possible parenthesized substrings is unlimited. |
 *
 * <div class="notice">
 * Documentation for this class comes from <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array">MDN</a> and is available under <a href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons: Attribution-Sharealike license</a>.
 * </div>
 *
 */
nwfjs.Array = Array;
/**
 * @method constructor
 * Creates new Array object.
 *
 * @param {Number/Object...} items Either a number that specifies the length of array or any number of items for the array.
 */
// Array.prototype.constructor = function constructor(items: number) {
//  	return {};
// };
// Properties
/**
 * @property {Number} length
 * Reflects the number of elements in an array.
 *
 * The value of the `length` property is an integer with a positive sign and a value less than 2 to the 32 power (232).
 *
 * You can set the `length` property to truncate an array at any time. When you extend an array by changing its `length` property, the number of actual elements does not increase; for example, if you set `length` to 3 when it is currently 2, the array still contains only 2 elements.
 *
 * In the following example, the array numbers are iterated through by looking at the `length` property to see how many elements it has. Each value is then doubled.
 *
 *     var numbers = [1,2,3,4,5];
 *     for (var i = 0; i < numbers.length; i++) {
 *         numbers[i] *= 2;
 *     }
 *     // numbers is now [2,4,6,8,10];
 *
 * The following example shortens the array `statesUS` to a length of 50 if the current `length` is greater than 50.
 *
 *     if (statesUS.length > 50) {
 *         statesUS.length=50
 *     }
 */
// Array.prototype.length: number = 0;
// Mutator methods. These methods modify the array:
/**
 * @method pop
 * The `pop` method removes the last element from an array and returns that value to the caller.
 *
 * `pop` is intentionally generic; this method can be called or applied to objects resembling arrays. Objects that do not contain a `length` property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.
 *
 *     var myFish = ["angel", "clown", "mandarin", "surgeon"];
 *     var popped = myFish.pop();
 *     alert(popped); // Alerts 'surgeon'
 *
 * @return {Object} The last element in the array
 */
Array.prototype.pop = function pop() {
    return {};
};
/**
 * @method push
 * Adds one or more elements to the end of an array and returns the new length of the array.
 *
 * `push` is intentionally generic. This method can be called or applied to objects resembling arrays.
 * The `push` method relies on a length property to determine where to start inserting the given values.
 * If the `length` property cannot be converted into a number, the index used is 0.
 * This includes the possibility of `length` being nonexistent, in which case `length` will also be created.
 *
 * The only native, array-like objects are strings, although they are not suitable in applications of this method, as strings are immutable.
 *
 * ### Adding elements to an array
 *
 * The following code creates the sports array containing two elements, then appends two elements to it.
 * After the code executes, sports contains 4 elements: "soccer", "baseball", "football" and "swimming".
 *
 *     var sports = ["soccer", "baseball"];
 *     sports.push("football", "swimming");
 *
 * @param {Object...} elements The elements to add to the end of the array.
 * @return {Number} The new `length` property of the object upon which the method was called.
 */
// Array.prototype.push = function push(elements: {}): number {
//  	return 0;
// };
/**
 * @method reverse
 * Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first.
 *
 * The reverse method transposes the elements of the calling array object in place, mutating the array, and returning a reference to the array.
 *
 * The following example creates an array `myArray`, containing three elements, then reverses the array.
 *
 *     var myArray = ["one", "two", "three"];
 *     myArray.reverse();
 *
 * This code changes `myArray` so that:
 *
 *  - myArray[0] is "three"
 *  - myArray[1] is "two"
 *  - myArray[2] is "one"
 *
 * @return {Array} A reference to the array
 */
Array.prototype.reverse = function reverse() {
    return [];
};
/**
 * @method shift
 * Removes the first element from an array and returns that element.
 *
 * The `shift` method removes the element at the zeroeth index and shifts the values at consecutive indexes down, then returns the removed value.
 *
 * `shift` is intentionally generic; this method can be called or applied to objects resembling arrays.
 * Objects which do not contain a `length` property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.
 *
 * The following code displays the `myFish` array before and after removing its first element.
 * It also displays the removed element:
 *
 *     // assumes a println function is defined
 *     var myFish = ["angel", "clown", "mandarin", "surgeon"];
 *     println("myFish before: " + myFish);
 *     var shifted = myFish.shift();
 *     println("myFish after: " + myFish);
 *     println("Removed this element: " + shifted);
 *
 * This example displays the following:
 *
 *     myFish before: angel,clown,mandarin,surgeon
 *     myFish after: clown,mandarin,surgeon
 *     Removed this element: angel
 *
 * @return {Object} The first element of the array prior to shifting.
 */
Array.prototype.shift = function shift() {
    return {};
};
/**
 * @method sort
 * Sorts the elements of an array.
 *
 * If `compareFunction` is not supplied, elements are sorted by converting them to strings and comparing strings in lexicographic ("dictionary" or "telephone book," not numerical) order.
 * For example, "80" comes before "9" in lexicographic order, but in a numeric sort 9 comes before 80.
 *
 * If `compareFunction` is supplied, the array elements are sorted according to the return value of the compare function.
 * If `a` and `b` are two elements being compared, then:
 * If `compareFunction(a, b)` is less than 0, sort `a` to a lower index than `b`.
 * If `compareFunction(a, b)` returns 0, leave `a` and `b` unchanged with respect to each other, but sorted with respect to all different elements.
 * __Note:__ the ECMAscript standard does not guarantee this behaviour, and thus not all browsers respect this.
 * If `compareFunction(a, b)` is greater than 0, sort `b` to a lower index than `a`.
 * `compareFunction(a, b)` must always returns the same value when given a specific pair of elements `a` and `b` as its two arguments. If inconsistent results are returned then the sort order is undefined
 *
 * So the compare function has the following form:
 *
 *     function compare(a, b)
 *     {
 *         if (a is less than b by some ordering criterion)
 *             return -1;
 *         if (a is greater than b by the ordering criterion)
 *            return 1;
 *         // a must be equal to b
 *         return 0;
 *     }
 *
 * To compare numbers instead of strings, the compare function can simply subtract `b` from `a`:
 *
 *     function compareNumbers(a, b)
 *     {
 *     return a - b;
 *     }
 *
 * The `sort()` method can be conveniently used with closures:
 *
 *     var numbers = [4, 2, 5, 1, 3];
 *     numbers.sort(function(a, b) {
 *         return a - b;
 *     });
 *     print(numbers);
 *
 * @param {Function} compareFunction Specifies a function that defines the sort order.
 * If omitted, the array is sorted lexicographically (in dictionary order) according to the string conversion of each element.
 * @return {Array} A reference to the array
 */
// Array.prototype.sort = function sort(compareFunction) {
// 	return [];
// };
/**
 * @method splice
 * Adds and/or removes elements from an array.
 *
 * If you specify a different number of elements to insert than the number you're removing, the array will have a different length at the end of the call.
 *
 *     // assumes a print function is defined
 *     var myFish = ["angel", "clown", "mandarin", "surgeon"];
 *     print("myFish: " + myFish);
 *
 *     var removed = myFish.splice(2, 0, "drum");
 *     print("After adding 1: " + myFish);
 *     print("removed is: " + removed);
 *
 *     removed = myFish.splice(3, 1);
 *     print("After removing 1: " + myFish);
 *     print("removed is: " + removed);
 *
 *     removed = myFish.splice(2, 1, "trumpet");
 *     print("After replacing 1: " + myFish);
 *     print("removed is: " + removed);
 *
 *     removed = myFish.splice(0, 2, "parrot", "anemone", "blue");
 *     print("After replacing 2: " + myFish);
 *     print("removed is: " + removed);
 *
 * This script displays:
 *
 *     myFish: angel,clown,mandarin,surgeon
 *     After adding 1: angel,clown,drum,mandarin,surgeon
 *     removed is:
 *     After removing 1: angel,clown,drum,surgeon
 *     removed is: mandarin
 *     After replacing 1: angel,clown,trumpet,surgeon
 *     removed is: drum
 *     After replacing 2: parrot,anemone,blue,trumpet,surgeon
 *     removed is: angel,clown
 *
 * @param {Number} index Index at which to start changing the array. If negative, will begin that many elements from the end.
 * @param {Number} howMany An integer indicating the number of old array elements to remove. If `howMany` is 0, no elements are removed. In this case, you should specify at least one new element. If no `howMany` parameter is specified all elements after index are removed.
 * @param {Object...} elements The elements to add to the array. If you don't specify any elements, `splice` simply removes elements from the array.
 * @return {Array} An array containing the removed elements. If only one element is removed, an array of one element is returned..
 */
Array.prototype.splice = function splice(index, howMany, elements) {
    return [];
};
/**
 * @method unshift
 * Adds one or more elements to the front of an array and returns the new length of the array.
 *
 * The `unshift` method inserts the given values to the beginning of an array-like object.
 *
 * `unshift` is intentionally generic; this method can be called or applied to objects resembling arrays. Objects that do not contain a `length` property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner.
 *
 * The following code displays the `myFish` array before and after adding elements to it.
 *
 *     // assumes a println function exists
 *     myFish = ["angel", "clown"];
 *     println("myFish before: " + myFish);
 *     unshifted = myFish.unshift("drum", "lion");
 *     println("myFish after: " + myFish);
 *     println("New length: " + unshifted);
 *
 * This example displays the following:
 *
 *     myFish before: ["angel", "clown"]
 *     myFish after: ["drum", "lion", "angel", "clown"]
 *     New length: 4
 *
 * @param {Object...} elements The elements to add to the front of the array.
 * @return {Number} The array's new length.
 */
Array.prototype.unshift = function unshift() {
    var items = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        items[_i - 0] = arguments[_i];
    }
    return 0;
};
// Accessor methods. These methods do not modify the array and return some representation of the array.
/**
 * @method concat
 * Returns a new array comprised of this array joined with other array(s) and/or value(s).
 *
 * `concat` creates a new array consisting of the elements in the `this` object on which it is called, followed in order by, for each argument, the elements of that argument (if the argument is an array) or the argument itself (if the argument is not an array).
 *
 * `concat` does not alter `this` or any of the arrays provided as arguments but instead returns a "one level deep" copy that contains copies of the same elements combined from the original arrays.
 * Elements of the original arrays are copied into the new array as follows:
 * Object references (and not the actual object): `concat` copies object references into the new array.
 * Both the original and new array refer to the same object. That is, if a referenced object is modified, the changes are visible to both the new and original arrays.
 * Strings and numbers (not {@link String} and {@link Number} objects): `concat` copies the values of strings and numbers into the new array.
 *
 * Any operation on the new array will have no effect on the original arrays, and vice versa.
 *
 * ### Concatenating two arrays
 *
 * The following code concatenates two arrays:
 *
 *     var alpha = ["a", "b", "c"];
 *     var numeric = [1, 2, 3];
 *
 *     // creates array ["a", "b", "c", 1, 2, 3]; alpha and numeric are unchanged
 *     var alphaNumeric = alpha.concat(numeric);
 *
 * ### Concatenating three arrays
 *
 * The following code concatenates three arrays:
 *
 *     var num1 = [1, 2, 3];
 *     var num2 = [4, 5, 6];
 *     var num3 = [7, 8, 9];
 *
 *     // creates array [1, 2, 3, 4, 5, 6, 7, 8, 9]; num1, num2, num3 are unchanged
 *     var nums = num1.concat(num2, num3);
 *
 * ### Concatenating values to an array
 *
 * The following code concatenates three values to an array:
 *
 *     var alpha = ['a', 'b', 'c'];
 *
 *     // creates array ["a", "b", "c", 1, 2, 3], leaving alpha unchanged
 *     var alphaNumeric = alpha.concat(1, [2, 3]);
 *
 * @param {Object...} values Arrays and/or values to concatenate to the resulting array.
 * @return {Array} New array.
 */
// Array.prototype.concat = function concat({ <U extends T[]>(...items: U[]): any[]; (...items: any[]): any[]; }) {
// 	return [];
// };
/**
 * @method join
 * Joins all elements of an array into a string.
 *
 * The string conversions of all array elements are joined into one string.
 *
 * The following example creates an array, `a`, with three elements, then joins the array three times: using the default separator, then a comma and a space, and then a plus.
 *
 *     var a = new Array("Wind","Rain","Fire");
 *     var myVar1 = a.join();      // assigns "Wind,Rain,Fire" to myVar1
 *     var myVar2 = a.join(", ");  // assigns "Wind, Rain, Fire" to myVar2
 *     var myVar3 = a.join(" + "); // assigns "Wind + Rain + Fire" to myVar3
 *
 * @param {String} separator Specifies a string to separate each element of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma.
 * @return {String} A string of the array elements.
 */
Array.prototype.join = function join(seperator) {
    return '';
};
/**
 * @method slice
 * Extracts a section of an array and returns a new array.
 *
 * `slice` does not alter the original array, but returns a new "one level deep" copy that contains copies of the elements sliced from the original array.
 * Elements of the original array are copied into the new array as follows:
 * *   For object references (and not the actual object), `slice` copies object references into the new array. Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.
 * *   For strings and numbers (not {@link String} and {@link Number} objects), `slice` copies strings and numbers into the new array. Changes to the string or number in one array does not affect the other array.
 *
 * If a new element is added to either array, the other array is not affected.
 *
 * ### Using slice
 *
 * In the following example, `slice` creates a new array, `newCar`, from `myCar`. Both include a reference to the object `myHonda`. When the color of `myHonda` is changed to purple, both arrays reflect the change.
 *
 *     // Using slice, create newCar from myCar.
 *     var myHonda = { color: "red", wheels: 4, engine: { cylinders: 4, size: 2.2 } };
 *     var myCar = [myHonda, 2, "cherry condition", "purchased 1997"];
 *     var newCar = myCar.slice(0, 2);
 *
 *     // Print the values of myCar, newCar, and the color of myHonda
 *     //  referenced from both arrays.
 *     print("myCar = " + myCar.toSource());
 *     print("newCar = " + newCar.toSource());
 *     print("myCar[0].color = " + myCar[0].color);
 *     print("newCar[0].color = " + newCar[0].color);
 *
 *     // Change the color of myHonda.
 *     myHonda.color = "purple";
 *     print("The new color of my Honda is " + myHonda.color);
 *
 *     // Print the color of myHonda referenced from both arrays.
 *     print("myCar[0].color = " + myCar[0].color);
 *     print("newCar[0].color = " + newCar[0].color);
 *
 * This script writes:
 *
 *     myCar = [{color:"red", wheels:4, engine:{cylinders:4, size:2.2}}, 2, "cherry condition",
 *     "purchased 1997"]
 *     newCar = [{color:"red", wheels:4, engine:{cylinders:4, size:2.2}}, 2]
 *     myCar[0].color = red
 *     newCar[0].color = red
 *     The new color of my Honda is purple
 *     myCar[0].color = purple
 *     newCar[0].color = purple
 *
 * @param {Number} begin Zero-based index at which to begin extraction.
 * As a negative index, `start` indicates an offset from the end of the sequence. `slice(-2)` extracts the second-to-last element and the last element in the sequence
 * @param {Number} end Zero-based index at which to end extraction. `slice` extracts up to but not including `end`.
 * `slice(1,4)` extracts the second element through the fourth element (elements indexed 1, 2, and 3).
 * As a negative index, `end` indicates an offset from the end of the sequence. `slice(2,-1)` extracts the third element through the second-to-last element in the sequence.
 * If `end` is omitted, `slice` extracts to the end of the sequence.
 * @return {Array} Array from the new start position up to (but not including) the specified end position.
 */
Array.prototype.slice = function slice(begin, end) {
    return [];
};
/**
 * @method toString
 * Returns a string representing the array and its elements. Overrides the `Object.prototype.toString` method.
 *
 * The {@link Array} object overrides the `toString` method of {@link Object}. For Array objects, the `toString` method joins the array and returns one string containing each array element separated by commas. For example, the following code creates an array and uses `toString` to convert the array to a string.
 *
 *     var monthNames = new Array("Jan","Feb","Mar","Apr");
 *     myVar = monthNames.toString(); // assigns "Jan,Feb,Mar,Apr" to myVar
 *
 * JavaScript calls the `toString` method automatically when an array is to be represented as a text value or when an array is referred to in a string concatenation.
 *
 * @return {String} The array as a string.
 */
Array.prototype.toString = function toString() {
    return '';
};
var nwfjs = nwfjs || {};
/**
     * @class Blob
     *
     * A Blob is a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.
     *
     * **Important note:** __The `Blob` constuctor is unsupported in the Nintendo Web Framework.__ You must use the deprecated `WebKitBlobBuilder` class to construct a blob. However, in an effort to be future-compatible, please use this shim that will allow the use of `new Blob()` within NWF:
     *
     *		  	if (typeof window.Blob !== 'function') {
     *		  	 	window.Blob = function(blobParts, options) {
     *		  	 		var type = options ? (options.type || '') : '';
     *		  	 		var builder = new window.WebKitBlobBuilder();
     *		  	 		if (blobParts) {
     *		  	 			for (var i = 0; i < blobParts.length; i++) {
     *		  	 				builder.append(blobParts[i]);
     *		  	 			}
     *		  	 		}
     *		  	 		// Returns an actual Blob object, so now we can use 'new Blob()'.
     *		  	 		return builder.getBlob(type);
     *		  	 	}
     *		  	}
     *
     * This way, no direct code changes to the application are needed, since this shim simply wraps the global `Blob` object inside `WebKitBlobBuilder`. It would be possible to simply delete the shim and have the application or game continue to work without modification in a modern browser that has deprecated `WebKitBlobBuilder`.
     *
     * In order to translate Blob data into something useful, the built-in JavaScript class `FileReader` is used. `FileReader` is an asynchronous, instantiable class that handles the low-level type conversion of `Blob` objects.
     *
     * Using the shim declared above in the Nintendo Web Framework, reading from the NWF File IO system can be done as follows:
     *
     *		 	var writeDirObj = new nwf.io.Directory(nwf.io.Directory.appTempDirectory.systemPath);
     *		 	var newFile = new nwf.io.File('myFile', writeDirObj);
     *
     *		 	// Create the Blob; specify the type as often as possible.
     *		 	var blob = new Blob( 'A simple string to save to the Wii U disk.', {type: 'text/plain'} );
     *
     *		 	newFile.addEventListener(nwf.events.IOEvent.SAVE_COMPLETE, onSaveComplete, this);
     *		 	// start the save process
     *		 	newFile.save(blob);
     *
     *		 	var fileReader = new FileReader();
     *
     *		  	function onSaveComplete(evt) {
     *		  	 	// Once the file has been saved, the data can be read back using `FileReader`.
     *		  	 	// First add an event listener in the old style (`FileReader` does not have the `addEventListener` method).
     *		  	 	fileReader.onloadend = function(evt) {
     *		  	 		if (fileReader.error) {
     *		  	 			throw new Error('ERROR reading blob: '+fileReader.error);
     *		  	 		}
     *
     *		  	 		console.log('[onSaveComplete] result: '+ fileReader.result); // result is 'A simple string to save to the Wii U disk.'
     *		  	 	}
     *		  	 	// Start the read process.
     *		  	 	fileReader.readAsText(evt.data);
     *		  	}
     *
     * Blobs have several other uses, and the process is the same as above. That is: create a `new Blob`, pass in the data to translate into the `Blob`, and a `FileReader` instance to read the data back.
     *
     * The types of data that can be read using FileReader are:
     * <ul>
     * <li>ArrayBuffer</li>
     * <li>BinaryString</li>
     * <li>DataURL</li>
     * <li>Text (plain or html, as a DOM string)</li>
     * </ul>
     *
     * <h3>Related links</h3>
     * <a href="http://www.w3.org/TR/FileAPI/#dfn-Blob">W3C Blob specification</a><br>
     * <a href="https://developer.mozilla.org/en-US/docs/DOM/Blob">Blob guide on MDN</a><br>
     * <a href="http://www.w3.org/TR/FileAPI/#FileReader-interface">W3C FileReader specification</a><br>
     * <a href="https://developer.mozilla.org/en-US/docs/DOM/FileReader">FileReader guide on MDN</a>
     */
nwfjs.Blob = Blob;
var nwfjs = nwfjs || {};
/**
 * @class Boolean
 *
 * The `Boolean` object is an object wrapper for a boolean value.
 *
 * The value passed as the first parameter is converted to a boolean value, if necessary. If value is omitted or is 0, -0, null, false, `NaN`, undefined, or the empty string (""), the object has an initial value of false. All other values, including any object or the string `"false"`, create an object with an initial value of true.
 *
 * Do not confuse the primitive Boolean values true and false with the true and false values of the Boolean object.
 *
 * Any object whose value is not `undefined` or `null`, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. For example, the condition in the following if statement evaluates to true:
 *
 *     x = new Boolean(false);
 *     if (x) {
 *         // . . . this code is executed
 *     }
 *
 * This behavior does not apply to Boolean primitives. For example, the condition in the following if statement evaluates to `false`:
 *     x = false;
 *     if (x) {
 *         // . . . this code is not executed
 *     }
 *
 * Do not use a `Boolean` object to convert a non-boolean value to a boolean value. Instead, use Boolean as a function to perform this task:
 *
 *     x = Boolean(expression);     // preferred
 *     x = new Boolean(expression); // don't use
 *
 * If you specify any object, including a `Boolean` object whose value is `false`, as the initial value of a `Boolean` object, the new `Boolean` object has a value of `true`.
 *
 *     myFalse = new Boolean(false);   // initial value of false
 *     g = new Boolean(myFalse);       // initial value of true
 *     myString = new String("Hello"); // string object
 *     s = new Boolean(myString);      // initial value of true
 *
 * Do not use a `Boolean` object in place of a Boolean primitive.
 *
 * # Creating `Boolean` objects with an initial value of `false`
 *
 *     bNoParam = new Boolean();
 *     bZero = new Boolean(0);
 *     bNull = new Boolean(null);
 *     bEmptyString = new Boolean("");
 *     bfalse = new Boolean(false);
 *
 * # Creating `Boolean` objects with an initial value of `true`
 *
 *     btrue = new Boolean(true);
 *     btrueString = new Boolean("true");
 *     bfalseString = new Boolean("false");
 *     bSuLin = new Boolean("Su Lin");
 *
 * <div class="notice">
 * Documentation for this class comes from <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean">MDN</a> and is available under <a href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons: Attribution-Sharealike license</a>.
 * </div>
 */
nwfjs.Boolean = Boolean;
/**
 * @method constructor
 * Creates a new `Boolean` object.
 * @param {Object} value Either a truthy or falsy value to create the corresponding `Boolean` object.
 */
//Methods
/**
 * @method toString
 * Returns a string of either "true" or "false" depending upon the value of the object.
 * Overrides the `Object.prototype.toString` method.
 *
 * The `Boolean` object overrides the `toString` method of the `Object` object; it does not inherit `Object.toString`. For `Boolean` objects, the `toString` method returns a string representation of the object.
 *
 * JavaScript calls the `toString` method automatically when a Boolean is to be represented as a text value or when a Boolean is referred to in a string concatenation.
 *
 * For Boolean objects and values, the built-in `toString` method returns the string `"true"` or `"false"` depending on the value of the boolean object. In the following code, `flag.toString` returns `"true"`.
 *
 *     var flag = new Boolean(true)
 *     var myVar = flag.toString()
 *
 * @return {String} The Boolean value represented as a string.
 */
Boolean.prototype.toString = function toString() {
    return '';
};
/**
 * @method valueOf
 * Returns the primitive value of the `Boolean` object. Overrides the `Object.prototype.valueOf` method.
 *
 * The `valueOf` method of Boolean returns the primitive value of a `Boolean` object or literal Boolean as a Boolean data type.
 *
 * This method is usually called internally by JavaScript and not explicitly in code.
 *
 *     x = new Boolean();
 *     myVar = x.valueOf()      //assigns false to myVar
 *
 * @return {Boolean} The primitive value.
 */
Boolean.prototype.valueOf = function valueOf() {
    return false;
};
var nwfjs = nwfjs || {};
/**
     * @class Date
     *
     * Creates `Date` instances which let you work with dates and times.
     *
     * If you supply no arguments, the constructor creates a `Date` object for today's date and time according to local time. If you supply some arguments but not others, the missing arguments are set to 0. If you supply any arguments, you must supply at least the year, month, and day. You can omit the hours, minutes, seconds, and milliseconds.
     *
     * The date is measured in milliseconds since midnight 01 January, 1970 UTC. A day holds 86,400,000 milliseconds. The `Date` object range is -100,000,000 days to
     * 100,000,000 days relative to 01 January, 1970 UTC.
     *
     * The `Date` object provides uniform behavior across platforms.
     *
     * The `Date` object supports a number of UTC (universal) methods, as well as local time methods. UTC, also known as Greenwich Mean Time (GMT), refers to the time as set by the World Time Standard. The local time is the time known to the computer where JavaScript is executed.
     *
     * Invoking `Date` in a non-constructor context (i.e., without the `new` operator) will return a string representing the current time.
     *
     * Note that `Date` objects can only be instantiated by calling `Date` or using it as a constructor; unlike other JavaScript object types, `Date` objects have no literal syntax.
     *
     * # Several ways to assign dates
     *
     * The following example shows several ways to assign dates:
     *
     *     today = new Date();
     *     birthday = new Date("December 19, 1989 03:24:00");
     *     birthday = new Date(1989,11,19);
     *     birthday = new Date(1989,11,17,3,24,0);
     *
     * # Calculating elapsed time
     *
     * The following examples show how to determine the elapsed time between two dates:
     *
     *     // using static methods
     *     var start = Date.now();
     *     // the event you'd like to time goes here:
     *     doSomethingForALongTime();
     *     var end = Date.now();
     *     var elapsed = end - start; // time in milliseconds
     *
     *     // if you have Date objects
     *     var start = new Date();
     *     // the event you'd like to time goes here:
     *     doSomethingForALongTime();
     *     var end = new Date();
     *     var elapsed = end.getTime() - start.getTime(); // time in milliseconds
     *
     *     // if you want to test a function and get back its return
     *     function printElapsedTime (fTest) {
     *         var nStartTime = Date.now(), vReturn = fTest(), nEndTime = Date.now();
     *         alert("Elapsed time: " + String(nEndTime - nStartTime) + "
     *         milliseconds");
     *         return vReturn;
     *     }
     *
     *     yourFunctionReturn = printElapsedTime(yourFunction);
     *
     * # ISO 8601 formatted dates
     *
     * The following example shows how to formate a date in an ISO 8601 format using UTC:
     *
     *     // use a function for the exact format desired...
     *     function ISODateString(d){
     *     function pad(n){return n<10 ? '0'+n : n}
     *     return d.getUTCFullYear()+'-'
     *         + pad(d.getUTCMonth()+1)+'-'
     *         + pad(d.getUTCDate())+'T'
     *         + pad(d.getUTCHours())+':'
     *         + pad(d.getUTCMinutes())+':'
     *         + pad(d.getUTCSeconds())+'Z'}
     *
     *     var d = new Date();
     *     print(ISODateString(d)); // prints something like 2009-09-28T19:03:12Z
     *
     * <div class="notice">
     * Documentation for this class comes from <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date">MDN</a> and is available under <a href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons: Attribution-Sharealike license</a>.
     * </div>
     */
nwfjs.Date = Date;
/**
 * @method constructor
 * Creates new Date object.
 *
 * @param {Number/String} [year]
 * Either UNIX timestamp, date string, or year (when month and day parameters also provided):
 *
 * - Integer value representing the number of milliseconds since 1 January 1970
 *   00:00:00 UTC (Unix Epoch).
 *
 * - String value representing a date. The string should be in a format recognized
 *   by the parse method (IETF-compliant RFC 1123 timestamps).
 *
 * - Integer value representing the year. For compatibility (in order to avoid the
 *   Y2K problem), you should always specify the year in full; use 1998, rather
 *   than 98.
 *
 * @param {Number} [month]
 * Integer value representing the month, beginning with 0 for January to 11 for December.
 * @param {Number} [day]
 * Integer value representing the day of the month (1-31).
 * @param {Number} [hour]
 * Integer value representing the hour of the day (0-23).
 * @param {Number} [minute]
 * Integer value representing the minute segment (0-59) of a time reading.
 * @param {Number} [second]
 * Integer value representing the second segment (0-59) of a time reading.
 * @param {Number} [millisecond]
 * Integer value representing the millisecond segment (0-999) of a time reading.
 */
// constructor(month?, day?, hour?, minute?, second?, millisecond?) {}
//Methods
/**
 * @method now
 * @static
 * Returns the numeric value corresponding to the current time.
 *
 * The `now` method returns the milliseconds elapsed since 1 January 1970 00:00:00 UTC up until now as a number.
 *
 * When using `now` to create timestamps or unique IDs, keep in mind that the resolution may be 15 milliseconds on Windows, so you could end up with several equal values if `now` is called multiple times within a short time span.
 *
 * @return {Number} Returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.
 */
Date.now = function now() {
    return 0;
};
/**
 * @method parse
 * @static
 * Parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00, local time.
 *
 * The `parse` method takes a date string (such as `"Dec 25, 1995"`) and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC. The local time zone is used to interpret arguments that do not contain time zone information. This function is useful for setting date values based on string values, for example in conjunction with the `setTime` method and the
 * {@link Date} object.
 *
 * Given a string representing a time, parse returns the time value. It accepts the IETF standard (RFC
 * 1123 Section 5.2.14 and elsewhere) date syntax: `"Mon, 25 Dec 1995 13:30:00 GMT"`. It understands the continental US time-zone abbreviations, but for general use, use a time-zone offset, for example, `"Mon, 25 Dec 1995 13:30:00 GMT+0430"` (4 hours, 30 minutes east of the Greenwich meridian). If you do not specify a time zone, the local time zone is assumed. GMT and UTC are considered equivalent.
 *
 * ### Using parse
 *
 * If `IPOdate` is an existing `Date` object, then you can set it to August 9, 1995 (local time) as follows:
 *
 *     IPOdate.setTime(Date.parse("Aug 9, 1995"));
 *
 * Some other examples:
 *
 *     // Returns 807937200000 in time zone GMT-0300, and other values in other time zones, since the argument does not specify a time zone.
 *     Date.parse("Aug 9, 1995");
 *
 *     // Returns 807926400000 no matter the local time zone.
 *     Date.parse("Wed, 09 Aug 1995 00:00:00 GMT");
 *
 *     // Returns 807937200000 in timezone GMT-0300, and other values in other time zones, since there is no time zone specifier in the argument.
 *     Date.parse("Wed, 09 Aug 1995 00:00:00");
 *
 *     // Returns 0 no matter the local time zone.
 *     Date.parse("Thu, 01 Jan 1970 00:00:00 GMT");
 *
 *     // Returns 14400000 in timezone GMT-0400, and other values in other time zones, since there is no time zone specifier in the argument.
 *     Date.parse("Thu, 01 Jan 1970 00:00:00");
 *
 *     // Returns 14400000 no matter the local time zone.
 *     Date.parse("Thu, 01 Jan 1970 00:00:00 GMT-0400");
 *
 * @param {String} dateString A string representing a date.
 * @return {Number} Number of milliseconds since January 1, 1970, 00:00:00, local time.
 */
Date.parse = function parse(dateString) {
    return 0;
};
/**
 * @method UTC
 * @static
 * Accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a `Date` object since January 1, 1970, 00:00:00, universal time.
 *
 * `UTC` takes comma-delimited date parameters and returns the number of milliseconds between January
 * 1, 1970, 00:00:00, universal time and the time you specified.
 *
 * You should specify a full year for the year; for example, 1998. If a year between 0 and 99 is specified, the method converts the year to a year in the 20th century (1900 + year); for example, if you specify 95, the year 1995 is used.
 *
 * The `UTC` method differs from the `Date` constructor in two ways.
 * *   `Date.UTC` uses universal time instead of the local time.
 * *   `Date.UTC` returns a time value as a number instead of creating a `Date` object.
 *
 * If a parameter you specify is outside of the expected range, the `UTC` method updates the other parameters to allow for your number. For example, if you use 15 for month, the year will be incremented by 1 (year + 1), and 3 will be used for the month.
 *
 * Because `UTC` is a static method of `Date`, you always use it as `Date.UTC()`, rather than as a method of a `Date` object you created.
*
 * The following statement creates a `Date` object using GMT instead of local time:
 *
 *     gmtDate = new Date(Date.UTC(96, 11, 1, 0, 0, 0));
 *
 * @param {Number} year A year after 1900.
 * @param {Number} month An integer between 0 and 11 representing the month.
 * @param {Number} date An integer between 1 and 31 representing the day of the month.
 * @param {Number} hrs An integer between 0 and 23 representing the hours.
 * @param {Number} min An integer between 0 and 59 representing the minutes.
 * @param {Number} sec An integer between 0 and 59 representing the seconds.
 * @param {Number} ms An integer between 0 and 999 representing the milliseconds.
 * @return {Number} Number of milliseconds since January 1, 1970, 00:00:00, universal time.
 */
Date.UTC = function UTC(year, month, date, hrs, min, sec, ms) {
    return 0;
};
//Methods
/**
 * @method getDate
 * Returns the numeric value corresponding to the current time.
 *
 * The second statement below assigns the value 25 to the variable `day`, based on the value of the `Date` object `Xmas95`.
 *
 *     Xmas95 = new Date("December 25, 1995 23:15:00")
 *     day = Xmas95.getDate()
 *
 * @return {Number} Value between 1 and 31.
 */
/**
 * @method getDay
 * Returns the numeric value corresponding to the current time.
 *
 * The value returned by `getDay` is an integer corresponding to the day of the week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.
 *
 * The second statement below assigns the value 1 to `weekday`, based on the value of the `Date` object `Xmas95`. December 25, 1995, is a Monday.
 *
 *     Xmas95 = new Date("December 25, 1995 23:15:00");
 *     weekday = Xmas95.getDay();
 *
 * @return {Number} A numeric representation of the day from Sunday (0) to
 * Saturday (6).
 */
Date.prototype.getDay = function getDay() {
    return 0;
};
/**
 * @method getFullYear
 * Returns the numeric value corresponding to the current time.
 *
 * The value returned by `getFullYear` is an absolute number. For dates between the years 1000 and 9999, `getFullYear` returns a four-digit number, for example, 1995. Use this function to make sure a year is compliant with years after 2000.
 *
 * Use this method instead of the `getYear` method.
 *
 * The following example assigns the four-digit value of the current year to the variable `yr`.
 *
 *     var today = new Date();
 *     var yr = today.getFullYear();
 *
 * @return {Number} Four digit representation of the year.
 */
Date.prototype.getFullYear = function getFullYear() {
    return 0;
};
/**
 * @method getHours
 * Returns the numeric value corresponding to the current time.
 *
 * The second statement below assigns the value 23 to the variable `hours`, based on the value of the `Date` object `Xmas95`.
 *
 *     Xmas95 = new Date("December 25, 1995 23:15:00")
 *     hours = Xmas95.getHours()
 *
 * @return {Number} Value between 0 and 23, using 24-hour clock.
 */
Date.prototype.getHours = function getHours() {
    return 0;
};
/**
 * @method getMilliseconds
 * Returns the numeric value corresponding to the current time.
 *
 * The following example assigns the milliseconds portion of the current time to the variable `ms`.
 *
 *     var ms;
 *     Today = new Date();
 *     ms = Today.getMilliseconds();
 *
 * @return {Number} A number between 0 and 999.
 */
Date.prototype.getMilliseconds = function getMilliseconds() {
    return 0;
};
/**
 * @method getMinutes
 * Returns the numeric value corresponding to the current time.
 *
 * The second statement below assigns the value 15 to the variable `minutes`, based on the value of the `Date` object `Xmas95`.
 *
 *     Xmas95 = new Date("December 25, 1995 23:15:00")
 *     minutes = Xmas95.getMinutes()
 *
 * @return {Number} Value between 0 and 59.
 */
Date.prototype.getMinutes = function getMinutes() {
    return 0;
};
/**
 * @method getMonth
 * Returns the numeric value corresponding to the current time.
 *
 * The second statement below assigns the value 11 to the variable `month`, based on the value of the `Date` object `Xmas95`.
 *
 *     Xmas95 = new Date("December 25, 1995 23:15:00")
 *     month = Xmas95.getMonth()
 *
 * @return {Number} An integer between 0 and 11. 0 corresponds to January, 1 to February, and so on.
 */
Date.prototype.getMonth = function getMonth() {
    return 0;
};
/**
 * @method getSeconds
 * Returns the numeric value corresponding to the current time.
 *
 * The second statement below assigns the value 30 to the variable `secs`, based on the value of the `Date` object `Xmas95`.
 *
 *     Xmas95 = new Date("December 25, 1995 23:15:30")
 *     secs = Xmas95.getSeconds()
 *
 * @return {Number} Value between 0 and 59.
 */
Date.prototype.getSeconds = function getSeconds() {
    return 0;
};
/**
 * @method getTime
 * Returns the numeric value corresponding to the current time.
 *
 * The value returned by the `getTime` method is the number of milliseconds since 1 January 1970
 * 00:00:00 UTC. You can use this method to help assign a date and time to another `Date` object.
 *
 * This method is functionally equivalent to the `valueOf` method.
 *
 * Using getTime for copying dates
 *
 * Constructing a date object with the identical time value.
 *
 *     var birthday = new Date(1994, 12, 10);
 *     var copy = new Date();
 *     copy.setTime(birthday.getTime());
 *
 * Measuring execution time
 *
 * Subtracting two subsequent getTime calls on newly generated Date objects, give the time span between these two calls. This can be used to calculate the executing time of some operations.
 *
 *     var end, start;
 *
 *     start = new Date();
 *     for (var i = 0; i < 1000; i++)
 *         Math.sqrt(i);
 *     end = new Date();
 *
 *     console.log("Operation took " + (end.getTime() - start.getTime()) + " msec");
 *
 * @return {Number} Number of milliseconds since 1/1/1970 (GMT).
 */
Date.prototype.getTime = function getTime() {
    return 0;
};
/**
 * @method getTimezoneOffset
 * Returns the numeric value corresponding to the current time.
 *
 * The time-zone offset is the difference, in minutes, between UTC and local time. Note that this means that the offset is positive if the local time zone is behind UTC and negative if it is ahead.
 * For example, if your time zone is UTC+10 (Australian Eastern Standard Time), -600 will be returned.
 * Daylight savings time prevents this value from being a constant even for a given locale
 *
 *     x = new Date()
 *     currentTimeZoneOffsetInHours = x.getTimezoneOffset()/60
 *
 * @return {Number} Minutes between GMT and local time.
 */
Date.prototype.getTimezoneOffset = function getTimezoneOffset() {
    return 0;
};
/**
 * @method getUTCDate
 * Returns the numeric value corresponding to the current time.
 *
 * The following example assigns the day portion of the current date to the variable `d`.
 *
 *     var d;
 *     Today = new Date();
 *     d = Today.getUTCDate();
 *
 * @return {Number} Integer between 1 and 31 representing the day.
 */
Date.prototype.getUTCDate = function getUTCDate() {
    return 0;
};
/**
 * @method getUTCDay
 * Returns the numeric value corresponding to the current time.
 *
 * The following example assigns the weekday portion of the current date to the variable `weekday`.
 *
 *     var weekday;
 *     Today = new Date()
 *     weekday = Today.getUTCDay()
 *
 * @return {Number} A numeric representation of the day from Sunday (0) to
 * Saturday (6).
 */
Date.prototype.getUTCDay = function getUTCDay() {
    return 0;
};
/**
 * @method getUTCFullYear
 * Returns the numeric value corresponding to the current time.
 *
 * The following example assigns the four-digit value of the current year to the variable `yr`.
 *
 *     var yr;
 *     Today = new Date();
 *     yr = Today.getUTCFullYear();
 *
 * @return {Number} Four digit representation of the year.
 */
Date.prototype.getUTCFullYear = function getUTCFullYear() {
    return 0;
};
/**
 * @method getUTCHours
 * Returns the numeric value corresponding to the current time.
 *
 * The following example assigns the hours portion of the current time to the variable `hrs`.
 *
 *     var hrs;
 *     Today = new Date();
 *     hrs = Today.getUTCHours();
 *
 * @return {Number} Value between 0 and 23.
 */
Date.prototype.getUTCHours = function getUTCHours() {
    return 0;
};
/**
 * @method getUTCMilliseconds
 * Returns the numeric value corresponding to the current time.
 *
 * The following example assigns the milliseconds portion of the current time to the variable `ms`.
 *
 *     var ms;
 *     Today = new Date();
 *     ms = Today.getUTCMilliseconds();
 *
 * @return {Number} Milliseconds portion of the Date.
 */
Date.prototype.getUTCMilliseconds = function getUTCMilliseconds() {
    return 0;
};
/**
 * @method getUTCMinutes
 * Returns the numeric value corresponding to the current time.
 *
 * The following example assigns the minutes portion of the current time to the variable `min`.
 *
 *     var min;
 *     Today = new Date();
 *     min = Today.getUTCMinutes();
 *
 * @return {Number} Value between 0 and 59.
 */
Date.prototype.getUTCMinutes = function getUTCMinutes() {
    return 0;
};
/**
 * @method getUTCMonth
 * Returns the numeric value corresponding to the current time.
 *
 * The following example assigns the month portion of the current date to the variable `mon`.
 *
 *     var mon;
 *     Today = new Date();
 *     mon = Today.getUTCMonth();
 *
 * @return {Number} Value between 0 (January) and 11 (December).
*/
Date.prototype.getUTCMonth = function getUTCMonth() {
    return 0;
};
/**
 * @method getUTCSeconds
 * Returns the numeric value corresponding to the current time.
 *
 * The following example assigns the seconds portion of the current time to the variable `sec`.
 *
 *     var sec;
 *     Today = new Date();
 *     sec = Today.getUTCSeconds();
 *
 * @return {Number} Value between 0 and 59.
*/
Date.prototype.getUTCSeconds = function getUTCSeconds() {
    return 0;
};
/**
 * @method setDate
 * Sets the day of the month (1-31) for a specified date according to local time.
 *
 * If the parameter you specify is outside of the expected range, `setDate` attempts to update the date information in the `Date` object accordingly. For example, if you use 0 for `dayValue`, the date will be set to the last day of the previous month.
 *
 * The second statement below changes the day for theBigDay to July 24 from its original value.
 *
 *     theBigDay = new Date("July 27, 1962 23:30:00")
 *     theBigDay.setDate(24)
 *
 * @param {Number} dayValue An integer from 1 to 31, representing the day of the month.
 * @return {Number} New date represented as milliseconds.
*/
Date.prototype.setDate = function setDate(dayValue) {
    return 0;
};
/**
 * @method setFullYear
 * Sets the full year (4 digits for 4-digit years) for a specified date according to local time.
 *
 * If you do not specify the `monthValue` and `dayValue` parameters, the values returned from the `getMonth` and `getDate` methods are used.
 *
 * If a parameter you specify is outside of the expected range, `setFullYear` attempts to update the other parameters and the date information in the `Date` object accordingly. For example, if you specify 15 for monthValue, the year is incremented by 1 (year + 1), and 3 is used for the month.
 *
 *     theBigDay = new Date();
 *     theBigDay.setFullYear(1997);
 *
 * @param {Number} yearValue An integer specifying the numeric value of the year, for example, 1995.
 * @param {Number} monthValue An integer between 0 and 11 representing the months January through
 * December.
 * @param {Number} dayValue An integer between 1 and 31 representing the day of the month. If you specify the `dayValue` parameter, you must also specify the `monthValue`.
 * @return {Number} New date represented as milliseconds.
 */
Date.prototype.setFullYear = function setFullYear(yearValue, monthValue, dayValue) {
    return 0;
};
/**
 * @method setHours
 * Sets the hours (0-23) for a specified date according to local time.
 *
 * If you do not specify the `minutesValue`, `secondsValue`, and `msValue` parameters, the value returned from the `getUTCMinutes`, `getUTCSeconds`, and `getMilliseconds` methods are used.
 *
 * If a parameter you specify is outside of the expected range, setHours attempts to update the date information in the `Date` object accordingly. For example, if you use 100 for `secondsValue`, the minutes will be incremented by 1 (min + 1), and 40 will be used for seconds.
 *
 *     theBigDay.setHours(7)
 *
 * @param {Number} hoursValue An integer between 0 and 23, representing the hour.
 * @param {Number} minutesValue An integer between 0 and 59, representing the minutes.
 * @param {Number} secondsValue An integer between 0 and 59, representing the seconds. If you specify the `secondsValue` parameter, you must also specify the `minutesValue`.
 * @param {Number} msValue A number between 0 and 999, representing the milliseconds. If you specify the `msValue` parameter, you must also specify the `minutesValue` and `secondsValue`.
 * @return {Number} New date represented as milliseconds.
 */
Date.prototype.setHours = function setHours(hoursValue, minutesValue, secondsValue, msValue) {
    return 0;
};
/**
 * @method setMilliseconds
 * Sets the milliseconds (0-999) for a specified date according to local time.
 *
 * If you specify a number outside the expected range, the date information in the `Date` object is updated accordingly. For example, if you specify 1005, the number of seconds is incremented by 1, and 5 is used for the milliseconds.
 *
 *     theBigDay = new Date();
 *     theBigDay.setMilliseconds(100);
 *
 * @param {Number} millisecondsValue A number between 0 and 999, representing the milliseconds.
 * @return {Number} New date represented as milliseconds.
 */
Date.prototype.setMilliseconds = function setMilliseconds(millisecondsValue) {
    return 0;
};
/**
 * @method setMinutes
 * Sets the minutes (0-59) for a specified date according to local time.
 *
 * If you do not specify the `secondsValue` and `msValue` parameters, the values returned from `getSeconds` and `getMilliseconds` methods are used.
 *
 * If a parameter you specify is outside of the expected range, `setMinutes` attempts to update the date information in the `Date` object accordingly. For example, if you use 100 for `secondsValue`, the minutes (`minutesValue`) will be incremented by 1 (minutesValue + 1), and 40 will be used for seconds.
 *
 *     theBigDay.setMinutes(45)
 *
 * @param {Number} minutesValue An integer between 0 and 59, representing the minutes.
 * @param {Number} secondsValue An integer between 0 and 59, representing the seconds. If you specify the `secondsValue` parameter, you must also specify the `minutesValue`.
 * @param {Number} msValue A number between 0 and 999, representing the milliseconds. If you specify the `msValue` parameter, you must also specify the `minutesValue` and `secondsValue`.
 * @return {Number} New date represented as milliseconds.
 */
Date.prototype.setMinutes = function setMinutes(minutesValue, secondsValue, msValue) {
    return 0;
};
/**
 * @method setMonth
 * Sets the month (0-11) for a specified date according to local time.
 *
 * If you do not specify the `dayValue` parameter, the value returned from the `getDate` method is used.
 *
 * If a parameter you specify is outside of the expected range, `setMonth` attempts to update the date information in the `Date` object accordingly. For example, if you use 15 for `monthValue`, the year will be incremented by 1 (year + 1), and 3 will be used for month.
 *
 *     theBigDay.setMonth(6)
 *
 * @param {Number} monthValue An integer between 0 and 11 (representing the months January through
 * December).
 * @param {Number} dayValue An integer from 1 to 31, representing the day of the month.
 * @return {Number} New date represented as milliseconds.
 */
Date.prototype.setMonth = function setMonth(monthValue, dayValue) {
    return 0;
};
/**
 * @method setSeconds
 * Sets the seconds (0-59) for a specified date according to local time.
 *
 * If you do not specify the `msValue` parameter, the value returned from the `getMilliseconds` method is used.
 *
 * If a parameter you specify is outside of the expected range, `setSeconds` attempts to update the date information in the `Date` object accordingly. For example, if you use 100 for `secondsValue`, the minutes stored in the `Date` object will be incremented by 1, and 40 will be used for seconds.
 *
 *     theBigDay.setSeconds(30)
 *
 * @param {Number} secondsValue An integer between 0 and 59.
 * @param {Number} msValue A number between 0 and 999, representing the milliseconds. If you specify the `msValue` parameter, you must also specify the `minutesValue` and `secondsValue`.
 * @return {Number} New date represented as milliseconds.
 */
Date.prototype.setSeconds = function setSeconds(secondsValue, msValue) {
    return 0;
};
/**
 * @method setTime
 * Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.
 *
 * Use the `setTime` method to help assign a date and time to another `Date` object.
 *
 *     theBigDay = new Date("July 1, 1999")
 *     sameAsBigDay = new Date()
 *     sameAsBigDay.setTime(theBigDay.getTime())
 *
 * @param {Number} timeValue An integer representing the number of milliseconds since 1 January 1970, 00:00:00 UTC.
 * @return {Number} New date represented as milliseconds.
 */
Date.prototype.setTime = function setTime(timeValue) {
    return 0;
};
/**
 * @method setUTCDate
 * Sets the day of the month (1-31) for a specified date according to universal time.
 *
 * If a parameter you specify is outside of the expected range, `setUTCDate` attempts to update the date information in the `Date` object accordingly. For example, if you use 40 for `dayValue`, and the month stored in the `Date` object is June, the day will be changed to 10 and the month will be incremented to July.
 *
 *     theBigDay = new Date();
 *     theBigDay.setUTCDate(20);
 *
 * @param {Number} dayValue An integer from 1 to 31, representing the day of the month.
 * @return {Number} New date represented as milliseconds.
 */
Date.prototype.setUTCDate = function setUTCDate(dayValue) {
    return 0;
};
/**
 * @method setUTCFullYear
 * Sets the full year (4 digits for 4-digit years) for a specified date according to universal time.
 *
 * If you do not specify the `monthValue` and `dayValue` parameters, the values returned from the `getMonth` and `getDate` methods are used.
 *
 * If a parameter you specify is outside of the expected range, `setUTCFullYear` attempts to update the other parameters and the date information in the `Date` object accordingly. For example, if you specify 15 for `monthValue`, the year is incremented by 1 (year + 1), and 3 is used for the month.
 *
 *     theBigDay = new Date();
 *     theBigDay.setUTCFullYear(1997);
 *
 * @param {Number} yearValue An integer specifying the numeric value of the year, for example, 1995.
 * @param {Number} monthValue An integer between 0 and 11 representing the months January through
 * December.
 * @param {Number} dayValue An integer between 1 and 31 representing the day of the month. If you specify the `dayValue` parameter, you must also specify the `monthValue`.
 * @return {Number} New date represented as milliseconds.
 */
Date.prototype.setUTCFullYear = function setUTCFullYear(yearValue, monthValue, dayValue) {
    return 0;
};
/**
 * @method setUTCHours
 * Sets the hour (0-23) for a specified date according to universal time.
 *
 * If you do not specify the `minutesValue`, `secondsValue`, and `msValue` parameters, the values returned from the `getUTCMinutes`, `getUTCSeconds`, and `getUTCMilliseconds` methods are used.
 *
 * If a parameter you specify is outside of the expected range, `setUTCHours` attempts to update the date information in the `Date` object accordingly. For example, if you use 100 for `secondsValue`, the minutes will be incremented by 1 (min + 1), and 40 will be used for seconds.
 *
 *     theBigDay = new Date();
 *     theBigDay.setUTCHours(8);
 *
 * @param {Number} hoursValue An integer between 0 and 23, representing the hour.
 * @param {Number} minutesValue An integer between 0 and 59, representing the minutes.
 * @param {Number} secondsValue An integer between 0 and 59, representing the seconds. If you specify the `secondsValue` parameter, you must also specify the `minutesValue`.
 * @param {Number} msValue A number between 0 and 999, representing the milliseconds. If you specify the `msValue` parameter, you must also specify the `minutesValue` and `secondsValue`.
 * @return {Number} New date represented as milliseconds.
 */
Date.prototype.setUTCHours = function setUTCHours(hoursValue, minutesValue, secondsValue, msValue) {
    return 0;
};
/**
 * @method setUTCMilliseconds
 * Sets the milliseconds (0-999) for a specified date according to universal time.
 *
 * If a parameter you specify is outside of the expected range, `setUTCMilliseconds` attempts to update the date information in the `Date` object accordingly. For example, if you use 1100 for `millisecondsValue`, the seconds stored in the Date object will be incremented by 1, and 100 will be used for milliseconds.
 *
 *     theBigDay = new Date();
 *     theBigDay.setUTCMilliseconds(500);
 *
 * @param {Number} millisecondsValue A number between 0 and 999, representing the milliseconds.
 * @return {Number} New date represented as milliseconds.
 */
Date.prototype.setUTCMilliseconds = function setUTCMilliseconds(millisecondsValue) {
    return 0;
};
/**
 * @method setUTCMinutes
 * Sets the minutes (0-59) for a specified date according to universal time.
 *
 * If you do not specify the `secondsValue` and `msValue` parameters, the values returned from `getUTCSeconds` and `getUTCMilliseconds` methods are used.
 *
 * If a parameter you specify is outside of the expected range, `setUTCMinutes` attempts to update the date information in the `Date` object accordingly. For example, if you use 100 for `secondsValue`, the minutes (`minutesValue`) will be incremented by 1 (`minutesValue` + 1), and 40 will be used for seconds.
 *
 *     theBigDay = new Date();
 *     theBigDay.setUTCMinutes(43);
 *
 * @param {Number} minutesValue An integer between 0 and 59, representing the minutes.
 * @param {Number} secondsValue An integer between 0 and 59, representing the seconds. If you specify the `secondsValue` parameter, you must also specify the `minutesValue`.
 * @param {Number} msValue A number between 0 and 999, representing the milliseconds. If you specify the `msValue` parameter, you must also specify the `minutesValue` and `secondsValue`.
 * @return {Number} New date represented as milliseconds.
 */
Date.prototype.setUTCMinutes = function setUTCMinutes(minutesValue, secondsValue, msValue) {
    return 0;
};
/**
 * @method setUTCMonth
 * Sets the month (0-11) for a specified date according to universal time.
 *
 * If you do not specify the `dayValue` parameter, the value returned from the `getUTCDate` method is used.
 *
 * If a parameter you specify is outside of the expected range, `setUTCMonth` attempts to update the date information in the `Date` object accordingly. For example, if you use 15 for `monthValue`, the year will be incremented by 1 (year + 1), and 3 will be used for month.
 *
 *     theBigDay = new Date();
 *     theBigDay.setUTCMonth(11);
 *
 * @param {Number} monthValue An integer between 0 and 11, representing the months January through
 * December.
 * @param {Number} dayValue An integer from 1 to 31, representing the day of the month.
 * @return {Number} New date represented as milliseconds.
 */
Date.prototype.setUTCMonth = function setUTCMonth(monthValue, dayValue) {
    return 0;
};
/**
 * @method setUTCSeconds
 * Sets the seconds (0-59) for a specified date according to universal time.
 *
 * If you do not specify the `msValue` parameter, the value returned from the `getUTCMilliseconds` methods is used.
 *
 * If a parameter you specify is outside of the expected range, `setUTCSeconds` attempts to update the date information in the `Date` object accordingly. For example, if you use 100 for `secondsValue`, the minutes stored in the `Date` object will be incremented by 1, and 40 will be used for seconds.
 *
 *     theBigDay = new Date();
 *     theBigDay.setUTCSeconds(20);
 *
 * @param {Number} secondsValue An integer between 0 and 59.
 * @param {Number} msValue A number between 0 and 999, representing the milliseconds.
 * @return {Number} New date represented as milliseconds.
 */
Date.prototype.setUTCSeconds = function setUTCSeconds(secondsValue, msValue) {
    return 0;
};
/**
 * @method toDateString
 * Returns the "date" portion of the Date as a human-readable string in American English.
 *
 * {@link Date} instances refer to a specific point in time. Calling `toString` will return the date formatted in a human readable form in American English. In SpiderMonkey, this consists of the date portion (day, month, and year) followed by the time portion (hours, minutes, seconds, and time zone). Sometimes it is desirable to obtain a string of the date portion; such a thing can be accomplished with the `toDateString` method.
 *
 * The `toDateString` method is especially useful because compliant engines implementing ECMA-262 may differ in the string obtained from `toString` for `Date` objects, as the format is implementation- dependent and simple string slicing approaches may not produce consistent results across multiple engines.
 *
 *     var d = new Date(1993, 6, 28, 14, 39, 7);
 *     println(d.toString()); // prints Wed Jul 28 1993 14:39:07 GMT-0600 (PDT)
 *     println(d.toDateString()); // prints Wed Jul 28 1993
 *
 * @return {String} Human-readable string, in local time.
 */
Date.prototype.toDateString = function toDateString() {
    return '';
};
/**
 * @method toLocaleDateString
 * Returns the "date" portion of the Date as a string, using the current locale's conventions.
 *
 * The `toLocaleDateString` method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04/15/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 1900 or over 2000, `toLocaleDateString` returns a string that is not year-2000 compliant. `toLocaleDateString` behaves similarly to `toString` when converting a year that the operating system does not properly format.
 *
 * Methods such as `getDate`, `getMonth`, and `getFullYear` give more portable results than `toLocaleDateString`. Use `toLocaleDateString` when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.
 *
 * In the following example, `today` is a `Date` object:
 *
 *     today = new Date(95,11,18,17,28,35) //months are represented by 0 to 11
 *     today.toLocaleDateString()
 *
 * In this example, `toLocaleDateString` returns a string value that is similar to the following form.
 * The exact format depends on the platform, locale and user's settings.
 *
 *     12/18/95
 *
 * You shouldn't use this method in contexts where you rely on a particular format or locale.
 *
 *     "Last visit: " + someDate.toLocaleDateString(); // Good example
 *     "Last visit was at " + someDate.toLocaleDateString(); // Bad example
 *
 * @return {String} Human-readable string that may be formatted differently depending on the country.
 */
Date.prototype.toLocaleDateString = function toLocaleDateString() {
    return '';
};
/**
 * @method toLocaleString
 * Converts a date to a string, using the current locale's conventions.
 * Overrides the `Object.toLocaleString` method.
 *
 * The `toLocaleString` method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04/15/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 1900 or over 2000, `toLocaleString` returns a string that is not year-2000 compliant. `toLocaleString` behaves similarly to `toString` when converting a year that the operating system does not properly format.
 *
 * Methods such as `getDate`, `getMonth`, `getFullYear`, `getHours`, `getMinutes`, and `getSeconds` give more portable results than `toLocaleString`. Use `toLocaleString` when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.
 *
 * In the following example, `today` is a `Date` object:
 *
 *     today = new Date(95,11,18,17,28,35); //months are represented by 0 to 11
 *     today.toLocaleString();
 *
 * In this example, `toLocaleString` returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings.
 *
 *     12/18/95 17:28:35
 *
 * You shouldn't use this method in contexts where you rely on a particular format or locale.
 *
 *     "Last visit: " + someDate.toLocaleString(); // Good example
 *     "Last visit was at " + someDate.toLocaleString(); // Bad example
 *
 * @return {String} Human-readable string that may be formatted differently depending on the country.
 */
Date.prototype.toLocaleString = function toLocaleString() {
    return '';
};
/**
 * @method toLocaleTimeString
 * Returns the "time" portion of the Date as a string, using the current locale's conventions.
 *
 * The `toLocaleTimeString` method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04/15/98), whereas in Germany the date appears before the month (15.04.98).
 *
 * Methods such as `getHours`, `getMinutes`, and `getSeconds` give more consistent results than `toLocaleTimeString`. Use `toLocaleTimeString` when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.
 *
 * In the following example, `today` is a `Date` object:
 *
 *     today = new Date(95,11,18,17,28,35) //months are represented by 0 to 11
 *     today.toLocaleTimeString()
 *
 * In this example, `toLocaleTimeString` returns a string value that is similar to the following form.
 * The exact format depends on the platform.
 *
 *     17:28:35
 *
 * You shouldn't use this method in contexts where you rely on a particular format or locale.
 *
 *     "Last visit: " + someDate.toLocaleTimeString(); // Good example
 *     "Last visit was at " + someDate.toLocaleTimeString(); // Bad example
 *
 * @return {String} Human-readable string that may be formatted differently depending on the country.
 */
Date.prototype.toLocaleTimeString = function toLocaleTimeString() {
    return '';
};
/**
 * @method toString
 * Returns a string representing the specified Date object. Overrides the `Object.prototype.toString` method.
 *
 * The `Date` object overrides the toString method of the Object object; it does not inherit `Object.toString`. For `Date` objects, the `toString` method returns a string representation of the object.
 *
 * `toString` always returns a string representation of the date in American English.
 *
 * JavaScript calls the `toString` method automatically when a date is to be represented as a text value or when a date is referred to in a string concatenation.
 *
 * The following assigns the `toString` value of a `Date` object to `myVar`:
 *
 *     x = new Date();
 *     myVar=x.toString();   //assigns a value to myVar similar to:
 *     //Mon Sep 28 1998 14:36:22 GMT-0700 (Pacific Daylight Time)
 *
 * @return {String} Human-readable string of the date in local time.
 */
Date.prototype.toString = function toString() {
    return '';
};
/**
 * @method toTimeString
 * Returns the "time" portion of the Date as a human-readable string.
 *
 * {@link Date} instances refer to a specific point in time. Calling `toString` will return the date formatted in a human readable form in American English. In SpiderMonkey, this consists of the date portion (day, month, and year) followed by the time portion (hours, minutes, seconds, and time zone). Sometimes it is desirable to obtain a string of the time portion; such a thing can be accomplished with the `toTimeString` method.
 *
 * The `toTimeString` method is especially useful because compliant engines implementing ECMA-262 may differ in the string obtained from `toString` for `Date` objects, as the format is implementation- dependent; simple string slicing approaches may not produce consistent results across multiple engines.
 *
 *     var d = new Date(1993, 6, 28, 14, 39, 7);
 *     println(d.toString()); // prints Wed Jul 28 1993 14:39:07 GMT-0600 (PDT)
 *     println(d.toTimeString()); // prints 14:39:07 GMT-0600 (PDT)
 *
 * @return {String} Human-readable string of the date in local time.
 */
Date.prototype.toTimeString = function toTimeString() {
    return '';
};
/**
 * @method toUTCString
 * Converts a date to a string, using the universal time convention.
 *
 * The value returned by `toUTCString` is a readable string in American English in the UTC time zone.
 * The format of the return value may vary according to the platform.
 *
 *     var today = new Date();
 *     var UTCstring = today.toUTCString();
 *     // Mon, 03 Jul 2006 21:44:38 GMT
 *
 * @return {String} String of the date in UTC.
 */
Date.prototype.toUTCString = function toUTCString() {
    return '';
};
/**
 * @method valueOf
 * Returns the primitive value of a Date object. Overrides the
 * Object.prototype.valueOf method.
 *
 * The `valueOf` method returns the primitive value of a `Date` object as a number data type, the number of milliseconds since midnight 01 January, 1970 UTC.
 *
 * This method is functionally equivalent to the `getTime` method.
 *
 * This method is usually called internally by JavaScript and not explicitly in code.
 *
 *     x = new Date(56, 6, 17);
 *     myVar = x.valueOf();      //assigns -424713600000 to myVar
 *
 * @return {Number} Date represented as milliseconds.
 */
Date.prototype.valueOf = function valueOf() {
    return 0;
};
var nwfjs = nwfjs || {};
/**
 * @class Function
 *
 * Every function in JavaScript is actually a `Function` object.
 *
 * `Function` objects created with the `Function` constructor are parsed when the function is created. This is less efficient than declaring a function and calling it within your code, because functions declared with the function statement are parsed with the rest of the code.
 *
 * All arguments passed to the function are treated as the names of the identifiers of the parameters in the function to be created, in the order in which they are passed.
 *
 * Invoking the `Function` constructor as a function (without using the `new` operator) has the same effect as invoking it as a constructor.
 *
 * # Specifying arguments with the `Function` constructor
 *
 * The following code creates a `Function` object that takes two arguments.
 *
 *     // Example can be run directly in your JavaScript console
 *
 *     // Create a function that takes two arguments and returns the sum of those arguments
 *     var adder = new Function("a", "b", "return a + b");
 *
 *     // Call the function
 *     adder(2, 6);
 *     // > 8
 *
 * The arguments "a" and "b" are formal argument names that are used in the
 * function body, "return a + b".
 *
 * <div class="notice">
 * Documentation for this class comes from <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function">MDN</a> and is available under <a href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons: Attribution-Sharealike license</a>.
 * </div>
 */
nwfjs.Function = Function;
/**
 * @method constructor
 * Creates new Function object.
 *
 * @param {String...} args
 * Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript identifier or a list of such strings separated with a comma; for example "`x`", "`theValue`", or "`a,b`".
 * @param {String} functionBody
 * A string containing the JavaScript statements comprising the function definition.
 */
// constructor(args) {}
// Properties
/**
 * @property {Number} length
 * Specifies the number of arguments expected by the function.
 */
Function.prototype.length = 0;
//Methods
/**
 * @method apply
 * Applies the method of another object in the context of a different object (the calling object); arguments can be passed as an `Array` object.
 *
 * You can assign a different this object when calling an existing function. `this` refers to the current object, the calling object. With `apply`, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.
 *
 * `apply` is very similar to call, except for the type of arguments it supports. You can use an arguments array instead of a named set of parameters. With `apply`, you can use an array literal, for example, `fun.apply(this, ['eat', 'bananas'])`, or an `Array` object, for example, `fun.apply(this, new Array('eat', 'bananas'))`.
 *
 * You can also use arguments for the `argsArray` parameter. `arguments` is a local variable of a function. It can be used for all unspecified arguments of the called object. Thus, you do not have to know the arguments of the called object when you use the `apply` method. You can use `arguments` to pass all the arguments to the called object. The called object is then responsible for handling the arguments.
 *
 * Since ECMAScript 5th Edition you can also use any kind of object which is array like, so in practice this means it's going to have a property length and integer properties in the range `[0...length)`. As an example you can now use a `NodeList` or a custom object like `{'length': 2,
 * '0': 'eat', '1': 'bananas'}`.
 *
 * You can use `apply` to chain constructors for an object, similar to Java. In the following example, the constructor for the `Product` object is defined with two parameters, `name` and `value`. Two other functions `Food` and `Toy` invoke `Product` passing `this` and `arguments`. `Product` initializes the properties `name` and `price`, both specialized functions define the category. In this example, the `arguments` object is fully passed to the product constructor and corresponds to the two defined parameters.
 *
 *     function Product(name, price) {
 *         this.name = name;
 *         this.price = price;
 *
 *         if (price < 0)
 *             throw RangeError('Cannot create product "' + name + '" with a negative price');
 *         return this;
 *     }
 *
 *     function Food(name, price) {
 *         Product.apply(this, arguments);
 *         this.category = 'food';
 *     }
 *     Food.prototype = new Product();
 *
 *     function Toy(name, price) {
 *         Product.apply(this, arguments);
 *         this.category = 'toy';
 *     }
 *     Toy.prototype = new Product();
 *
 *     var cheese = new Food('feta', 5);
 *     var fun = new Toy('robot', 40);
 *
 * Clever usage of `apply` allows you to use built-ins functions for some tasks that otherwise probably would have been written by looping over the array values. As an example here we are going to use `Math.max`/`Math.min` to find out the maximum/minimum value in an array.
 *
 *     //min/max number in an array
 *     var numbers = [5, 6, 2, 3, 7];
 *
 *     //using Math.min/Math.max apply
 *     var max = Math.max.apply(null, numbers); // This about equal to Math.max(numbers[0], ...) or
 *     // Math.max(5, 6, ..)
 *     var min = Math.min.apply(null, numbers);
 *
 *     //vs. simple loop based algorithm
 *     max = -Infinity, min = +Infinity;
 *
 *     for (var i = 0; i < numbers.length; i++) {
 *     if (numbers[i] > max)
 *         max = numbers[i];
 *     if (numbers[i] < min)
 *         min = numbers[i];
 *     }
 *
 * But beware: in using `apply` this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines, because the limit (indeed even the nature of any excessively large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. (To illustrate this latter case: if such an engine had a limit of four arguments [actual limits are of course significantly higher], it would be as if the arguments 5, 6, 2, 3 had been passed to apply in the examples above, rather than the full array.)  If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a
 * time:
 *
 *     function minOfArray(arr)
 *     {
 *         var min = Infinity;
 *         var QUANTUM = 32768;
 *         for (var i = 0, len = arr.length; i < len; i += QUANTUM)
 *         {
 *             var submin = Math.min.apply(null, numbers.slice(i, Math.min(i + QUANTUM, len)));
 *             min = Math.min(submin, min);
 *         }
 *     return min;
 *     }
 *
 *     var min = minOfArray([5, 6, 2, 3, 7]);
 *
 * @param {Object} thisArg The value of this provided for the call to `fun`. Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code, `null` and `undefined` will be replaced with the global object, and primitive values will be boxed.
 * @param {Array} argsArray An array-like object, specifying the arguments with which fun should be called, or null or undefined if no arguments should be provided to the function.
 * @return {Object} Returns what the function returns.
 */
// Function.prototype.apply = function apply(thisArg, argsArray?) {
// 	return {};
// }
/**
 * @method call
 * Calls (executes) a method of another object in the context of a different object (the calling object); arguments can be passed as they are.
 *
 * You can assign a different this object when calling an existing function. `this` refers to the current object, the calling object.
 *
 * With `call`, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.
 *
 * You can use call to chain constructors for an object, similar to Java. In the following example, the constructor for the product object is defined with two parameters, name and value. Another object, `prod_dept`, initializes its unique variable (`dept`) and calls the constructor for `product` in its constructor to initialize the other variables.
 *
 *     function Product(name, price) {
 *         this.name = name;
 *         this.price = price;
 *
 *         if (price < 0)
 *             throw RangeError('Cannot create product "' + name + '" with a negative price');
 *         return this;
 *     }
 *
 *     function Food(name, price) {
 *         Product.call(this, name, price);
 *         this.category = 'food';
 *     }
 *     Food.prototype = new Product();
 *
 *     function Toy(name, price) {
 *         Product.call(this, name, price);
 *         this.category = 'toy';
 *     }
 *     Toy.prototype = new Product();
 *
 *     var cheese = new Food('feta', 5);
 *     var fun = new Toy('robot', 40);
 *
 * In this purely constructed example, we create anonymous function and use `call` to invoke it on every object in an array. The main purpose of the anonymous function here is to add a print function to every object, which is able to print the right index of the object in the array.
 * Passing the object as `this` value was not strictly necessary, but is done for explanatory purpose.
 *
 *     var animals = [
 *     {species: 'Lion', name: 'King'},
 *     {species: 'Whale', name: 'Fail'}
 *     ];
 *
 *     for (var i = 0; i < animals.length; i++) {
 *         (function (i) {
 *         this.print = function () {
 *             console.log('#' + i  + ' ' + this.species + ': ' + this.name);
 *         }
 *     }).call(animals[i], i);
 *     }
 *
 * @param {Object} thisArg The value of this provided for the call to `fun`. Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code, `null` and `undefined` will be replaced with the global object, and primitive values will be boxed.
 * @param {Object...} args Arguments for the object.
 * @return {Object} Returns what the function returns.
 */
// Function.prototype.call = function call(thisArg, args){
// 	return {};
// }
/**
 * @method toString
 * Returns a string representing the source code of the function. Overrides the `Object.toString` method.
 *
 * The {@link Function} object overrides the `toString` method of the `Object` object; it does not inherit `Object.toString`. For `Function` objects, the `toString` method returns a string representation of the object.
 *
 * JavaScript calls the `toString` method automatically when a `Function` is to be represented as a text value or when a `Function` is referred to in a string concatenation.
 *
 * For `Function` objects, the built-in `toString` method decompiles the function back into the JavaScript source that defines the function. This string includes the `function` keyword, the argument list, curly braces, and function body.
 *
 * @return {String} The function as a string.
 */
// Function.prototype.toString = function toString(): string {
// 	return '';
// } 
var nwfjs = nwfjs || {};
/**
 * @class Number
 * @alternateClassName int
 * @alternateClassName uint8
 * @alternateClassName uint16
 * @alternateClassName uint32
 * @alternateClassName uint64
 * @alternateClassName float
 *
 * Creates a wrapper object to allow you to work with numerical values.
 *
 * The primary uses for the `Number` object are:
 *
 * If the argument cannot be converted into a number, it returns `NaN`.
 *
 * In a non-constructor context (i.e., without the `new` operator), `Number` can be used to perform a type conversion.
 *
 * # Using the `Number` object to assign values to numeric variables
 *
 * The following example uses the `Number` object's properties to assign values to several numeric variables:
 *
 *     biggestNum = Number.MAX_VALUE;
 *     smallestNum = Number.MIN_VALUE;
 *     infiniteNum = Number.POSITIVE_INFINITY;
 *     negInfiniteNum = Number.NEGATIVE_INFINITY;
 *     notANum = Number.NaN;
 *
 * # Using `Number` to convert a `Date` object
 *
 * The following example converts the `Date` object to a numerical value using `Number` as a function:
 *
 *     var d = new Date("December 17, 1995 03:24:00");
 *     print(Number(d));
 *
 * This displays "819199440000".
 *
 *
 * <div class="notice">
 * Documentation for this class comes from <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number">MDN</a> and is available under <a href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons: Attribution-Sharealike license</a>.
 * </div>
 */
nwfjs.Number = Number;
/**
 * @method constructor
 * Creates new Number object.
 * @param value
 * The numeric value of the object being created.
 */
//Properties
/**
 * @property {Number} MAX_VALUE
 * @static
 * The largest positive representable number. The largest negative representable number is `-MAX_VALUE`.
 *
 * The `MAX_VALUE` property has a value of approximately 1.79E+308. Values larger than `MAX_VALUE` are represented as `"Infinity"`.
 *
 * Because `MAX_VALUE` is a static property of `Number`, you always use it as `Number.MAX_VALUE`, rather than as a property of a `Number` object you created.
 *
 * The following code multiplies two numeric values. If the result is less than or equal to `MAX_VALUE`, the `func1` function is called; otherwise, the `func2` function is called.
 *
 *     if (num1 * num2 <= Number.MAX_VALUE)
 *         func1();
 *     else
 *         func2();
 */
/**
 * @property {Number} MIN_VALUE
 * @static
 * The smallest positive representable number -- that is, the positive number closest to zero (without actually being zero). The smallest negative representable number is `-MIN_VALUE`.
 *
 * The `MIN_VALUE` property is the number closest to 0, not the most negative number, that JavaScript can represent.
 *
 * `MIN_VALUE` has a value of approximately 5e-324. Values smaller than `MIN_VALUE` ("underflow values") are converted to 0.
 *
 * Because `MIN_VALUE` is a static property of `Number`, you always use it as `Number.MIN_VALUE`, rather than as a property of a `Number` object you created.
 *
 * The following code divides two numeric values. If the result is greater than or equal to `MIN_VALUE`, the `func1` function is called; otherwise, the `func2` function is called.
 *
 *     if (num1 / num2 >= Number.MIN_VALUE)
 *         func1()
 *     else
 *         func2()
 */
/**
 * @property {Number} NaN
 * @static
 * Special "not a number" value.
 */
/**
 * @property {Number} NEGATIVE_INFINITY
 * Special value representing negative infinity; returned on overflow.
 *
 * The value of `Number.NEGATIVE_INFINITY` is the same as the negative value of the global object's Infinity property.
 *
 * This value behaves slightly differently than mathematical infinity:
 *
 * *   Any positive value, including `POSITIVE_INFINITY`, multiplied by `NEGATIVE_INFINITY` is `NEGATIVE_INFINITY`.
 * *   Any negative value, including `NEGATIVE_INFINITY`, multiplied by `NEGATIVE_INFINITY` is `POSITIVE_INFINITY`.
 * *   Zero multiplied by `NEGATIVE_INFINITY` is NaN.
 * *   NaN multiplied by `NEGATIVE_INFINITY` is NaN.
 * *   `NEGATIVE_INFINITY`, divided by any negative value except `NEGATIVE_INFINITY`, is `POSITIVE_INFINITY`.
 * *   `NEGATIVE_INFINITY`, divided by any positive value except `POSITIVE_INFINITY`, is `NEGATIVE_INFINITY`.
 * *   `NEGATIVE_INFINITY`, divided by either `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, is NaN.
 * *   Any number divided by `NEGATIVE_INFINITY` is Zero.
 *
 * Several JavaScript methods (such as the `Number` constructor, `parseFloat`, and `parseInt`) return `NaN` if the value specified in the parameter is significantly lower than `Number.MIN_VALUE`.
 *
 * You might use the `Number.NEGATIVE_INFINITY` property to indicate an error condition that returns a finite number in case of success. Note, however, that `isFinite` would be more appropriate in such a case.
 *
 * In the following example, the variable `smallNumber` is assigned a value that is smaller than the minimum value. When the `if` statement executes, `smallNumber` has the value `"-Infinity"`, so `smallNumber` is set to a more manageable value before continuing.
 *
 *     var smallNumber = (-Number.MAX_VALUE) * 2
 *     if (smallNumber == Number.NEGATIVE_INFINITY) {
 *         smallNumber = returnFinite();
 *     }
 */
/**
 * @property {Number} POSITIVE_INFINITY
 * Special value representing infinity; returned on overflow.
 *
 * The value of `Number.POSITIVE_INFINITY` is the same as the value of the global object's Infinity property.
 *
 * This value behaves slightly differently than mathematical infinity:
 *
 * *   Any positive value, including `POSITIVE_INFINITY`, multiplied by `POSITIVE_INFINITY` is `POSITIVE_INFINITY`.
 * *   Any negative value, including `NEGATIVE_INFINITY`, multiplied by `POSITIVE_INFINITY` is `NEGATIVE_INFINITY`.
 * *   Zero multiplied by `POSITIVE_INFINITY` is NaN.
 * *   NaN multiplied by `POSITIVE_INFINITY` is NaN.
 * *   `POSITIVE_INFINITY`, divided by any negative value except `NEGATIVE_INFINITY`, is `NEGATIVE_INFINITY`.
 * *   `POSITIVE_INFINITY`, divided by any positive value except `POSITIVE_INFINITY`, is `POSITIVE_INFINITY`.
 * *   `POSITIVE_INFINITY`, divided by either `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, is NaN.
 * *   Any number divided by `POSITIVE_INFINITY` is Zero.
 *
 * Several JavaScript methods (such as the `Number` constructor, `parseFloat`, and `parseInt`) return `NaN` if the value specified in the parameter is significantly higher than `Number.MAX_VALUE`.
 *
 * You might use the `Number.POSITIVE_INFINITY` property to indicate an error condition that returns a finite number in case of success. Note, however, that `isFinite` would be more appropriate in such a case.
 *
 * In the following example, the variable `bigNumber` is assigned a value that is larger than the maximum value. When the if statement executes, `bigNumber` has the value "Infinity", so `bigNumber` is set to a more manageable value before continuing.
 *
 *     var bigNumber = Number.MAX_VALUE * 2
 *     if (bigNumber == Number.POSITIVE_INFINITY) {
 *         bigNumber = returnFinite();
 *     }
 */
//Methods
/**
 * @method toExponential
 * Returns a string representing the number in exponential notation.
 *
 * A string representing a `Number` object in exponential notation with one digit before the decimal point, rounded to `fractionDigits` digits after the decimal point. If the `fractionDigits` argument is omitted, the number of digits after the decimal point defaults to the number of digits necessary to represent the value uniquely.
 *
 * If you use the `toExponential` method for a numeric literal and the numeric literal has no exponent and no decimal point, leave a space before the dot that precedes the method call to prevent the dot from being interpreted as a decimal point.
 *
 * If a number has more digits that requested by the `fractionDigits` parameter, the number is rounded to the nearest number represented by `fractionDigits` digits. See the discussion of rounding in the description of the `toFixed` method, which also applies to `toExponential`.
 *
 *     var num=77.1234;
 *
 *     alert("num.toExponential() is " + num.toExponential()); //displays 7.71234e+1
 *
 *     alert("num.toExponential(4) is " + num.toExponential(4)); //displays 7.7123e+1
 *
 *     alert("num.toExponential(2) is " + num.toExponential(2)); //displays 7.71e+1
 *
 *     alert("77.1234.toExponential() is " + 77.1234.toExponential()); //displays 7.71234e+1
 *
 *     alert("77 .toExponential() is " + 77 .toExponential()); //displays 7.7e+1
 *
 * @param {Number} fractionDigits An integer specifying the number of digits after the decimal point. Defaults to as many digits as necessary to specify the number.
 * @return {String} Exponential notation of number.
 */
// Number.prototype.toExponential = function toExponential(fractionDigits?: number): string {
// 	return '';
// };
/**
 * @method toFixed
 * Returns a string representing the number in fixed-point notation.
 *
 * @return {String} A string representation of `number` that does not use exponential notation and has exactly `digits` digits after the decimal place.
 * The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If `number` is greater than 1e+21, this method simply calls `Number.toString()` and returns a string in exponential notation.
 *
 * @param {Number} digits The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.
 */
// Number.prototype.toFixed = function toFixed(digits?: number): string {
// 	return '';
// };
/**
 * @method toLocaleString
 * Returns a human readable string representing the number using the locale of the environment. Overrides the `Object.prototype.toLocaleString` method.
 *
 * This method available to numbers will convert the number into a string which is suitable for presentation in the given locale.
 *
 *     var number = 3500
 *     console.log(number.toLocaleString()); // Displays "3,500" in English locale
 *
 * @return {String} String representing the number.
 */
// Number.prototype.toLocaleString = function toLocaleString(): string {
// 	return '';
// };
/**
 * @method toPrecision
 * Returns a string representing the number to a specified precision in fixed-point or exponential notation.
 *
 * A string representing a `Number` object in fixed-point or exponential notation rounded to precision significant digits. See the discussion of rounding in the description of the `toFixed` method, which also applies to `toPrecision`.
 *
 * If the precision argument is omitted, behaves as `Number.toString`. If it is a non-integer value, it is rounded to the nearest integer. After rounding, if that value is not between 1 and 100 (inclusive), a `RangeError` is thrown.
 *
 * @param {Number} precision An integer specifying the number of significant digits.
 * @return {String} String that represents `Number` object.
 */
// Number.prototype.toPrecision = function toPrecision(precision?: number): string {
// 	return '';
// };
/**
 * @method toString
 * Returns a string representing the specified object. Overrides the `Object.prototype.toString` method.
 *
 * The `Number` object overrides the `toString` method of the `Object` object; it does not inherit `Object.toString`. For `Number` objects, the `toString` method returns a string representation of the object in the specified radix.
 *
 * The `toString` method parses its first argument, and attempts to return a string representation in the specified radix (base). For radixes above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), A through F are used.
 *
 * If `toString` is given a radix not between 2 and 36, an exception is thrown.
 *
 * If the radix is not specified, JavaScript assumes the preferred radix is 10.
 *
 *     var count = 10;
 *     print(count.toString());   // displays "10"
 *     print((17).toString());    // displays "17"
 *
 *     var x = 7;
 *     print(x.toString(2));      // displays "111"
 *
 * @param {Number} radix An integer between 2 and 36 specifying the base to use for representing numeric values.
 * @return {String} The number represented as a string.
 */
// Number.prototype.toString = function toString(radix?: number): string {
// 	return '';
// };
/**
 * @method valueOf
 * Returns the primitive value of the specified object. Overrides the `Object.prototype.valueOf` method.
 *
 * The `valueOf` method of `Number` returns the primitive value of a `Number` object as a number data type.
 *
 * This method is usually called internally by JavaScript and not explicitly in code.
 *
 *     var x = new Number();
 *     print(x.valueOf());     // prints "0"
 *
 * @return {Number} The primitive value of the number.
 */
// Number.prototype.valueOf = function valueOf(): number {
// 	return 0;
// };
var nwfjs = nwfjs || {};
/**
 * @class Object
 *
 * Creates an object wrapper.
 *
 * The `Object` constructor creates an object wrapper for the given value. If the value is null or undefined, it will create and return an empty object, otherwise, it will return an object of a type that corresponds to the given value.
 *
 * When called in a non-constructor context, `Object` behaves identically.
 *
 * # Using `Object` given undefined and null types
 *
 * The following examples store an empty Object object in `o`:
 *
 *     var o = new Object();
 *
 *     var o = new Object(undefined);
 *
 *     var o = new Object(null);
 *
 * # Using `Object` to create Boolean objects
 *
 * The following examples store Boolean objects in `o`:
 *
 *     // equivalent to o = new Boolean(true);
 *     var o = new Object(true);
 *
 *     // equivalent to o = new Boolean(false);
 *     var o = new Object(Boolean());
 *
 * <div class="notice">
 * Documentation for this class comes from <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object">MDN</a> and is available under <a href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons: Attribution-Sharealike license</a>.
 * </div>
 */
nwfjs.Object = Object;
/**
 * @method constructor
 * Creates new Object.
 * @param {Object} [value] The value to wrap.
 */
// constructor(value) {}
//Properties
/**
 * @property prototype
 * Allows the addition of properties to all objects of type `Object`.
 */
// Object.prototype = {};
//Methods
/**
 * @method hasOwnProperty
 * Returns a Boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.
 *
 * Every object descended from `Object` inherits the `hasOwnProperty` method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the `in` operator, this method does not check down the object's prototype chain.
 *
 * The following example determines whether the `o` object contains a property named `prop`:
 *
 *     o = new Object();
 *     o.prop = 'exists';
 *
 *     function changeO() {
 *         o.newprop = o.prop;
 *         delete o.prop;
 *     }
 *
 *     o.hasOwnProperty('prop');   //returns true
 *     changeO();
 *     o.hasOwnProperty('prop');   //returns false
 *
 * The following example differentiates between direct properties and properties inherited through the prototype chain:
 *
 *     o = new Object();
 *     o.prop = 'exists';
 *     o.hasOwnProperty('prop');             // returns true
 *     o.hasOwnProperty('toString');         // returns false
 *     o.hasOwnProperty('hasOwnProperty');   // returns false
 *
 * The following example shows how to iterate over the properties of an object without executing on inherit properties.
 *
 *     var buz = {
 *         fog: 'stack'
 *     };
 *
 *     for (var name in buz) {
 *         if (buz.hasOwnProperty(name)) {
 *             alert("this is fog (" + name + ") for sure. Value: " + buz[name]);
 *         }
 *         else {
 *             alert(name); // toString or something else
 *         }
 *     }
 *
 * @param {String} prop The name of the property to test.
 * @return {Boolean} Returns `true` if the object contains the specified property; otherwise it returns `false`.
 */
Object.prototype.hasOwnProperty = function hasOwnProperty(prop) {
    return false;
};
/**
 * @method isPrototypeOf
 * Returns a boolean indication whether the specified object is in the prototype chain of the object this method is called upon.
 *
 * `isPrototypeOf` allows you to check whether or not an object exists within another object's prototype chain.
 *
 * For example, consider the following prototype chain:
 *
 *     function Fee() {
 *         // . . .
 *     }
 *
 *     function Fi() {
 *         // . . .
 *     }
 *     Fi.prototype = new Fee();
 *
 *     function Fo() {
 *         // . . .
 *     }
 *     Fo.prototype = new Fi();
 *
 *     function Fum() {
 *         // . . .
 *     }
 *     Fum.prototype = new Fo();
 *
 * Later on down the road, if you instantiate `Fum` and need to check if `Fi`'s prototype exists within the `Fum` prototype chain, you could do this:
 *
 *     var fum = new Fum();
 *     . . .
 *
 *     if (Fi.prototype.isPrototypeOf(fum)) {
 *     // do something safe
 *     }
 *
 * This, along with the `instanceof` operator particularly comes in handy if you have code that can only function when dealing with objects descended from a specific prototype chain, e.g., to guarantee that certain methods or properties will be present on that object.
 *
 * @param {Object} prototype An object to be tested against each link in the prototype chain of the *object* argument
 * @param {Object} object The object whose prototype chain will be searched
 * @return {Boolean} Returns `true` if the object is a prototype and `false` if it is not.
 */
Object.prototype.isPrototypeOf = function isPrototypeOf(object) {
    return false;
};
/**
 * @method propertyIsEnumerable
 * Returns a boolean indicating if the internal `ECMAScript DontEnum` attribute is set.
 *
 * Every object has a `propertyIsEnumerable` method. This method can determine whether the specified property in an object can be enumerated by a `for...in` loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false.
 *
 * The following example shows the use of `propertyIsEnumerable` on objects and arrays:
 *
 *     var o = {};
 *     var a = [];
 *     o.prop = 'is enumerable';
 *     a[0] = 'is enumerable';
 *
 *     o.propertyIsEnumerable('prop');   // returns true
 *     a.propertyIsEnumerable(0);        // returns true
 *
 * The following example demonstrates the enumerability of user-defined versus built-in properties:
 *
 *     var a = ['is enumerable'];
 *
 *     a.propertyIsEnumerable(0);          // returns true
 *     a.propertyIsEnumerable('length');   // returns false
 *
 *     Math.propertyIsEnumerable('random');   // returns false
 *     this.propertyIsEnumerable('Math');     // returns false
 *
 * Direct versus inherited properties
 *
 *     var a = [];
 *     a.propertyIsEnumerable('constructor');         // returns false
 *
 *     function firstConstructor()
 *     {
 *         this.property = 'is not enumerable';
 *     }
 *     firstConstructor.prototype.firstMethod = function () {};
 *
 *     function secondConstructor()
 *     {
 *         this.method = function method() { return 'is enumerable'; };
 *     }
 *
 *     secondConstructor.prototype = new firstConstructor;
 *     secondConstructor.prototype.constructor = secondConstructor;
 *
 *     var o = new secondConstructor();
 *     o.arbitraryProperty = 'is enumerable';
 *
 *     o.propertyIsEnumerable('arbitraryProperty');   // returns true
 *     o.propertyIsEnumerable('method');              // returns true
 *     o.propertyIsEnumerable('property');            // returns false
 *
 *     o.property = 'is enumerable';
 *
 *     o.propertyIsEnumerable('property');            // returns true
 *
 *     // These return false as they are on the prototype which
 *     // propertyIsEnumerable does not consider (even though the last two
 *     // are iteratable with for-in)
 *     o.propertyIsEnumerable('prototype'); // returns false (as of JS 1.8.1/FF3.6)
 *     o.propertyIsEnumerable('constructor'); // returns false
 *     o.propertyIsEnumerable('firstMethod'); // returns false
 *
 * @param {String} prop The name of the property to test.
 * @return {Boolean} If the object does not have the specified property, this method returns `false`. Otherwise, returns `true`.
 */
Object.prototype.propertyIsEnumerable = function propertyIsEnumerable(prop) {
    return false;
};
/**
 * @method toLocaleString
 * Returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.
 *
 * `Object`'s `toLocaleString` returns the result of calling `toString`.
 *
 * This function is provided to give objects a generic `toLocaleString` method, even though not all may use it. Currently, only `Array`, `Number`, and `Date` override `toLocaleString`.
 *
 * @return {String} Object represented as a string.
 */
Object.prototype.toLocaleString = function toLocaleString() {
    return '';
};
/**
 * @method toString
 * Returns a string representation of the object.
 *
 * Every object has a `toString()` method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the `toString()` method is inherited by every object descended from `Object`.
 * If this method is not overridden in a custom object, `toString()` returns "[object type]", where `type` is the object type. The following code illustrates this:
 *
 *     var o = new Object();
 *     o.toString();           // returns [object Object]
 *
 * You can create a function to be called in place of the default `toString()` method. The `toString()` method takes no arguments and should return a string. The `toString()` method you create can be any value you want, but it will be most useful if it carries information about the object.
 *
 * The following code defines the `Dog` object type and creates `theDog`, an object of type `Dog`:
 *
 *     function Dog(name,breed,color,sex) {
 *         this.name=name;
 *         this.breed=breed;
 *         this.color=color;
 *         this.sex=sex;
 *     }
 *
 *     theDog = new Dog("Gabby","Lab","chocolate","female");
 *
 * If you call the `toString()` method on this custom object, it returns the default value inherited from `Object`:
 *
 *     theDog.toString(); //returns [object Object]
 *
 * The following code creates and assigns `dogToString()` to override the default `toString()` method.
 * This function generates a string containing the name, breed, color, and sex of the object, in th* form `"property = value;"`.
 *
 *     Dog.prototype.toString = function dogToString() {
 *         var ret = "Dog " + this.name + " is a " + this.sex + " " + this.color + " " + this.breed;
 *         return ret;
 *     }
 *
 * With the preceding code in place, any time `theDog` is used in a string context, JavaScript automatically calls the `dogToString()` function, which returns the following string:
 *
 *     Dog Gabby is a female chocolate Lab
 *
 * `toString()` can be used with every object and allows you to get its class. To use the `Object.prototype.toString()` with every object, you need to call `Function.prototype.call()` or `Function.prototype.apply()` on it, passing the object you want to inspect as the first parameter called `thisArg`.
 *
 *     var toString = Object.prototype.toString;
 *
 *     toString.call(new Date); // [object Date]
 *     toString.call(new String); // [object String]
 *     toString.call(Math); // [object Math]
 *
 * @return {String} Object represented as a string.
 */
Object.prototype.toString = function toString() {
    return '';
};
/**
 * @method valueOf
 * Returns the primitive value of the specified object.
 *
 * JavaScript calls the `valueOf` method to convert an object to a primitive value. You rarely need to invoke the `valueOf` method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.
 *
 * By default, the `valueOf` method is inherited by every object descended from `Object`. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, `valueOf` returns the object itself, which is displayed as:
 *
 *     [object Object]
 *
 * You can use `valueOf` within your own code to convert a built-in object into a primitive value.
 * When you create a custom object, you can override `Object.valueOf` to call a custom method instead of the default `Object` method.
 *
 * You can create a function to be called in place of the default `valueOf` method. Your function must take no arguments.
 *
 * Suppose you have an object type `myNumberType` and you want to create a `valueOf` method for it.
 * The following code assigns a user-defined function to the object's `valueOf` method:
 *
 *     myNumberType.prototype.valueOf = new Function(functionText)
 *
 * With the preceding code in place, any time an object of type `myNumberType` is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code.
 *
 * An object's `valueOf` method is usually invoked by JavaScript, but you can invoke it yourself as follows:
 *
 *     myNumber.valueOf()
 *
 * __Note:__ Objects in string contexts convert via the `toString` method, which is different from `String` objects converting to string primitives using `valueOf`. All objects have a string conversion, if only `"[object type]"`. But many objects do not convert to number, Boolean, or function.
 *
 * @return {Object} Returns value of the object or the object itself.
 */
Object.prototype.valueOf = function valueOf() {
    return {};
};
//Properties
/**
 * @property constructor
 * Specifies the function that creates an object's prototype.
 *
 * Returns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1, true, "read-only").
 *
 * All objects inherit a `constructor` property from their `prototype`:
 *
 *     o = new Object // or o = {} in JavaScript 1.2
 *     o.constructor == Object
 *     a = new Array // or a = [] in JavaScript 1.2
 *     a.constructor == Array
 *     n = new Number(3)
 *     n.constructor == Number
 *
 * Even though you cannot construct most HTML objects, you can do comparisons. For example,
 *
 *     document.constructor == Document
 *     document.form3.constructor == Form
 *
 * The following example creates a prototype, `Tree`, and an object of that type, `theTree`. The example then displays the `constructor` property for the object `theTree`.
 *
 *     function Tree(name) {
 *         this.name = name;
 *     }
 *     theTree = new Tree("Redwood");
 *     console.log("theTree.constructor is " + theTree.constructor);
 *
 * This example displays the following output:
 *
 *     theTree.constructor is function Tree(name) {
 *         this.name = name;
 *     }
 *
 * The following example shows how to modify constructor value of generic objects. Only `true`, 1, and "test" variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.
 *
 *     function Type(){};
 *     var	types = [
 * 	    new Array,	[],
 *	    new Boolean,	true,
 *	    new Date,
 *	    new Error,
 *	    new Function,	function(){},
 *	    Math,
 *	    new Number,	1,
 *	    new Object,	{},
 *	    new RegExp,	/(?:)/,
 *	    new String,	"test"
 *     ];
 *     for(var i = 0; i < types.length; i++){
 *         types[i].constructor = Type;
 *         types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];
 *     };
 *     alert(types.join("\n"));
 */
// Object.constructor = {};
var nwfjs = nwfjs || {};
/**
     * @class RegExp
     *
     * Creates a regular expression object for matching text according to a pattern.
     *
     * When using the constructor function, the normal string escape rules (preceding special characters with \ when included in a string) are necessary. For example, the following are equivalent:
     *
     *     var re = new RegExp("\\w+");
     *     var re = /\w+/;
     *
     * Notice that the parameters to the literal format do not use quotation marks to indicate strings, while the parameters to the constructor function do use quotation marks. So the following expressions create the same regular expression:
     *
     *     /ab+c/i;
     *     new RegExp("ab+c", "i");
     *
     * # Special characters in regular expressions
     *
     * |     Character    | Meaning
     * |:-----------------|:--------------------------------------------------------------------------------------
     * | `\`              | For characters that are usually treated literally, indicates that the next character is special and not to be interpreted literally.
     * |                  | For example, `/b/` matches the character 'b'. By placing a backslash in front of the b (that is, by using `/\b/`), the character is specified as matching a word boundary.
     * |                  |
     * |                  | _or_
     * |                  |
     * |                  | For characters that are usually treated specially, indicates that the next character is not special and should be interpreted literally.
     * |                  |
     * |                  | For example, `*` is a special character that means 0 or more occurrences of the preceding character should be matched; for example, `/a*\/` means match 0 or more "a"s. To match * literally, precede it with a backslash; for example, `/a\*\/` matches 'a*'.
     * |                  |
     * | `^`              | Matches beginning of input. If the multiline flag is set to true, also matches immediately after a line break character.
     * |                  |
     * |                  | For example, `/^A/` does not match the 'A' in "an A", but does match the first 'A' in "An A".
     * |                  |
     * | `$`              | Matches end of input. If the multiline flag is set to true, also matches immediately before a line break character.
     * |                  |
     * |                  | For example, `/t$/` does not match the 't' in "eater", but does match it in "eat".
     * |                  |
     * | `*`              | Matches the preceding item 0 or more times.
     * |                  |
     * |                  | For example, `/bo*\/` matches 'boooo' in "A ghost booooed" and 'b' in "A bird warbled", but nothing in "A goat grunted".
     * |                  |
     * | `+`              | Matches the preceding item 1 or more times. Equivalent to `{1,}`.
     * |                  |
     * |                  | For example, `/a+/` matches the 'a' in "candy" and all the a's in "caaaaaaandy".
     * |                  |
     * | `?`              | Matches the preceding item 0 or 1 time.
     * |                  |
     * |                  | For example, `/e?le?/` matches the 'el' in "angel" and the 'le' in "angle."
     * |                  |
     * |                  | If used immediately after any of the quantifiers `*`, `+`, `?`, or `{}`, makes the quantifier non-greedy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times).
     * |                  |
     * |                  | Also used in lookahead assertions, described under `(?=)`, `(?!)`, and `(?:)` in this table.
     * |                  |
     * | `.`              | (The decimal point) matches any single character except the newline characters: \n \r \u2028 or \u2029. (`[\s\S]` can be used to match any character including new lines.)
     * |                  |
     * |                  | For example, `/.n/` matches 'an' and 'on' in "nay, an apple is on the tree", but not 'nay'.
     * |                  |
     * | `(x)`            | Matches `x` and remembers the match. These are called capturing parentheses.
     * |                  |
     * |                  | For example, `/(foo)/` matches and remembers 'foo' in "foo bar." The matched substring can be recalled from the resulting array's elements `[1], ..., [n]` or from the predefined RegExp object's properties `$1, ..., $9`.
     * |                  |
     * | `(?:x)`          | Matches `x` but does not remember the match. These are called non-capturing parentheses.
     * |                  | The matched substring can not be recalled from the resulting array's elements `[1], ..., [n]` or from the predefined RegExp object's properties `$1, ..., $9`.
     * |                  |
     * | `x(?=y)`         | Matches `x` only if `x` is followed by `y`. For example, `/Jack(?=Sprat)/` matches 'Jack' only if it is followed by 'Sprat'. `/Jack(?=Sprat|Frost)/` matches 'Jack' only if it is followed by 'Sprat' or 'Frost'. However, neither 'Sprat' nor 'Frost' is part of the match results.
     * |                  |
     * | `x(?!y)`         | Matches `x` only if `x` is not followed by `y`. For example, `/\d+(?!\.)/` matches a number only if it is not followed by a decimal point.
     * |                  |
     * |                  | `/\d+(?!\.)/.exec("3.141")` matches 141 but not 3.141.
     * |                  |
     * | `x|y`            | Matches either `x` or `y`.
     * |                  |
     * |                  | For example, `/green|red/` matches 'green' in "green apple" and 'red' in "red apple."
     * |                  |
     * | `{n}`            | Where `n` is a positive integer. Matches exactly n occurrences of the preceding item.
     * |                  |
     * |                  | For example, `/a{2}/` doesn't match the 'a' in "candy," but it matches all of the a's in "caandy," and the first two a's in "caaandy."
     * |                  |
     * | `{n,}`           | Where `n` is a positive integer. Matches at least n occurrences of the preceding item.
     * |                  |
     * |                  | For example, `/a{2,}/` doesn't match the 'a' in "candy", but matches all of the a's in "caandy" and in "caaaaaaandy."
     * |                  |
     * | `{n,m}`          | Where `n` and `m` are positive integers. Matches at least `n` and at most `m` occurrences of the preceding item.
     * |                  |
     * |                  | For example, `/a{1,3}/` matches nothing in "cndy", the 'a' in "candy," the first two a's in "caandy," and the first three a's in "caaaaaaandy". Notice that when matching "caaaaaaandy", the match is "aaa", even though the original string had more a's in it.
     * |                  |
     * | `[xyz]`          | A character set. Matches any one of the enclosed characters. You can specify a range of characters by using a hyphen.
     * |                  |
     * |                  | For example, `[abcd]` is the same as `[a-d]`. They match the 'b' in "brisket" and the 'c' in "chop".
     * |                  |
     * | `[^xyz]`         | A negated or complemented character set. That is, it matches anything that is not enclosed in the brackets. You can specify a range of characters by using a hyphen.
     * |                  |
     * |                  | For example, `[^abc]` is the same as `[^a-c]`. They initially match 'r' in "brisket" and 'h' in "chop."
     * |                  |
     * | `[\b]`           | Matches a backspace. (Not to be confused with `\b`.)
     * |                  |
     * | `\b`             | Matches a word boundary, such as a space. (Not to be confused with `[\b]`.)
     * |                  |
     * |                  | For example, `/\bn\w/` matches the 'no' in "noonday"; `/\wy\b/` matches the 'ly' in "possibly yesterday."
     * |                  |
     * | `\B`             | Matches a non-word boundary.
     * |                  |
     * |                  | For example, `/\w\Bn/` matches 'on' in "noonday", and `/y\B\w/` matches 'ye' in "possibly yesterday."
     * |                  |
     * | `\cX`            | Where X is a letter from A - Z. Matches a control character in a string.
     * |                  |
     * |                  | For example, `/\cM/` matches control-M in a string.
     * |                  |
     * | `\d`             | Matches a digit character in the basic Latin alphabet. Equivalent to `[0-9]`.
     * |                  |
     * |                  | For example, `/\d/` or `/[0-9]/` matches '2' in "B2 is the suite number."
     * |                  |
     * | `\D`             | Matches any non-digit character in the basic Latin alphabet. Equivalent to `[^0-9]`.
     * |                  |
     * |                  | For example, `/\D/` or `/[^0-9]/` matches 'B' in "B2 is the suite number.
     * |                  |
     * | `\f`             | Matches a form-feed.
     * |                  |
     * | `\n`             | Matches a linefeed.
     * |                  |
     * | `\r`             | Matches a carriage return.
     * |                  |
     * | `\s`             | Matches a single white space character, including space, tab, form feed, line feed and other unicode spaces. Equivalent to:
     * |                  |
     * |                  | `[\t\n\v\f\r \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000]`
     * |                  |
     * |                  | For example, `/\s\w*\/` matches ' bar' in "foo bar."
     * |                  |
     * | `\S`             | Matches a single character other than white space. Equivalent to:
     * |                  |
     * |                  | `[^\t\n\v\f\r \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000]`
     * |                  |
     * |                  | For example, `/\S\w*\/` matches 'foo' in "foo bar."
     * |                  |
     * | `\t`             | Matches a tab.
     * |                  |
     * | `\v`             | Matches a vertical tab.
     * |                  |
     * | `\w`             | Matches any alphanumeric character from the basic Latin alphabet, including the underscore. Equivalent to `[A-Za-z0-9_]`.
     * |                  |
     * |                  | For example, `/\w/` matches 'a' in "apple," '5' in "$5.28," and '3' in "3D."
     * |                  |
     * | `\W`             | Matches any character that is not a word character from the basic Latin alphabet. Equivalent to `[^A-Za-z0-9_]`.
     * |                  |
     * |                  | For example, `/\W/` or `/[^A-Za-z0-9_]/` matches '%' in "50%."
     * |                  |
     * | `\n`             | Where `n` is a positive integer. A back reference to the last substring matching the n parenthetical in the regular expression (counting left parentheses).
     * |                  |
     * |                  | For example, `/apple(,)\sorange\1/` matches 'apple, orange,' in "apple, orange, cherry, peach." A more complete example follows this table.
     * |                  |
     * | `\0`             | Matches a NULL character. Do not follow this with another digit.
     * |                  |
     * | `\xhh`           | Matches the character with the code `hh` (two hexadecimal digits)
     * |                  |
     * | `\uhhhh`         | Matches the character with the Unicode value `hhhh` (four hexadecimal digits)
     *
     * The literal notation provides compilation of the regular expression when the expression is evaluated. Use literal notation when the regular expression will remain constant. For example, if you use literal notation to construct a regular expression used in a loop, the regular expression won't be recompiled on each iteration.
     *
     * The constructor of the regular expression object, for example, `new RegExp("ab+c")`, provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.
     *
     * <div class="notice">
     * Documentation for this class comes from <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/RegExp">MDN</a> and is available under <a href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons: Attribution-Sharealike license</a>.
     * </div>
     */
nwfjs.RegExp = RegExp;
/**
 * @method constructor
 * Creates new regular expression object.
 *
 * @param {String} pattern
 * The text of the regular expression.
 * @param {String} flags
 * If specified, flags can have any combination of the following values:
 *
 * - "g" - global match
 * - "i" - ignore case
 * - "m" - Treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of _each_ line (delimited by \n or \r), not only the very beginning or end of the whole input string)
 */
// constructor(pattern, flags) {}
//Methods
/**
 * @method exec
 * Executes a search for a match in its string parameter.
 *
 * If the match succeeds, the `exec` method returns an array and updates properties of the regular expression object. The returned array has the matched text as the first item, and then one item for each capturing parenthesis that matched containing the text that was captured.  If the match fails, the `exec` method returns `null`.
 *
 * If you are executing a match simply to find true or false, use the `test` method or the `String search` method.
 *
 * Consider the following example:
 *
 *     // Match one d followed by one or more b's followed by one d
 *     // Remember matched b's and the following d
 *     // Ignore case
 *     var re = /d(b+)(d)/ig;
 *     var result = re.exec("cdbBdbsbz");
 *
 * The following table shows the results for this script:
 *
 * | Object           | Property/Index | Description                                                                                                | Example
 * |:-----------------|:---------------|:-----------------------------------------------------------------------------------------------------------|:---------------------
 * | `result`         |                | The content of myArray.                                                                                    | `["dbBd", "bB", "d"]`
 * |                  | `index`        | The 0-based index of the match in the string                                                               | `1`
 * |                  | `input`        | The original string.                                                                                       | `cdbDdbsbz`
 * |                  | `[0]`          | The last matched characters.                                                                               | `dbBd`
 * |                  | `[1], ...[n]`  | The parenthesized substring matches, if any. The number of possible parenthesized substrings is unlimited. | `[1] = bB`
 * |                  |                |                                                                                                            | `[2] = d`
 * | `re`             | `lastIndex`    | The index at which to start the next match.                                                                | `5`
 * |                  | `ignoreCase`   | Indicates the "`i`" flag was used to ignore case.                                                          | `true`
 * |                  | `global`       | Indicates the "`g`" flag was used for a global match.                                                      | `true`
 * |                  | `multiline`    | Indicates the "`m`" flag was used to search in strings across multiple lines.                              | `false`
 * |                  | `source`       | The text of the pattern.                                                                                   | d(b+)(d)
 *
 * If your regular expression uses the "`g`" flag, you can use the `exec` method multiple times to find successive matches in the same string. When you do so, the search starts at the substring of `str` specified by the regular expression's `lastIndex` property (`test` will also advance the `lastIndex` property). For example, assume you have this script:
 *
 *     var myRe = /ab*\/g;
 *     var str = "abbcdefabh";
 *     var myArray;
 *     while ((myArray = myRe.exec(str)) != null)
 *     {
 *         var msg = "Found " + myArray[0] + ".  ";
 *         msg += "Next match starts at " + myRe.lastIndex;
 *     print(msg);
 *     }
 *
 * This script displays the following text:
 *
 *     Found abb. Next match starts at 3
 *     Found ab. Next match starts at 9
 *
 * You can also use `exec()` without creating a RegExp object:
 *
 *     var matches = /(hello \S+)/.exec('This is a hello world!');
 *     alert(matches[1]);
 *
 * This will display an alert containing 'hello world!';
 *
 * @param {String} str The string against which to match the regular expression.
 * @return {Array} Array of results or `NULL`.
 */
RegExp.prototype.exec = function exec(str) {
    return [];
};
/**
 * @method test
 * Tests for a match in its string parameter.
 *
 * When you want to know whether a pattern is found in a string use the test method (similar to the `String.search` method); for more information (but slower execution) use the exec method (similar to the `String.match` method). As with exec (or in combination with it), test called multiple times on the same global regular expression instance will advance past the previous match.
 *
 * The following example prints a message which depends on the success of the test:
 *
 *     function testinput(re, str){
 *         if (re.test(str))
 *             midstring = " contains ";
 *         else
 *             midstring = " does not contain ";
 *         document.write (str + midstring + re.source);
 *     }
 *
 * @param {String} str The string against which to match the regular expression.
 * @return {Boolean} Returns `true` if string contains any matches, otherwise returns `false`.
 */
RegExp.prototype.test = function test(str) {
    return false;
};
/**
 * @method toString
 * Returns a string representing the specified object. Overrides the `Object.prototype.toString`
 * method.
 *
 * The `RegExp` object overrides the `toString` method of the `Object` object; it does not inherit `Object.toString`. For `RegExp` objects, the `toString` method returns a string representation of the regular expression.
 *
 * The following example displays the string value of a `RegExp` object:
 *
 *     myExp = new RegExp("a+b+c");
 *     alert(myExp.toString());       // displays "/a+b+c/"
 *
 * @return {String} Regular expression as a string.
 */
RegExp.prototype.toString = function toString() {
    return '';
};
//Properties
// Note that several of the `RegExp` properties have both long and short (Perl-like) names.
// Both names always refer to the same value. Perl is the programming language from which JavaScript modeled its regular expressions.
/**
 * @property {Boolean} global
 * Whether to test the regular expression against all possible matches in a string, or only against the first.
 *
 * `global` is a property of an individual regular expression object.
 *
 * The value of `global` is `true` if the "`g`" flag was used; otherwise, `false`. The "`g`" flag indicates that the regular expression should be tested against all possible matches in a string.
 *
 * You cannot change this property directly.
 */
RegExp.prototype.global = false;
/**
 * @property {Boolean} ignoreCase
 * Whether to ignore case while attempting a match in a string.
 *
 * `ignoreCase` is a property of an individual regular expression object.
 *
 * The value of `ignoreCase` is `true` if the "`i`" flag was used; otherwise, false. The "`i`" flag indicates that case should be ignored while attempting a match in a string.
 *
 * You cannot change this property directly.
 */
RegExp.prototype.ignoreCase = false;
/**
 * @property {Number} lastIndex
 * The index at which to start the next match. A read/write integer property that specifies the index at which to start the next match.
 *
 * `lastIndex` is a property of an individual regular expression object.
 *
 * This property is set only if the regular expression used the "`g`" flag to indicate a global search.
 * The following rules apply:
 *
 * -   If `lastIndex` is greater than the length of the string, `regexp.test` and `regexp.exec` fail,
 *     and `lastIndex` is set to 0.
 * -   If `lastIndex` is equal to the length of the string and if the regular expression matches the
 *     empty string, then the regular expression matches input starting at `lastIndex`.
 * -   If `lastIndex` is equal to the length of the string and if the regular expression does not match
 *     the empty string, then the regular expression mismatches input, and `lastIndex` is reset to 0.
 * -   Otherwise, `lastIndex` is set to the next position following the most recent match.
 *
 * For example, consider the following sequence of statements:
 *
 * -   `re = /(hi)?/g` Matches the empty string.
 * -   `re("hi")` Returns `["hi", "hi"]` with `lastIndex` equal to 2.
 * -   `re("hi")` Returns `[""]`, an empty array whose zeroth element is the match string. In this
 *     case, the empty string because `lastIndex` was 2 (and still is 2) and "`hi`" has length 2.
 */
RegExp.prototype.lastIndex = 0;
/**
 * @property {Boolean} multiline
 * Whether or not to search in strings across multiple lines.
 *
 * `multiline` is a property of an individual regular expression object..
 *
 * The value of `multiline` is `true` if the "`m`" flag was used; otherwise, `false`. The "`m`" flag indicates that a multiline input string should be treated as multiple lines. For example, if "`m`" is used, "`^`" and "`$`" change from matching at only the start or end of the entire string to the start or end of any line within the string.
 *
 * You cannot change this property directly.
 */
RegExp.prototype.multiline = false;
/**
 * @property {String} source
 * The text of the pattern.
 *
 * A read-only property that contains the text of the pattern, excluding the forward slashes.
 *
 * `source` is a property of an individual regular expression object.
 *
 * You cannot change this property directly.
 */
RegExp.prototype.source = '';
var nwfjs = nwfjs || {};
/**
 * @class String
 *
 * `String` is a global object that may be used to construct String instances.
 *
 * String objects may be created by calling the constructor `new String()`. The `String` object wraps JavaScript's string primitive data type with the methods described below. The global function `String()` can also be called without new in front to create a primitive string. String literals in
 * JavaScript are primitive strings.
 *
 * Because JavaScript automatically converts between string primitives and String objects, you can call any of the methods of the `String` object on a string primitive. JavaScript automatically converts the string primitive to a temporary `String` object, calls the method, then discards the temporary String object. For example, you can use the `String.length` property on a string primitive created from a string literal:
 *
 *     s_obj = new String(s_prim = s_also_prim = "foo");
 *
 *     s_obj.length;       // 3
 *     s_prim.length;      // 3
 *     s_also_prim.length; // 3
 *     'foo'.length;       // 3
 *     "foo".length;       // 3
 *
 * (A string literal is denoted with single or double quotation marks.)
 *
 * String objects can be converted to primitive strings with the `valueOf` method.
 *
 * String primitives and String objects give different results when evaluated as JavaScript. Primitives are treated as source code; String objects are treated as a character sequence object. For example:
 *
 *     s1 = "2 + 2";               // creates a string primitive
 *     s2 = new String("2 + 2");   // creates a String object
 *     eval(s1);                   // returns the number 4
 *     eval(s2);                   // returns the string "2 + 2"
 *     eval(s2.valueOf());         // returns the number 4
 *
 * # Character access
 *
 * There are two ways to access an individual character in a string. The first is the `charAt` method:
 *
 *     return 'cat'.charAt(1); // returns "a"
 *
 * The other way is to treat the string as an array, where each index corresponds to an individual character:
 *
 *     return 'cat'[1]; // returns "a"
 *
 * The second way (treating the string as an array) is not part of ECMAScript 3. It is a JavaScript and ECMAScript 5 feature.
 *
 * In both cases, attempting to set an individual character won't work. Trying to set a character through `charAt` results in an error, while trying to set a character via indexing does not throw an error, but the string itself is unchanged.
 *
 * # Comparing strings
 *
 * C developers have the `strcmp()` function for comparing strings. In JavaScript, you just use the less- than and greater-than operators:
 *
 *     var a = "a";
 *     var b = "b";
 *     if (a < b) // true
 *         print(a + " is less than " + b);
 *     else if (a > b)
 *         print(a + " is greater than " + b);
 *     else
 *         print(a + " and " + b + " are equal.");
 *
 * A similar result can be achieved using the `localeCompare` method inherited by `String` instances.
 *
 * <div class="notice">
 * Documentation for this class comes from <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String">MDN</a> and is available under <a href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons: Attribution-Sharealike license</a>.
 * </div>
 */
nwfjs.String = String;
/**
 * @method constructor
 * Creates new `String` object.
 * @param {Object} value The value to wrap into the `String` object.
 */
// String.prototype.constructor(value) {}
//Methods
/**
 * @method fromCharCode
 * Returns a string created by using the specified sequence of Unicode values.
 *
 * This method returns a string and not a `String` object.
 *
 * Because `fromCharCode` is a static method of `String`, you always use it as `String.fromCharCode()`, rather than as a method of a `String` object you created.
 *
 * Although most common Unicode values can be represented in a fixed width system with one number (as expected early on during JavaScript standardization) and `fromCharCode()` can be used to return a single character for the most common values (i.e., UCS-2 values which are the subset of UTF-16 with the most common characters), in order to deal with ALL legal Unicode values, `fromCharCode()` alone is inadequate. Since the higher code point characters use two (lower value) "surrogate" numbers to form a single character, `fromCharCode()` can be used to return such a pair and thus adequately represent these higher valued characters.
 *
 * Be aware, therefore, that the following utility function to grab the accurate character even for higher value code points, may be returning a value which is rendered as a single character, but which has a string count of two (though usually the count will be one).
 *
 *     // `String.fromCharCode()` alone cannot get the character at such a high code point.
 *     // The following, on the other hand, can return a 4-byte character as well as the usual 2-byte ones (i.e., it can return a single character which actually has a string length of 2 instead of 1!)
 *     alert(fixedFromCharCode(0x2F804)); // or 194564 in decimal
 *
 *     function fixedFromCharCode (codePt) {
 *         if (codePt > 0xFFFF) {
 *             codePt -= 0x10000;
 *             return String.fromCharCode(0xD800 + (codePt >> 10), 0xDC00 +
 *             (codePt & 0x3FF));
 *         }
 *         else {
 *             return String.fromCharCode(codePt);
 *         }
 *     }
 *
 * The following example returns the string "ABC".
 *
 *     String.fromCharCode(65,66,67)
 *
 * @static
 * @param {Number} num1, ..., numN A sequence of numbers that are Unicode values.
 * @return {String} String containing characters from encoding.
 */
// String.prototype.fromCharCode = function fromCharCode(num1: number): string {
//  	return '';
//  }
//Properties
/**
 * @property {Number} length
 * Reflects the length of the string.
 *
 * This property returns the number of code units in the string. UTF-16, the string format used by JavaScript, uses a single 16-bit code unit to represent the most common characters, but needs to use two code units for less commonly-used characters, so it's possible for the value returned by `length` to not match the actual number of characters in the string.
 *
 * For an empty string, `length` is 0.
 *
 *     var x = "Netscape";
 *     var empty = "";
 *
 *     console.log("Netspace is " + x.length + " code units long");
 *     console.log("The empty string has a length of " + empty.length); // should be 0
 */
// String.prototype.length: number = 0;
//Methods
/**
 * @method charAt
 * Returns the character at the specified index.
 *
 * Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string called `stringName` is `stringName.length - 1`. If the index you supply is out of range, JavaScript returns an empty string.
 *
 * The following example displays characters at different locations in the string "Brave new world":
 *
 *     var anyString="Brave new world";
 *
 *     document.writeln("The character at index 0 is '" + anyString.charAt(0) + "'");
 *     document.writeln("The character at index 1 is '" + anyString.charAt(1) + "'");
 *     document.writeln("The character at index 2 is '" + anyString.charAt(2) + "'");
 *     document.writeln("The character at index 3 is '" + anyString.charAt(3) + "'");
 *     document.writeln("The character at index 4 is '" + anyString.charAt(4) + "'");
 *     document.writeln("The character at index 999 is '" + anyString.charAt(999) + "'");
 *
 * These lines display the following:
 *
 *     The character at index 0 is 'B'
 *     The character at index 1 is 'r'
 *     The character at index 2 is 'a'
 *     The character at index 3 is 'v'
 *     The character at index 4 is 'e'
 *     The character at index 999 is ''
 *
 * The following provides a means of ensuring that going through a string loop always provides a whole character, even if the string contains characters that are not in the Basic Multi-lingual Plane.
 *
 *     var str = 'A\uD87E\uDC04Z'; // We could also use a non-BMP character directly
 *     for (var i=0, chr; i < str.length; i++) {
 *         // Adapt this line at the top of each loop, passing in the whole string and the current iteration and returning a variable to represent the individual character
 *         if ((chr = getWholeChar(str, i)) === false) {continue;}
 *         alert(chr);
 *     }
 *
 *     function getWholeChar (str, i) {
 *         var code = str.charCodeAt(i);
 *
 *         if (isNaN(code)) {
 *         return ''; // Position not found
 *         }
 *         if (code < 0xD800 || code > 0xDFFF) {
 *             return str.charAt(i);
 *         }
 *         if (0xD800 <= code && code <= 0xDBFF) {
 *             // High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)
 *         }
 *         if (str.length <= (i+1))  {
 *             throw 'High surrogate without following low surrogate';
 *         }
 *         var next = str.charCodeAt(i+1);
 *         if (0xDC00 > next || next > 0xDFFF) {
 *             throw 'High surrogate without following low surrogate';
 *         }
 *         return str.charAt(i)+str.charAt(i+1);
 *     }
 *     // Low surrogate (0xDC00 <= code && code <= 0xDFFF)
 *     if (i === 0) {
 *         throw 'Low surrogate without preceding high surrogate';
 *     }
 *     var prev = str.charCodeAt(i-1);
 *     if (0xD800 > prev || prev > 0xDBFF) { // (could change last hex to 0xDB7F to treat high private surrogates as single characters)
 *       throw 'Low surrogate without preceding high surrogate';
 *     }
 *     return false; // We can pass over low surrogates now as the second component in a pair which we have already processed
 *
 * While the second example may be more frequently useful for those wishing to support non-BMP characters (since the above does not require the caller to know where any non-BMP character might appear), in the event that one _does_ wish, in choosing a character by index, to treat the surrogate pairs within a string as the single characters they represent, one can use the following:
 *
 *     function fixedCharAt (str, idx) {
 *         var ret = '';
 *         str += '';
 *         var end = str.length;
 *
 *         var surrogatePairs = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
 *         while ((surrogatePairs.exec(str)) != null) {
 *             var li = surrogatePairs.lastIndex;
 *             if (li - 2 < idx) {
 *                 idx++;
 *             }
 *             else {
 *             break;
 *             }
 *         }
 *
 *         if (idx >= end || idx < 0) {
 *             return '';
 *         }
 *
 *             ret += str.charAt(idx);
 *
 *             if (/[\uD800-\uDBFF]/.test(ret) && /[\uDC00-\uDFFF]/.test(str.charAt(idx+1))) {
 *                 ret += str.charAt(idx+1); // Go one further, since one of the "characters" is part of a surrogate pair
 *             }
 *         return ret;
 *     }
 *
 * @param {Number} index An integer between 0 and 1 less than the length of the string.
 * @return {String} Individual character from string.
 */
String.prototype.charAt = function charAt(index) {
    return '';
};
/**
 * @method charCodeAt
 * Returns a number indicating the Unicode value of the character at the given index.
 *
 * Unicode code points range from 0 to 1,114,111. The first 128 Unicode code points are a direct match of the ASCII character encoding.
 *
 * Note that `charCodeAt` will always return a value that is less than 65,536. This is because the higher code points are represented by a pair of (lower valued) "surrogate" pseudo-characters which are used to comprise the real character. Because of this, in order to examine or reproduce the full character for individual characters of value 65,536 and above, for such characters, it is necessary to retrieve not only `charCodeAt(i)`, but also `charCodeAt(i+1)` (as if examining/reproducing a string with two letters). See example 2 and 3 below.
 *
 * `charCodeAt` returns `NaN` if the given index is not greater than 0 or is greater than the length of the string.
 *
 * Backward Compatibility with JavaScript 1.2
 *
 * The `charCodeAt` method returns a number indicating the ISO-Latin-1 codeset value of the character at the given index. The ISO-Latin-1 codeset ranges from 0 to 255. The first 0 to 127 are a direct match of the ASCII character set.
 *
 * Example 1: Using `charCodeAt`
 *
 * The following example returns 65, the Unicode value for A.
 *
 *    "ABC".charCodeAt(0) // returns 65
 *
 * Example 2: Fixing `charCodeAt` to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is unknown
 *
 * This version might be used in for loops and the like when it is unknown whether non-BMP characters exist before the specified index position.
 *
 *     function fixedCharCodeAt (str, idx) {
 *         // ex. fixedCharCodeAt ('\uD800\uDC00', 0); // 65536
 *         // ex. fixedCharCodeAt ('\uD800\uDC00', 1); // 65536
 *         idx = idx || 0;
 *         var code = str.charCodeAt(idx);
 *         var hi, low;
 *         if (0xD800 <= code && code <= 0xDBFF) { // High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)
 *             hi = code;
 *             low = str.charCodeAt(idx+1);
 *             if (isNaN(low)) {
 *                 throw 'High surrogate not followed by low surrogate in fixedCharCodeAt()';
 *             }
 *             return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
 *         }
 *         if (0xDC00 <= code && code <= 0xDFFF) { // Low surrogate
 *         // We return false to allow loops to skip this iteration since should have already handled high surrogate above in the previous iteration
 *             return false;
 *         }
 *         return code;
 *     }
 *
 * Example 3: Fixing `charCodeAt` to handle non-Basic-Multilingual-Plane characters if their presence earlier in the string is known
 *
 *     function knownCharCodeAt (str, idx) {
 *         str += '';
 *         var code,
 *         end = str.length;
 *
 *         var surrogatePairs = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
 *         while ((surrogatePairs.exec(str)) != null) {
 *             var li = surrogatePairs.lastIndex;
 *             if (li - 2 < idx) {
 *                 idx++;
 *             }
 *             else {
 *                 break;
 *             }
 *         }
 *
 *         if (idx >= end || idx < 0) {
 *             return NaN;
 *         }
 *
 *         code = str.charCodeAt(idx);
 *
 *         var hi, low;
 *         if (0xD800 <= code && code <= 0xDBFF) {
 *             hi = code;
 *             low = str.charCodeAt(idx+1); // Go one further, since one of the "characters" is part of a surrogate pair
 *             return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
 *         }
 *         return code;
 *     }
 *
 * @param {Number} index An integer greater than 0 and less than the length of the string; if it is not a number, it defaults to 0.
 * @return {Number} Value between 0 and 65535.
 */
String.prototype.charCodeAt = function charCodeAt(index) {
    return 0;
};
/**
 * @method concat
 * Combines the text of two strings and returns a new string.
 *
 * `concat` combines the text from one or more strings and returns a new string. Changes to the text in one string do not affect the other string.
 *
 * The following example combines strings into a new string.
 *
 *     var hello = "Hello, ";
 *     console.log(hello.concat("Kevin", " have a nice day.")); // Hello, Kevin have a nice day.
 *
 * @param {String} string2...stringN
 * @return {String} Result of both strings.
 */
String.prototype.concat = function concat() {
    var strings = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        strings[_i - 0] = arguments[_i];
    }
    return '';
};
/**
 * @method indexOf
 * Returns the index within the calling `String` object of the first occurrence of the specified value, or -1 if not found.
 *
 * Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character of a string called `stringName` is `stringName.length - 1`.
 *
 *     "Blue Whale".indexOf("Blue")    // returns 0
 *     "Blue Whale".indexOf("Blute")   // returns -1
 *     "Blue Whale".indexOf("Whale",0) // returns 5
 *     "Blue Whale".indexOf("Whale",5) // returns 5
 *     "Blue Whale".indexOf("",9)      // returns 9
 *     "Blue Whale".indexOf("",10)     // returns 10
 *     "Blue Whale".indexOf("",11)     // returns 10
 *
 * The `indexOf` method is case sensitive. For example, the following expression returns -1:
 *
 *     "Blue Whale".indexOf("blue")
 *
 * Note that 0 doesn't evaluate to true and -1 doesn't evaluate to false. Therefore, when checking if a specific string exists within another string the correct way to check would be:
 *
 *     "Blue Whale".indexOf("Blue") != -1 // true
 *     "Blue Whale".indexOf("Bloe") != -1 // false
 *
 * The following example uses `indexOf` and `lastIndexOf` to locate values in the string "Brave new world".
 *
 *     var anyString="Brave new world"
 *
 *     document.write("<P>The index of the first w from the beginning is " + anyString.indexOf("w"))          // Displays 8
 *     document.write("<P>The index of the first w from the end is " + anyString.lastIndexOf("w"))      // Displays 10
 *     document.write("<P>The index of 'new' from the beginning is " + anyString.indexOf("new"))        // Displays 6
 *     document.write("<P>The index of 'new' from the end is " + anyString.lastIndexOf("new"))    // Displays 6
 *
 * The following example defines two string variables. The variables contain the same string except that the second string contains uppercase letters. The first `writeln` method displays 19. But because the `indexOf` method is case sensitive, the string "cheddar" is not found in `myCapString`, so the second `writeln` method displays -1.
 *
 *     myString="brie, pepper jack, cheddar"
 *     myCapString="Brie, Pepper Jack, Cheddar"
 *     document.writeln('myString.indexOf("cheddar") is ' + myString.indexOf("cheddar"))
 *     document.writeln('<P>myCapString.indexOf("cheddar") is ' + myCapString.indexOf("cheddar"))
 *
 * The following example sets count to the number of occurrences of the letter x in the string str:
 *
 *     count = 0;
 *     pos = str.indexOf("x");
 *     while ( pos != -1 ) {
 *         count++;
 *         pos = str.indexOf("x",pos+1);
 *     }
 *
 * @param {String} searchValue A string representing the value to search for.
 * @param {Number} fromIndex The location within the calling string to start the search from. It can be any integer between 0 and the length of the string. The default value is 0.
 * @return {Number} Position of specified value or -1 if not found.
 */
String.prototype.indexOf = function indexOf(searchValue, fromIndex) {
    return 0;
};
/**
 * @method lastIndexOf
 * Returns the index within the calling `String` object of the last occurrence of the specified value, or -1 if not found. The calling string is searched backward, starting at `fromIndex`.
 *
 * Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character is `stringName.length - 1`.
 *
 *     "canal".lastIndexOf("a")   // returns 3
 *     "canal".lastIndexOf("a",2) // returns 1
 *     "canal".lastIndexOf("a",0) // returns -1
 *     "canal".lastIndexOf("x")   // returns -1
 *
 * The `lastIndexOf` method is case sensitive. For example, the following expression returns -1:
 *
 *     "Blue Whale, Killer Whale".lastIndexOf("blue")
 *
 * The following example uses `indexOf` and `lastIndexOf` to locate values in the string "`Brave new world`".
 *
 *     var anyString="Brave new world"
 *
 *     // Displays 8
 *     document.write("<P>The index of the first w from the beginning is " +
 *     anyString.indexOf("w"))
 *     // Displays 10
 *     document.write("<P>The index of the first w from the end is " +
 *     anyString.lastIndexOf("w"))
 *     // Displays 6
 *     document.write("<P>The index of 'new' from the beginning is " +
 *     anyString.indexOf("new"))
 *     // Displays 6
 *     document.write("<P>The index of 'new' from the end is " +
 *     anyString.lastIndexOf("new"))
 *
 * @param {String} searchValue A string representing the value to search for.
 * @param {Number} fromIndex The location within the calling string to start the search from, indexed from left to right. It can be any integer between 0 and the length of the string. The default value is the length of the string.
 * @return {Number}
 */
String.prototype.lastIndexOf = function lastIndexOf(searchValue, fromIndex) {
    return 0;
};
/**
 * @method localeCompare
 * Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.
 *
 * Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. Returns -1 if the string occurs earlier in a sort than `compareString`, returns 1 if the string occurs afterwards in such a sort, and returns 0 if they occur at the same level.
 *
 * The following example demonstrates the different potential results for a string occurring before, after, or at the same level as another:
 *
 *     alert('a'.localeCompare('b')); // -1
 *     alert('b'.localeCompare('a')); // 1
 *     alert('b'.localeCompare('b')); // 0
 *
 * @param {String} compareString The string against which the referring string is comparing.
 * @return {Number} Returns -1 if the string occurs earlier in a sort than `compareString`, returns 1 if the string occurs afterwards in such a sort, and returns 0 if they occur at the same level.
 */
String.prototype.localeCompare = function localeCompare(compareString) {
    return 1;
};
/**
 * @method match
 * Used to match a regular expression against a string.
 *
 * If the regular expression does not include the `g` flag, returns the same result as `regexp.exec(string)`.
 *
 * If the regular expression includes the `g` flag, the method returns an array containing all matches. If there were no matches, the method returns `null`.
 *
 * The returned {@link Array} has an extra `input` property, which contains the `regexp` that generated it as a result. In addition, it has an `index` property, which represents the zero-based index of the match in the string.
 *
 * In the following example, `match` is used to find "Chapter" followed by 1 or more numeric characters followed by a decimal point and numeric character 0 or more times. The regular expression includes the `i` flag so that case will be ignored.
 *
 *     str = "For more information, see Chapter 3.4.5.1";
 *     re = /(chapter \d+(\.\d)*)/i;
 *     found = str.match(re);
 *     document.write(found);
 *
 * This returns the array containing Chapter 3.4.5.1,Chapter 3.4.5.1,.1
 *
 * "`Chapter 3.4.5.1`" is the first match and the first value remembered from `(Chapter \d+(\.\d)*)`.
 *
 * "`.1`" is the second value remembered from `(\.\d)`.
 *
 * The following example demonstrates the use of the global and ignore case flags with `match`. All letters A through E and a through e are returned, each its own element in the array
 *
 *     var str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
 *     var regexp = /[A-E]/gi;
 *     var matches_array = str.match(regexp);
 *     document.write(matches_array);
 *
 * `matches_array` now equals `['A', 'B', 'C', 'D', 'E', 'a', 'b', 'c', 'd', 'e']`.
 *
 * @param {RegExp} regexp A {@link RegExp} object. If a non-RegExp object `obj` is passed, it is implicitly converted to a `RegExp` by using `new RegExp(obj)`.
 * @return {Array} Contains results of the match (if any).
 */
// String.prototype.match = function match(regexp: string): string[] {
//  	return null;
//  }
/**
 * @method replace
 * Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.
 *
 * This method does not change the `String` object it is called on. It simply returns a new string.
 *
 * To perform a global search and replace, either include the `g` flag in the regular expression or if the first parameter is a string, include `g` in the `flags` parameter.
 *
 * The replacement string can include the following special replacement patterns:
 *
 * | Pattern       | Inserts
 * |:--------------|:--------------------------------------------------------------------------------------
 * | `$$`          | Inserts a `$`.
 * | `$&`          | Inserts the matched substring.
 * | `$``          | Inserts the portion of the string that precedes the matched substring.
 * | `$'`          | Inserts the portion of the string that follows the matched substring.
 * | `$n` or `$nn` | Where `n` or `nn` are decimal digits, inserts the _n_th parenthesized submatch string, provided the first argument was a `RegExp` object.
 *
 * You can specify a function as the second parameter. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string. (__Note:__ the above-mentioned special replacement patterns do not apply in this case.) Note that the function will be invoked multiple times for each full match to be replaced if the regular expression in the first parameter is global.
 *
 * The arguments to the function are as follows:
 *
 * | Possible Name | Supplied Value
 * |:--------------|:--------------------------------------------------------------------------------------
 * | `str`         | The matched substring. (Corresponds to `$&` above.)
 * | `p1, p2, ...` | The _n_th parenthesized submatch string, provided the first argument to replace was a `RegExp` object.
 * |               | (Correspond to $1, $2, etc. above.)
 * | `offset`      | The offset of the matched substring within the total string being examined.
 * |               | (For example, if the total string was "`abcd`", and the matched substring was "`bc`", then this argument will be 1.)
 * | `s`           | The total string being examined.
 *
 * (The exact number of arguments will depend on whether the first argument was a `RegExp` object and, if so, how many parenthesized submatches it specifies.)
 *
 * The following example will set `newString` to "`XXzzzz - XX , zzzz`":
 *
 *     function replacer(str, p1, p2, offset, s)
 *     {
 *         return str + " - " + p1 + " , " + p2;
 *     }
 *     var newString = "XXzzzz".replace(/(X*)(z*)/, replacer);
 *
 * In the following example, the regular expression includes the global and ignore case flags which permits replace to replace each occurrence of 'apples' in the string with 'oranges'.
 *
 *     var re = /apples/gi;
 *     var str = "Apples are round, and apples are juicy.";
 *     var newstr = str.replace(re, "oranges");
 *     print(newstr);
 *
 * In this version, a string is used as the first parameter and the global and ignore case flags are specified in the flags parameter.
 *
 *     var str = "Apples are round, and apples are juicy.";
 *     var newstr = str.replace("apples", "oranges", "gi");
 *     print(newstr);
 *
 * Both of these examples print "oranges are round, and oranges are juicy."
 *
 * In the following example, the regular expression is defined in replace and includes the ignore case flag.
 *
 *     var str = "Twas the night before Xmas...";
 *     var newstr = str.replace(/xmas/i, "Christmas");
 *     print(newstr);
 *
 * This prints "Twas the night before Christmas..."
 *
 * The following script switches the words in the string. For the replacement text, the script uses the $1 and $2 replacement patterns.
 *
 *     var re = /(\w+)\s(\w+)/;
 *     var str = "John Smith";
 *     var newstr = str.replace(re, "$2, $1");
 *     print(newstr);
 *
 * This prints "Smith, John".
 *
 * In this example, all occurrences of capital letters in the string are converted to lower case, and a hyphen is inserted just before the match location. The important thing here is that additional operations are needed on the matched item before it is given back as a replacement.
 *
 * The replacement function accepts the matched snippet as its parameter, and uses it to transform the case and concatenate the hyphen before returning.
 *
 *     function styleHyphenFormat(propertyName)
 *     {
 *         function upperToHyphenLower(match)
 *         {
 *             return '-' + match.toLowerCase();
 *         }
 *         return propertyName.replace(/[A-Z]/, upperToHyphenLower);
 *     }
 *
 * Given `styleHyphenFormat('borderTop')`, this returns 'border-top'.
 *
 * Because we want to further transform the _result_ of the match before the final substitution is made, we must use a function.
 * This forces the evaluation of the match prior to the `toLowerCase()` method. If we had tried to do this using the match without a function, the `toLowerCase()` would have no effect.
 *
 *     var newString = propertyName.replace(/[A-Z]/, '-' + '$&'.toLowerCase());  // won't work
 *
 * This is because `'$&'.toLowerCase()` would be evaluated first as a string literal (resulting in the same `'$&'`) before using the characters as a pattern.
 *
 * The following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with F. The function returns the Celsius number ending with C. For example, if the input number is 212F, the function returns 100C. If the number is 0F, the function returns -17.77777777777778C.
 *
 * The regular expression `test` checks for any number that ends with F. The number of Fahrenheit degree is accessible to the function through its second parameter, `p1`. The function sets the Celsius number based on the Fahrenheit degree passed in a string to the `f2c` function. `f2c` then returns the Celsius number. This function approximates Perl's `s///e` flag.
 *
 *     function f2c(x)
 *     {
 *         function convert(str, p1, offset, s)
 *         {
 *             return ((p1-32) * 5/9) + "C";
 *         }
 *         var s = String(x);
 *         var test = /(\d+(?:\.\d*)?)F\b/g;
 *         return s.replace(test, convert);
 *     }
 *
 * @param {String/RegExp} pattern Either a string or regular expression pattern to search for.
 *
 * @param {String/Function} replacement Either string or function:
 *
 * - The String to replace the `pattern` with. A number of special replacement patterns are supported;
 *   See the "Specifying a string as a parameter" section above.
 * - A function to be invoked to create the replacement.
 *   The arguments supplied to this function are described in the "Specifying a function as a parameter" section above.
 *
 * @return {String} String of matched replaced items.
 */
String.prototype.replace = function replace() {
    return '';
};
/**
 * @method search
 * Executes the search for a match between a regular expression and a specified string.
 *
 * If successful, search returns the index of the regular expression inside the string. Otherwise, it returns -1.
 *
 * When you want to know whether a pattern is found in a string use search (similar to the regular expression `test` method); for more information (but slower execution) use `match` (similar to the regular expression `exec` method).
 *
 * The following example prints a message which depends on the success of the test.
 *
 *     function testinput(re, str){
 *         if (str.search(re) != -1)
 *             midstring = " contains ";
 *         else
 *             midstring = " does not contain ";
 *         document.write (str + midstring + re);
 *     }
 *
 * @param {RegExp} regexp A regular expression object. If a non-`RegExp` object `obj` is passed, it is implicitly converted to a `RegExp` by using `new RegExp(obj)`.
 * @return {Number} If successful, search returns the index of the regular expression inside the string. Otherwise, it returns -1.
 */
// String.prototype.search = function search(regexp: string): number {
//  	return 0;
//  }
/**
 * @method slice
 * Extracts a section of a string and returns a new string.
 *
 * `slice` extracts the text from one string and returns a new string. Changes to the text in one string do not affect the other string.
 *
 * `slice` extracts up to but not including `endSlice`. `string.slice(1,4)` extracts the second character through the fourth character (characters indexed 1, 2, and 3).
 *
 * As a negative index, `endSlice` indicates an offset from the end of the string. `string.slice(2,-1)` extracts the third character through the second to last character in the string.
 *
 * The following example uses slice to create a new string.
 *
 *     // assumes a print function is defined
 *     var str1 = "The morning is upon us.";
 *     var str2 = str1.slice(4, -2);
 *     print(str2);
 *
 * This writes:
 *
 *     morning is upon u
 *
 * @param {Number} beginSlice The zero-based index at which to begin extraction.
 * @param {Number} endSlice The zero-based index at which to end extraction. If omitted, `slice` extracts to the end of the string.
 * @return {String} All characters from specified start up to (but excluding) end.
 */
String.prototype.slice = function slice(beginSlice, endSlice) {
    return '';
};
/**
 * @method split
 * Splits a `String` object into an array of strings by separating the string into substrings.
 *
 * The `split` method returns the new array.
 *
 * When found, `separator` is removed from the string and the substrings are returned in an array. If `separator` is omitted, the array contains one element consisting of the entire string.
 *
 * If `separator` is a regular expression that contains capturing parentheses, then each time separator is matched the results (including any undefined results) of the capturing parentheses are spliced into the output array. However, not all browsers support this capability.
 *
 * __Note:__ When the string is empty, `split` returns an array containing one empty string, rather than an empty array.
 *
 * The following example defines a function that splits a string into an array of strings using the specified separator. After splitting the string, the function displays messages indicating the original string (before the split), the separator used, the number of elements in the array, and the individual array elements.
 *
 *     function splitString(stringToSplit,separator)
 *     {
 *         var arrayOfStrings = stringToSplit.split(separator);
 *         print('The original string is: "' + stringToSplit + '"');
 *         print('The separator is: "' + separator + '"');
 *         print("The array has " + arrayOfStrings.length + " elements: ");
 *
 *         for (var i=0; i < arrayOfStrings.length; i++)
 *             print(arrayOfStrings[i] + " / ");
 *     }
 *
 *     var tempestString = "Oh brave new world that has such people in it.";
 *     var monthString = "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec";
 *
 *     var space = " ";
 *     var comma = ",";
 *
 *     splitString(tempestString, space);
 *     splitString(tempestString);
 *     splitString(monthString, comma);
 *
 * This example produces the following output:
 *
 *     The original string is: "Oh brave new world that has such people in it."
 *     The separator is: " "
 *     The array has 10 elements: Oh / brave / new / world / that / has / such / people / in / it. /
 *
 *     The original string is: "Oh brave new world that has such people in it."
 *     The separator is: "undefined"
 *     The array has 1 elements: Oh brave new world that has such people in it. /
 *
 *		The original string is: "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec"
 *		The separator is: ","
 *		The array has 12 elements: Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec /
 *
 * In the following example, `split` looks for 0 or more spaces followed by a semicolon followed by 0 or more spaces and, when found, removes the spaces from the string. nameList is the array returned as a result of split.
 *
 *     var names = "Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand ";
 *     print(names);
 *     var re = /\s*;\s*\/;
 *     var nameList = names.split(re);
 *     print(nameList);
 *
 * This prints two lines; the first line prints the original string, and the second line prints the resulting array.
 *
 *     Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand
 *     Harry Trump,Fred Barney,Helen Rigby,Bill Abel,Chris Hand
 *
 * In the following example, split looks for 0 or more spaces in a string and returns the first 3 splits that it finds.
 *
 *     var myString = "Hello World. How are you doing?";
 *     var splits = myString.split(" ", 3);
 *     print(splits);
 *
 * This script displays the following:
 *
 *     Hello,World.,How
 *
 * If `separator` contains capturing parentheses, matched results are returned in the array.
 *
 *     var myString = "Hello 1 word. Sentence number 2.";
 *     var splits = myString.split(/(\d)/);
 *     print(splits);
 *
 * This script displays the following:
 *
 *     Hello ,1, word. Sentence number ,2, .
 *
 * @param {String} seperator Specifies the character to use for separating the string. The separator is treated as a string or a regular expression. If separator is omitted, the array returned contains one element consisting of the entire string.
 * @param {Number} limit Integer specifying a limit on the number of splits to be found.  The split method still splits on every match of separator, but it truncates the returned array to at most limit elements.
 * @return {Array} Substrings are returned in an array.
 */
// String.prototype.split = function split(separator: string, limit?: number): string[] {
//  	return [''];
//  }
/**
 * @method substr
 * Returns the characters in a string beginning at the specified location through the specified number of characters.
 *
 * `start` is a character index. The index of the first character is 0, and the index of the last character is 1 less than the length of the string. `substr` begins extracting characters at start and collects length characters (unless it reaches the end of the string first, in which case it will return fewer).
 *
 * If `start` is positive and is greater than or equal to the length of the string, `substr` returns an empty string.
 *
 * If `start` is negative, `substr` uses it as a character index from the end of the string. If `start` is negative and `abs(start)` is larger than the length of the string, `substr` uses 0 as the start index. __Note:__ the described handling of negative values of the start argument is not supported by
 * Microsoft JScript.
 *
 * If `length` is 0 or negative, `substr` returns an empty string. If `length` is omitted, `substr` extracts characters to the end of the string.
 *
 * Consider the following script:
 *
 *     // assumes a print function is defined
 *     var str = "abcdefghij";
 *     print("(1,2): "    + str.substr(1,2));
 *     print("(-3,2): "   + str.substr(-3,2));
 *     print("(-3): "     + str.substr(-3));
 *     print("(1): "      + str.substr(1));
 *     print("(-20, 2): " + str.substr(-20,2));
 *     print("(20, 2): "  + str.substr(20,2));
 *
 * This script displays:
 *
 *     (1,2): bc
 *     (-3,2): hi
 *     (-3): hij
 *     (1): bcdefghij
 *     (-20, 2): ab
 *     (20, 2):
 *
 * @param {Number} start Location at which to begin extracting characters.
 * @param {Number} length The number of characters to extract.
 * @return {String} Modified string.
 */
String.prototype.substr = function substr(start, length) {
    return '';
};
/**
 * @method substring
 * Returns the characters in a string between two indexes into the string.
 *
 * substring extracts characters from `indexA` up to but not including `indexB`. In particular:
 *
 * *   If `indexA` equals `indexB`, `substring` returns an empty string.
 *
 * *   If `indexB` is omitted, substring extracts characters to the end of the string.
 *
 * *   If either argument is less than 0 or is `NaN`, it is treated as if it were 0.
 *
 * *   If either argument is greater than `stringName.length`, it is treated as if it were `stringName.length`.
 *
 * If `indexA` is larger than `indexB`, then the effect of substring is as if the two arguments were swapped; for example, `str.substring(1, 0) == str.substring(0, 1)`.
 *
 * The following example uses substring to display characters from the string "Sencha":
 *
 *     // assumes a print function is defined
 *     var anyString = "Sencha";
 *
 *     // Displays "Sen"
 *     print(anyString.substring(0,3));
 *     print(anyString.substring(3,0));
 *
 *     // Displays "cha"
 *     print(anyString.substring(3,6));
 *     print(anyString.substring(6,3));
 *
 *     // Displays "Sencha"
 *     print(anyString.substring(0,6));
 *     print(anyString.substring(0,10));
 *
 * The following example replaces a substring within a string. It will replace both individual characters and `substrings`. The function call at the end of the example changes the string "Brave New World" into "Brave New Web".
 *
 *     function replaceString(oldS, newS, fullS) {
 *         // Replaces oldS with newS in the string fullS
 *         for (var i = 0; i < fullS.length; i++) {
 *             if (fullS.substring(i, i + oldS.length) == oldS) {
 *                 fullS = fullS.substring(0, i) + newS + fullS.substring(i + oldS.length,
 *				    fullS.length);
 *             }
 *         }
 *         return fullS;
 *     }
 *
 *     replaceString("World", "Web", "Brave New World");
 *
 * @param {Number} indexA An integer between 0 and one less than the length of the string.
 * @param {Number} indexB (optional) An integer between 0 and the length of the string.
 * @return {String} Returns the characters in a string between two indexes into the string.
 */
String.prototype.substring = function substring(indexA, indexB) {
    return '';
};
/**
 * @method toLocaleLowerCase
 * The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as `toLowerCase`.
 *
 * The `toLocaleLowerCase` method returns the value of the string converted to lower case according to any locale-specific case mappings. `toLocaleLowerCase` does not affect the value of the string itself. In most cases, this will produce the same result as `toLowerCase()`, but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result.
 *
 * The following example displays the string "sencha":
 *
 *     var upperText="SENCHA";
 *     document.write(upperText.toLocaleLowerCase());
 *
 * @return {String} Returns value of the string in lowercase.
 */
String.prototype.toLocaleLowerCase = function toLocaleLowerCase() {
    return '';
};
/**
 * @method toLocaleUpperCase
 * The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as `toUpperCase`.
 *
 * The `toLocaleUpperCase` method returns the value of the string converted to upper case according to any locale-specific case mappings. `toLocaleUpperCase` does not affect the value of the string itself. In most cases, this will produce the same result as `toUpperCase()`, but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result.
 *
 * The following example displays the string "SENCHA":
 *
 *     var lowerText="sencha";
 *     document.write(lowerText.toLocaleUpperCase());
 *
 * @return {String} Returns value of the string in uppercase.
 */
String.prototype.toLocaleUpperCase = function toLocaleUpperCase() {
    return '';
};
/**
 * @method toLowerCase
 * Returns the calling string value converted to lower case.
 *
 * The `toLowerCase` method returns the value of the string converted to lowercase. `toLowerCase` does not affect the value of the string itself.
 *
 * The following example displays the lowercase string "sencha":
 *
 *     var upperText="SENCHA";
 *     document.write(upperText.toLowerCase());
 *
 * @return {String} Returns value of the string in lowercase.
 */
String.prototype.toLowerCase = function toLowerCase() {
    return '';
};
/**
 * @method toString
 * Returns a string representing the specified object. Overrides the `Object.toString` method.
 *
 * The `String` object overrides the `toString` method of the `Object` object; it does not inherit `Object.toString`. For `String` objects, the `toString` method returns a string representation of the object.
 *
 * The following example displays the string value of a `String` object:
 *
 *     x = new String("Hello world");
 *     alert(x.toString())      // Displays "Hello world"
 *
 * @return {String} A string representation of the object.
 */
String.prototype.toString = function toString() {
    return '';
};
/**
 * @method toUpperCase
 * Returns the calling string value converted to uppercase.
 *
 * The `toUpperCase` method returns the value of the string converted to uppercase. `toUpperCase` does not affect the value of the string itself.
 *
 * The following example displays the string "SENCHA":
 *
 *     var lowerText="sencha";
 *     document.write(lowerText.toUpperCase());
 *
 * @return {String} Returns value of the string in uppercase.
 */
String.prototype.toUpperCase = function toUpperCase() {
    return '';
};
/**
 * @method valueOf
 * Returns the primitive value of the specified object. Overrides the `Object.valueOf` method.
 *
 * The `valueOf` method of String returns the primitive value of a `String` object as a string data type. This value is equivalent to `String.toString`.
 *
 * This method is usually called internally by JavaScript and not explicitly in code.
 *
 *     x = new String("Hello world");
 *     alert(x.valueOf())          // Displays "Hello world"
 *
 * @return {String} Returns value of string.
 */
String.prototype.valueOf = function valueOf() {
    return '';
};
var nwfjs = nwfjs || {};
/**
     * @class HTMLWindow
     * @alternateClassName Window
     * @alternateClassName window
     *
     * The `window` object represents the window itself. The document property of a window points to the DOM document loaded in that window. In Nintendo Web Framework there are two window objects at any given time; one on the TV and one on the Wii U GamePad. They can be obtained using the `nwf.display.GamePadDisplay.window` and `nwf.display.TVDisplay.window` classes.
     *
     *		// get DisplayManager instance
     *		var displayManager = nwf.display.DisplayManager.getInstance();
     *		// get instance of the GamePadDisplay.
     *		var gamepadDisplay = nwf.display.DisplayManager.getInstance().getGamePadDisplay(0);
     *		// get the GamePad's window object
     *		var gpWin = gamepadDisplay.window;
     *
     * For the most part, each `window` object can be treated similarly to a tab in a web browser.
     *
     * _Note: In Shared Display mode, the window objects for both `TVDisplay` and `GamePadDisplay` are the same object._
     *
     * <div class="notice">
     * Documentation for this class comes from <a href="https://developer.mozilla.org/en-US/docs/DOM/window">MDN</a> and is available under <a href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons: Attribution-Sharealike license</a>.
     * </div>
     */
nwfjs.window = window;
/**
* @property {Object} document
* Returns a reference to the document that the window contains.
*/
window.document;
/**
 * @class null
 *
 * `null` is a literal (not a property of the global object like `undefined` can be).
 *
 * In APIs, `null` is often retrieved in place where an object can be expected but no object is relevant.
 *
 * <div class="notice">
 * Documentation for this class comes from <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/null">MDN</a> and is available under <a href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons: Attribution-Sharealike license</a>.
 * </div>
 */
null;
/**
* @class undefined
*
* `undefined` is a property of the global object, i.e., it is a variable in global scope.
*
* The initial value of `undefined` is the primitive value `undefined`.
*
* <div class="notice">
* Documentation for this class comes from <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/undefined">MDN</a> and is available under <a href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons: Attribution-Sharealike license</a>.
* </div>
*/
undefined;
/**
* @class Uint8Array
*
* The `Uint8Array` type represents an array of 8-bit unsigned integers.
*
* <div class="notice">
* Documentation for this class comes from <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Typed_arrays/Uint8Array">MDN</a> and is available under <a href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons: Attribution-Sharealike license</a>.
* </div>
*/
Uint8Array;
/**
* @class Float32Array
*
* The `Float32Array` type represents an array of 32-bit IEEE floating point numbers.
*
* <div class="notice">
* Documentation for this class comes from <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays/Float32Array">MDN</a> and is available under <a href="http://creativecommons.org/licenses/by-sa/2.5/">Creative Commons: Attribution-Sharealike license</a>.
* </div>
*/
Float32Array;
/// <reference path="./events/Event.ts" />
/// <reference path="./events/EventDispatcher.ts" />
/// <reference path="./act/NintendoAccountManager.ts" />
/// <reference path="./aoc/AOC.ts" />
/// <reference path="./display/DisplayManager.ts" />
/// <reference path="./ec/ECommerce.ts" />
/// <reference path="./fp/FriendPresence.ts" />
/// <reference path="./input/IController.ts" />
/// <reference path="./input/WiiBalanceBoard.ts" />
/// <reference path="./input/WiiRemote.ts" />
/// <reference path="./input/WiiUGamePad.ts" />
/// <reference path="./input/WiiUProController.ts" />
/// <reference path="./input/SoftwareKeyboard.ts" />
/// <reference path="./io/Directory.ts" />
/// <reference path="./io/File.ts" />
/// <reference path="./media/Camera.ts" />
/// <reference path="./media/Microphone.ts" />
/// <reference path="./mv/Miiverse.ts" />
/// <reference path="./net/Network.ts" />
/// <reference path="./nex/GameServer.ts" />
/// <reference path="./nex/DataStore.ts" />
/// <reference path="./nex/RankingClient.ts" />
/// <reference path="./system/system.ts" />
/// <reference path="./system/WiiUSystem.ts" />
/// <reference path="./ui/Animation.ts" />
/// <reference path="./ui/Dialog.ts" />
/// <reference path="./utils/utils.ts" />
/// <reference path="./utils/ProfanityFilter.ts" />
/// <reference path="./js-classes/webkitAudioContext.ts" />
/// <reference path="./js-classes/AudioBuffer.ts" />
/// <reference path="./js-classes/AudioBufferSourceNode.ts" />
/// <reference path="./js-classes/AudioOutputDeviceNode.ts" />
/// <reference path="./js-classes/ChorusNode.ts" />
/// <reference path="./js-classes/PannerNode.ts" />
/// <reference path="./js-classes/ReverbNode.ts" />
/// <reference path="./js-classes/HTMLCanvasElement.ts" />
/// <reference path="./js-classes/CanvasRenderingContext2D.ts" />
/// <reference path="./js-classes/HTMLImageElement.ts" />
/// <reference path="./js-classes/HTMLMediaElement.ts" />
/// <reference path="./js-classes/localStorage.ts" />
/// <reference path="./js-classes/Array.ts" />
/// <reference path="./js-classes/Blob.ts" />
/// <reference path="./js-classes/Boolean.ts" />
/// <reference path="./js-classes/Date.ts" />
/// <reference path="./js-classes/Function.ts" />
/// <reference path="./js-classes/Number.ts" />
/// <reference path="./js-classes/Object.ts" />
/// <reference path="./js-classes/RegExp.ts" />
/// <reference path="./js-classes/String.ts" />
/// <reference path="./js-classes/Window.ts" />
/// <reference path="./js-classes/JSTypes.ts" />
/*----------------------------------------------------------------------------*
    Copyright 2013-2015 Nintendo.  All rights reserved.

    These coded instructions, statements, and computer programs contain
    proprietary information of Nintendo of America Inc. and/or Nintendo
    Company Ltd., and are protected by Federal copyright law.  They may
    not be disclosed to third parties or copied or duplicated in any form,
    in whole or in part, without the prior written consent of Nintendo.
 *----------------------------------------------------------------------------*/
/**
 *
 * @class nwf
 * @author Ryan Lynd
 * @author Shawn Gates
 *
 * The nwf namespace (global object) encapsulates all classes, singletons, and utility methods provided by the Nintendo Web Framework API.
 * No methods or utilities exist on the namespace directly, and are instead accessed through the appropriate class.
 *
 * To access the display class, for example:
 *
 *      // Reference the class as a property of the namespace.
 *      var display = nwf.display;
 *
 * _Classes that use features that have not been enabled will be undefined._
 *
 */
/** @ignore */
var nwf;
(function (nwf) {
    /** @ignore */
    nwf.EMU_VERSION = '0.0.0';
})(nwf || (nwf = {}));
